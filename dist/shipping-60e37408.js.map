{"version":3,"file":"shipping-60e37408.js","mappings":"mWAIA,YACI,WAAYA,GACR,QAAK,UAAC,CACFC,KAAM,uBACNC,SAAS,EAAAC,EAAA,KAAqBC,UAAU,gCACxCJ,KAAI,KACN,K,OAEF,OAAe,EAAMK,EAAkBC,W,CAC3C,CACJ,OAV+C,oBAU/C,EAVA,CAA+CC,EAAA,G,0BCEhC,SAASC,EAAoBC,EAAoBC,G,MACtDC,EAAgC,CAClCC,EAAA,EAAgBC,UAChBD,EAAA,EAAgBE,6BAChBF,EAAA,EAAgBG,mCAEdC,GAA6B,EAAAC,EAAA,GACR,QAAvB,EAAAP,EAAOQ,wBAAgB,eAAEF,4BAEvBG,GAAqB,EAAAC,EAAA,GAAsBX,GAEjD,OAAIU,GAAsBR,EAAoBU,QAAQF,EAAmBG,aAAe,EAC7EH,EAAmBG,WAGvBN,GAA8BL,EAAoBU,QAAQL,IAA+B,EAC1FA,OACAO,CACV,C,4JC0DMC,GAAkB,EAAAC,EAAA,IACpB,IAAAC,YAAoE,CAChEC,aAAc,SAACC,EAAQ,IACnBC,EAD2C,uBAC7BD,EAClB,EACAE,iBAAkB,SAAC,G,IAAE,IAAAC,mBAA8B,OAC/CC,UAAW,GACXC,SAAU,GACVC,SAAU,GACVC,SAAU,GACVC,aAAc,CAAC,EACfC,QAAS,GACTC,iBAPmC,IAAG,KAAE,EAQxCC,gBAAiB,GACjBC,oBAAqB,GACrBC,WAAY,GACZC,MAAO,GACPC,KAAM,GACNC,QAAS,GACTC,mBAAmB,EAd4B,EAgBnDC,iBAAkB,SAAC,G,IAAEC,EAAQ,WAAEC,EAAS,YACpC,gBAAiC,SAACpB,GAC9B,SAAAqB,EAAA,GAAqC,CACjCF,SAAQ,EACRG,WAAYF,EAAUpB,GAAUA,EAAOU,cAF3C,GADJ,GArBR,EA9CA,SAAC,G,IACDa,EAAgB,mBAChBH,EAAS,YACTI,EAAyB,4BACzBC,EAAS,YACTzB,EAAM,SACN0B,EAAa,gBACbC,EAAS,YACTC,EAAc,iBACdC,EAAsB,yBACpB,OACF,gBAACC,EAAA,EAAI,CAACC,aAAa,MACf,gBAACC,EAAA,EAAc,CAACL,UAAWA,GACvB,gBAACM,EAAAC,EAAW,CACRT,UAAWA,EACXD,0BAA2BA,EAC3Bd,YAAaV,EAAOU,YACpBY,WAAYF,EAAUpB,EAAOU,aAC7Ba,iBAAkBA,EAClBM,uBAAwBA,EACxBH,cAAeA,EACfS,uBAAuB,IAE3B,uBAAKC,UAAU,gBACX,qBACIA,UAAU,2CACVC,KAAK,IACLC,SAAS,EAAAC,EAAA,GAAeX,IAExB,gBAACY,EAAA,EAAgB,CAACC,GAAG,0BAGzB,gBAACC,EAAA,GAAM,CACHC,SAAUhB,EACVc,GAAG,wBACHG,KAAK,SACLC,QAASH,EAAA,GAAcI,SAEvB,gBAACN,EAAA,EAAgB,CAACC,GAAG,mCA5BnC,KAwFN,QAtBmE,SAAC,GAChE,IAAAM,EAAM,SACNC,EAAW,cACXpB,EAAc,iBACXqB,GAAgB,cAJ6C,2CAK9D,OACF,gBAACC,EAAA,EAAK,CACFC,yBAAyB,gBACzBC,OACI,gBAACC,EAAA,EAAW,KACR,gBAACb,EAAA,EAAgB,CAACC,GAAG,iCAG7BM,OAAQA,EACRC,YAAaA,EACbpB,eAAgBA,EAChB0B,uBAAuB,GAEvB,gBAAC1D,GAAe,iBAAKqD,EAAgB,CAAErB,eAAgBA,K,iBCvHhD,SAAS2B,EACpBzE,GAEA,OAAO,SAAC0E,GACJ,IAAMC,EAAkG,SAACC,GAC7F,IAAAC,EAAoCD,EAAK,UAA9BE,EAAyBF,EAAK,qBAC3CG,GAAkC,IAAAC,QAAOF,GAa/C,OAXA,IAAAG,YAAU,YAE0C,IAA5CF,EAAgCG,UACP,IAAzBJ,GAEAD,IAGJE,EAAgCG,QAAUJ,CAC9C,GAAG,CAACA,IAEG,gBAACJ,GAAiB,iBAAKE,GAClC,EAMA,OAJAD,EAAmBQ,YAAc,6BAC7BT,EAAkBS,aAAeT,EAAkBnF,KAAI,MAGpD,IAAAyB,YAAWhB,EAAX,CAAmB2E,EAC9B,CACJ,C,QCpCA,YACI,WAAYrF,GACR,QAAK,UAAC,CACFC,KAAM,8BACNC,SAAS,EAAAC,EAAA,KAAqBC,UAAU,8CACxC0F,OAAO,EAAA3F,EAAA,KAAqBC,UACxB,sDAEJJ,KAAI,KACN,K,OAEF,OAAe,EAAM+F,EAA8BzF,W,CACvD,CACJ,OAb2D,oBAa3D,EAbA,CAA2DC,EAAA,G,QCA3D,YACI,WAAYP,GACR,QAAK,UAAC,CACFC,KAAM,qBACNC,SAAS,EAAAC,EAAA,KAAqBC,UAAU,8BACxCJ,KAAI,KACN,K,OAEF,OAAe,EAAMgG,EAAsB1F,W,CAC/C,CACJ,OAVmD,oBAUnD,EAVA,CAAmDC,EAAA,GCDpC,SAAS0F,EACpBC,EACAC,GAEA,OAAO,IAAAC,MAAKF,GAAc,SAACG,GAAgB,WAAAC,UAASD,EAAYE,YAAaJ,EAAlC,GAC/C,CCFe,SAASK,EACpBC,EACAP,GAEA,OAAO,IAAAQ,QACFD,GAAQA,EAAKE,UAAUC,eAAkB,IAC1C,SAACC,EAAQC,EAAMC,GACX,OAACD,EAAKE,mBAAoB,IAAAC,OAAMH,EAAKI,UAC/BL,EAAOM,OAAM,MAAbN,EAMlB,SACIC,EACAZ,EACAkB,GAKA,IAHA,IAAIC,EAA8B,GAC5BhB,EAAcJ,EAAgBC,EAAcY,EAAKzC,IAE9C0C,EAAI,EAAGA,EAAID,EAAKQ,SAAUP,IAC/BM,EAAaA,EAAWF,QAAO,gCACxBL,GAAI,CACPS,IAAK,UAAGT,EAAKU,UAAS,YAAIV,EAAKW,UAAS,YAAIL,EAAa,YAAIL,GAC7DV,YAAW,EACXiB,SAAU,KAIlB,OAAOD,CACX,CAxBmCK,CAAUZ,EAAMZ,EAAca,IAC/CF,CAFN,GAGJ,GAER,C,8CC+CA,SAAe,IAAAc,OAnDsD,SAAC,G,IAClE,IAAAb,KAAQzC,EAAE,KAAEkD,EAAG,MAAEK,EAAQ,WAAEN,EAAQ,WAAErH,EAAI,OAAE4H,EAAO,UAAExB,EAAW,cAC/DyB,EAAS,YACTC,EAAe,kBACfC,EAAe,kBAETC,GAAsB,IAAAC,cACxB,WACIF,EAAgB3D,EAAckD,EAClC,GACA,CAAClD,EAAI2D,EAAiBT,IAGpBY,GAAsB,IAAAD,cACxB,SAACE,GACGL,EAAgBK,EAAS/D,EAAckD,EAC3C,GACA,CAAClD,EAAIkD,EAAKQ,IAGd,OACI,uBAAK/D,UAAU,eACX,0BAAQA,UAAU,8BACb4D,GAAY,uBAAKS,IAAKpI,EAAMqI,IAAKV,KAGtC,uBAAK5D,UAAU,4BACX,sBAAIA,UAAU,oCAAoC,UAAGsD,EAAQ,cAAMrH,KAEjE4H,GAAW,IAAIU,KAAI,SAAC,G,IAAQC,EAAU,OAAEC,EAAK,QAAEC,EAAM,SAAO,OAC1D,sBACI1E,UAAU,qDAAoD,YACpD,kCACVuD,IAAKmB,GAEL,sBAAI1E,UAAU,kBAAkB,UAAGwE,EAAU,YAAIC,IANK,IAU9D,gBAACE,EAAA7E,EAAa,CACVgE,UAAWA,EACXC,gBAAiBI,EACjBH,gBAAiBC,EACjBW,gBAAiBvC,GAAeA,EAAYwC,gBAC5CrE,KAAMsE,EAAAhF,EAAYiF,YAKtC,I,gGC7De,SAASC,GACpBC,GAEA,GAAKA,EAIL,OAAOA,EAAyB7C,MAC5B,SAAC,GAA8C,OAA/B,eAA+B,GAEvD,C,oDCMM8C,GAAyE,SAAC,G,IAC5EC,EAAa,gBACbC,EAAmB,sBACnBC,EAAwB,2BACxBC,EAAc,iBAERC,EAAaF,IAA6BC,EAAejF,GAEzDmF,GAAc,IAAAtB,cAChB,WAAM,OACF,uBAAKlE,UAAU,uBACX,gBAACyF,GAAA,EAAoB,CAACC,8BAA8B,EAAMC,OAAQL,IAChEC,IAAeH,GACb,gBAACQ,EAAA,EAAS,CAACC,OAAM,oCAJvB,GAQN,CAACN,EAAYH,EAAqBE,IAItC,OACI,gBAACQ,GAAA,EAAa,CACVC,OAAQ,8BAAuBZ,EAAa,YAAIG,EAAejF,IAC/D2F,MAAOR,EACPf,MAAOa,EAAejF,IAGlC,EAsDA,UAAe,IAAAsD,OA1CyD,SAAC,G,IACrEwB,EAAa,gBACbc,EAAS,YACT1G,EAAS,YACT6F,EAAmB,sBACnB,IAAAc,gBAAAA,OAAe,IAAG,MAAW,EAC7Bb,EAAwB,2BACxBc,EAAgB,mBAEVC,GAAe,IAAAlC,cACjB,SAACO,GACG0B,EAAiBhB,EAAeV,EACpC,GACA,CAACU,EAAegB,IAGpB,OAAKD,EAAgBG,OAKjB,gBAACzG,EAAA,EAAc,CAACL,UAAWA,GACvB,gBAAC+G,GAAA,EAAS,aACI,SACVC,sBAAuBlB,EACvBpJ,KAAMgK,EACNO,SAAUJ,GAETF,EAAgB3B,KAAI,SAACe,GAAmB,OACrC,gBAACJ,GAAsB,CACnBC,cAAeA,EACfC,oBAAqBA,EACrB7B,IAAK+B,EAAejF,GACpBgF,yBAA0BA,EAC1BC,eAAgBA,GANiB,MAX1C,IAuBf,IC7EA,gC,qDAgGY,EAAAmB,6BAAmE,yDAAO,G,sBAAEzK,EAAI,O,iEAQpF,OAPM,EAA0C0K,KAAKpF,MAA7CqF,EAAoB,uBAAErH,EAAa,gBAErC+C,GAAerG,EAAK4K,mBAAqB,IAAIxE,MAC/C,SAAC,G,IAAEyE,EAAsB,yBAA4BX,EAAe,2BAChE,OAACW,GAA0BX,CAA3B,IAGH7D,GAAgBA,EAAY4C,0BAIzBA,EAAiC5C,EAAW,yBAAlBhC,EAAOgC,EAAW,GAC9CyE,EAAoB9B,GAA6BC,GACjD8B,EACkC,IAApC9B,EAAyBoB,QAAgBpB,EAAyB,IAChE+B,EAAwBF,GAAqBC,GAMnD,GAAMJ,EAAqBtG,EAAI2G,EAAsB3G,KAHjD,KAVA,I,cAaJ,SACAf,EAAc,4BAAqBe,GAAM2G,EAAsB3G,I,aAgCvE,QAvJkC,oBAK9B,YAAA4G,kBAAA,WACY,IAAAC,EAA4BR,KAAKpF,MAAK,wBAE9CoF,KAAKS,YAAcD,EAAwBR,KAAKD,6BACpD,EAEA,YAAAW,mBAAA,WACU,MAIFV,KAAKpF,MAHL+F,EAAgB,mBAChBnF,EAAY,eACZoF,EAAyB,6BAGzBpF,aAAY,EAAZA,EAAcmE,SAAUiB,GACxBD,EAAiBE,qBAEzB,EAEA,YAAAC,qBAAA,WACQd,KAAKS,cACLT,KAAKS,cACLT,KAAKS,iBAAc5J,EAE3B,EAEA,YAAAkK,OAAA,sBACU,EAQFf,KAAKpF,MAPLY,EAAY,eACZkD,EAAmB,sBACnBuB,EAAoB,uBACpBpH,EAAS,YACT+H,EAAyB,4BACzBI,EAAsB,yBACtBC,EAAQ,WAGZ,OAAKzF,aAAY,EAAZA,EAAcmE,SAAWiB,EAqB1B,gCACKpF,EAAaqC,KAAI,SAAClC,GAAgB,OAC/B,uBAAKrC,UAAU,0CAA0CuD,IAAKlB,EAAYhC,IACrE+E,GAAuB,EAAKwC,kBAAkBvF,GAE/C,gBAAC,GAAmB,CAChB8C,cAAe9C,EAAYhC,GAC3B4F,WAoFDd,EApF8B9C,EAAYhC,GAqF1D,4BAAqB8E,IApFJ5F,UAAWA,EAAU8C,EAAYhC,IACjC+E,oBAAuBA,EACvBe,iBAAkBQ,EAClBtB,yBACIhD,EAAYwE,wBACZxE,EAAYwE,uBAAuBxG,GAEvC6F,gBAAiB7D,EAAY4C,6BAG9B5C,EAAY4C,2BACV5C,EAAY4C,yBAAyBoB,SACtC,gBAACwB,GAAA,EAAiB,CACdC,oBAAoB,2BACpBvI,UAAWA,EAAU8C,EAAYhC,IACjC0H,KAAM,GAEL,EAAKC,wBAAwBN,KAkE9D,IAA2BvC,CA1FwB,KApBnC,gBAAC0C,GAAA,EAAiB,CACdC,oBAAoB,2BACpBvI,UAAWA,IACXwI,KAAM,GAELrB,KAAKsB,wBACF,gBAAC5H,EAAA,EAAgB,CACbC,GACIsH,GAAYvC,EACN,wCACA,0CAyClC,EA4BQ,YAAA4C,wBAAR,SAAgC9L,GAC5B,OACI,uBAAK8D,UAAU,mDACX,iCACc,SACVA,UAAU,iEACViI,KAAK,SAEJ/L,GAIjB,EAEQ,YAAA0L,kBAAR,SAA0BvF,GACd,IAAAI,EAASiE,KAAKpF,MAAK,KAE3B,OACI,uBAAKtB,UAAU,qBACX,8BACI,gBAACI,EAAA,EAAgB,CAACC,GAAG,uCAGzB,gBAAC6H,GAAA,EAAa,CAAC9D,QAAS/B,EAAYwC,gBAAiBrE,KAAMsE,EAAAhF,EAAYiF,WAEvE,gBAACoD,GAAA,EAAyB,CAAC1F,KAAMA,EAAMJ,YAAaA,IAGhE,EACJ,EAvJA,CAAkC,EAAA+F,eAmKlC,UAAe,EAAAC,GAAA,GAAclH,EAAwE,CACjGxD,aAAc,EAAA2K,KACdxK,iBAAgB,SAAC,G,IAAEoE,EAAY,eACrBqG,EAA8C,CAAC,EAQrD,OANCrG,GAAgB,IAAIsG,SAAQ,SAACnG,GAC1BkG,EAAkBlG,EAAYhC,IAAMgC,EAAYwE,uBAC1CxE,EAAYwE,uBAAuBxG,GACnC,EACV,IAEO,CAAEkI,kBAAiB,EAC9B,GAZyBpH,CAa1BsH,KCvKH,IAAMC,IAAkC,SACpC,SAAC,GAA8C,OAA7B,kBAA6CC,SAAhB,IAC/C,SAACA,GAAc,gBAACC,GACZ,OAAOD,EAAUC,GAAY,SAAC,GAAa,OAAP,OAAYhC,iBAAL,GAC/C,CAFe,IAKbiC,IAAoB,SACtB,SAACC,EAAsB,GAAgD,OAA7B,mBAA6B,IACvE,SAAC,GAAoC,OAA1B,WAAmCC,wBAAT,IACrC,SAAC,GAAoC,OAA1B,WAAmCC,yBAAT,IACrC,SAAC,GAAoC,OAA1B,WAAmCC,qBAAT,IACrC,SAAC,GAAoC,OAA1B,WAAmCC,sBAAT,IACrC,SACIC,EACAJ,EACAC,EACAC,EACAC,GAEA,OAAO,SAAC/D,GACJ,OACIgE,GACAJ,KACAC,EAA0B7D,IAC1B8D,EAAsB9D,IACtB+D,GAER,CACJ,IAmDJ,UAAe,EAAAE,EAAA,IArCR,SACH,EACA9H,G,IADE+H,EAAe,kBAAEC,EAAa,gBAI5B,EAEAA,EAAa,KAFLC,EAAO,UAAE3C,EAAe,kBAAE4C,EAAS,YAAEC,EAAW,cAAEC,EAAW,cACzDV,EACZM,EAAa,mCAEXK,EAAWF,IACXhH,EAAO8G,IACP7M,EAAS8M,IACT/M,EAAWiN,IAEjB,KAAKhN,GAAWD,GAAakN,GAAalH,GACtC,OAAO,KAGX,IAAMP,EA7Be,SAACO,EAAYmH,GAClC,GAAIA,EAAqBvD,OAAS,EAC9B,OAAOuD,EAGX,IAAMC,EAAiBrH,EAAsBC,EAAMmH,GAC7CE,GAAoB,IAAAC,OAAK,IAAAxF,KAAIsF,EAAgB,mBAEnD,OAAO,IAAAG,QAAOJ,GAAsB,SAACvH,GAAgB,OAAAyH,EAAkBzM,QAAQgF,EAAYhC,GAAtC,GACzD,CAoByB4J,CAAiBxH,EAAMmE,KAAqB,IAC3De,EAAWnL,EAAoBC,EAAUC,GAG/C,MAAO,CACH+F,KAAI,EACJP,aAAY,EACZwF,uBALmChL,EAAOQ,iBAAgB,2BAM1DqC,UAAWsJ,GAAkBS,EAAehI,GAC5C0H,0BAAyB,EACzBrB,SAAQ,EACRhB,qBAAsB0C,EAAgBa,gCACtChD,wBAAyBwB,GAAgC,CACrDW,gBAAe,EACfC,cAAa,IAGzB,GAEA,CAAkD,IChClD,SAvDuE,SAAC,G,IACpEa,EAAc,iBACd/E,EAAmB,sBACnBgF,EAAuB,0BACvB,IAAA9C,0BAAAA,OAAyB,IAAG,GAAI,EAChC+C,EAAmB,sBACnB7I,EAAoB,uBACpBjC,EAAS,YAET,OACI,gCACI,gBAACqG,EAAA,EAAS,CAACC,OAAM,uCACjB,gBAACyE,GAAA,EAAQ,CACLjK,GAAG,4BACHkK,OACI,gCACI,gBAACC,GAAA,EAAM,KACH,gBAACpK,EAAA,EAAgB,CAACC,GAAG,oCAGxB8J,GACG,gBAACM,EAAA3K,EAAK,CAACU,KAAMiK,EAAA,EAAUC,OACnB,8BACI,gBAACtK,EAAA,EAAgB,CAACC,GAAG,mCAOzC,gBAACsK,GAAe,CACZnJ,qBAAsBA,EACtB4D,oBAAqBA,EACrB+D,kBAAmB5J,EACnB+H,0BAA2BA,KAIlC8C,GAA2B,gBAACQ,EAAA,EAAa,MAE1C,uBAAK5K,UAAU,gBACX,gBAACM,EAAA,GAAM,CACHC,SAAU8J,EACVhK,GAAG,6BACHd,UAAWA,EACXiB,KAAK,SACLC,QAASH,EAAA,GAAcI,SAEvB,gBAACN,EAAA,EAAgB,CAACC,GAAG,6BAKzC,ECNA,gC,qDAeI,EAAAwK,MAAgC,CAAEC,MAAO,IA6EjC,EAAAC,sBAAoC,WACxC,EAAKC,SAAS,CAAEC,gCAA4B1N,GAChD,EAEQ,EAAA2N,kBAA0D,SAAO9G,GAAO,kD,6EAI5E,OAHQ+G,EAA0BzE,KAAKpF,MAAK,uBACpC8J,EAAsB1E,KAAKmE,MAAK,oBAMlChG,GAAkB,EAAAwG,EAAA,GAAyBjH,GAEjD,GAAMsC,KAAKvC,oBACPU,EACAuG,EAAkBjJ,OAClBiJ,EAAkB7H,OARlB,I,OAKJ,S,iBAOI,O,sBAAA,GAAM4H,EAAsBtG,I,cAA5B,S,0CAEqB6F,OACjBhE,KAAKsE,SAAS,CAAEC,2BAA4B,I,oBAIpDvE,KAAKsE,SAAS,CACVI,uBAAmB7N,I,YAInB,EAAA0G,oBAAiE,SACrE9B,EACAmJ,GAEA,EAAKN,SAAS,CACVI,kBAAmB,CACf7H,IAAK+H,EACLnJ,OAAM,IAGlB,EAEQ,EAAAoJ,0BAAwC,WAC5C,EAAKP,SAAS,CACVI,uBAAmB7N,GAE3B,EAEQ,EAAA4G,oBAIa,SAAOC,EAASjC,EAAQmJ,GAAO,kD,iFAGhD,GAFM,EAA8C5E,KAAKpF,MAAjDkK,EAAU,aAAEC,EAAgB,mBAAEzM,EAAS,cAE1C,EAAA0M,EAAA,GAAetH,EAASpF,EAAUoF,EAAQ9F,cAC3C,MAAO,CAAP,EAAOmN,EAAiB,IAAI,I,iBAIX,O,sBAAA,GAAMD,EAAW,CAC9BpH,QAAO,EACPzB,UAAW,CACP,CACIR,OAAM,EACNmB,SAAU,O,cALdtH,EAAS,SAQf,KAEF0K,KAAKiF,UAAUL,EAASlH,EAASpI,G,0CAEZ0O,OACjBe,EAAiB,IAAI,EAAsB,I,+BAK/C,EAAApB,oBAAqC,WACnC,MAA8B,EAAK/I,MAAjC/B,EAAS,YAAE2C,EAAY,eAE/B,OAAO3C,KAAc,EAAAqM,EAAA,GAA2B1J,EACpD,EAEQ,EAAAyJ,UAAkF,SACtFpI,EACAa,EACApI,GAEQ,IAAO6P,EAAiB,EAAKhB,MAAK,MACpCC,ECnPC,SACXA,EACA,EACA,G,IADEgB,EAAgB,mBAAE1H,EAAO,UACzB3B,EAAI,OAAEP,EAAY,eAEpB,KAAI4J,EAAmB,GAAKA,GAAoBhB,EAAMzE,SAAW5D,EAAjE,CAIA,IAAMsJ,EAActJ,EAAKE,UAAUC,cAAc2B,KAAI,SAAC,GAAW,OAAP,IAAO,IAE3DyH,GAAsB9J,GAAgB,IAAIE,MAAK,SAACC,GAClD,SAAA4J,EAAA,GAAe5J,EAAYwC,gBAAiBT,EAA5C,IAGE8H,EAiBV,SACIpJ,EACAL,EACAJ,GAEA,GAAKI,GAASJ,EAAd,CAIQ,IACF8J,EADoB1J,EAAKE,UAAS,cACAyJ,QACpC,SAAC,G,IAAE3I,EAAS,YAAED,EAAS,YAAO,OAAAC,IAAcX,EAAKW,WAAaD,IAAcV,EAAKU,SAAnD,IAG5B6I,EAAsBF,EAAkB5H,KAAI,SAAC,GAAW,OAAP,IAAO,IAE9D,OAAOlC,EAAYE,YAAYH,MAAK,SAAC/B,GAAO,OAAAgM,EAAoB/J,SAASjC,EAA7B,GAT5C,CAUJ,CAlCkBiM,CAAcxB,EAAMgB,GAAmBrJ,EAAMuJ,GAE3D,OAAOlB,EAAMvG,KAAI,SAACzB,EAAMC,GACpB,GAAKmJ,IAAUH,EAAYzJ,SAASQ,EAAKzC,KAAQ0C,IAAM+I,EAAkB,CACrE,IAAM3J,EAAS+J,QAAAA,EAASpJ,EAAKzC,GAE7B,OAAO,gCACAyC,GAAI,CACPzC,GAAI8B,EACJE,YAAaJ,EAAgBC,GAAgB,GAAIC,IAEzD,CAEA,OAAOW,CACX,GAtBA,CAuBJ,CDqNsByJ,CACVV,EACA,CACIC,iBAAkBD,EAAaW,WAAU,SAAC1J,GAAS,OAAAA,EAAKS,MAAQA,CAAb,IACnDa,QAAO,GAEX,CACI3B,KAAMzG,EAAKuN,UACXrH,aAAclG,EAAK4K,oBAIvBkE,GACA,EAAKE,SAAS,CAAEF,MAAK,GAE7B,E,CACJ,QAzMgC,oBAIrB,EAAA2B,yBAAP,SACI,EACA5B,G,IADEpI,EAAI,OAAEP,EAAY,eAGpB,OAAK2I,GAAUA,EAAMC,QAAS,EAAA4B,EAAA,GAAuBjK,KAAUoI,EAAMC,MAAMzE,OAIpE,KAHI,CAAEyE,MAAOtI,EAAsBC,EAAMP,GAIpD,EAIA,YAAAuF,OAAA,sBACU,EAcFf,KAAKpF,MAbLwC,EAAS,YACT5B,EAAY,eACZO,EAAI,OACJ0H,EAAc,iBACdC,EAAuB,0BACvB5I,EAAoB,uBACpBjC,EAAS,YACTP,EAAS,YACTjB,EAAkB,qBAClBsB,EAAS,YACTD,EAAyB,4BACzBD,EAAgB,mBAChBM,EAAsB,yBAGpB,EAA2DiH,KAAKmE,MAA9DC,EAAK,QAAEM,EAAiB,oBAAEH,EAA0B,6BAE5D,OACI,gCACI,gBAAC0B,EAAA,EAAU,CACPC,MAAO3B,EACP/O,QACI,gCACI,gBAACkE,EAAA,EAAgB,CAACC,GAAG,6CAA8C,IACnE,gBAACD,EAAA,EAAgB,CAACC,GAAG,mCAG7BwM,QAASnG,KAAKqE,sBACd+B,qBAAqB,IAEzB,gBAAC,EAAgB,CACbzN,UAAWA,EACXD,0BAA2BA,EAC3BrB,mBAAoBA,EACpBiB,UAAWA,EACXG,iBAAkBA,EAClBM,uBAAwBA,EACxBF,UAAWA,EACXoB,SAAUyK,EACV5L,eAAgBkH,KAAK6E,0BACrB1N,cAAe6I,KAAKwE,oBAGxB,gBAACxL,EAAA,EAAI,KACD,sBAAIM,UAAU,mBACT8K,EAAMvG,KAAI,SAACzB,GAAS,OACjB,sBAAIS,IAAKT,EAAKS,KACV,gBAAC,EAAiB,CACdO,UAAWA,EACXhB,KAAMA,EACNiB,gBAAiB,EAAKI,oBACtBH,gBAAiB,EAAKC,sBANb,KAYzB,gBAAC,GAAkB,CACfkG,eAAgBA,EAChB3I,qBAAsBA,EACtBjC,UAAWA,EACX6F,qBAAqB,EACrBiF,oBAAqB3D,KAAK2D,sBAC1BD,wBAAyBA,EACzB9C,4BACK,EAAAyF,EAAA,GAAuB7K,EAAcO,EAAKE,cAMnE,EA+GJ,EAzMA,CAAgC,EAAAyF,eA+MhC,UAAe,EAAA3K,EAAA,GACX0D,EAAwF,CACpFxD,aAAc,SAACC,EAAQ,IACnBoP,EADsC,kBAC7BpP,EACb,EACAE,iBAAkB,SAAC,GAAwB,OACvCmP,aADgC,kBAAO,EAG3CC,oBAAoB,GAPxB/L,CAQGgM,K,gBE9HP,SA1ImC,SAAC,G,IAChC9K,EAAW,cACXjD,EAAyB,4BACzBrB,EAAkB,qBAClBwB,EAAS,YACTkM,EAAgB,mBAChB7G,EAAe,kBACfwI,EAAqB,wBAEf,GAAoD,IAAAC,WAAS,GAA5DC,EAAqB,KAAEC,EAAwB,KAChD,GAA8D,IAAAF,YAA7DpC,EAA0B,KAAEuC,EAA6B,KAE1D,GAKF,UAHI,kBAAAxR,KAAQuN,EAAO,UAAEkE,EAAoB,uBAAEhE,EAAW,cAAED,EAAS,YAA4BxK,EAAS,2BAEtG,IAAAqK,gBAAyCmC,EAAU,uBAAEL,EAAqB,wBAGxE1I,EAAO8G,IACPlK,EAAYoO,KAA0B,IACtC9D,EAAWF,IACX/M,EAAS8M,IAEf,IAAK9M,IAAW+F,IAASkH,EACrB,OAAO,KAGX,IAAM+D,GAA6B,EAAAjO,EAAA,GAAuB/C,EAAOQ,kBAC3D4G,EAAY6F,EAAS7F,WAAa,IAGhC3E,EAEJzC,EAAM,kCAEJyH,EAAsB,SAAOC,GAAgB,uD,2EAC/C,KAAK,EAAAsH,EAAA,GAAetH,EAASpF,EAAUoF,EAAQ9F,cAC3C,MAAO,CAAP,EAAOmN,EAAiB,IAAI,IAGhC,IAAKpJ,EAOD,OANA+K,SAAAA,EAAwB,CACpBhJ,QAAO,EACPS,gBAAiBT,EACjBzB,UAAW,KAGf,IAGEgL,GAAgB,0CAAIlL,EAAKE,UAAUC,eAAe,GAAIH,EAAKE,UAAUiL,aAAe,KAAY,GAChGC,EAAuBxL,EAAYE,YAAYgC,KAAI,SAAAuJ,G,MAAc,OACjE3L,OAAQ2L,EAAYxK,UAA2D,QAAjD,EAAAqK,EAAcvL,MAAK,SAAC,GAAW,OAAP,OAAc0L,CAAP,WAAkB,eAAExK,WAAY,E,qBAI/F,O,sBAAA,GAAMkI,EAAW,CACbpH,QAAO,EACPzB,UAAWkL,K,cAFf,S,0CAMqBnD,OACjBe,EAAiB,IAAI,EAAsB,I,+BAqCvD,OACI,gCACI,gBAACkB,EAAA,EAAU,CACPC,MAAO3B,EACP/O,QACI,gCACI,gBAACkE,EAAA,EAAgB,CAACC,GAAG,6CAA8C,IACnE,gBAACD,EAAA,EAAgB,CAACC,GAAG,mCAG7BwM,QAdkB,WAC1BW,OAA8BjQ,EAClC,EAaYuP,qBAAqB,IAEzB,gBAAC,EAAgB,CACbzN,UAAWA,EACXD,0BAA2BA,EAC3BrB,mBAAoBA,EACpBiB,UAAWA,EACXG,iBAAkBA,EAClBM,uBAAwBiO,EACxBnO,UAAWA,EACXoB,OAAQ2M,EACR9N,eAlDsB,WAC9B+N,GAAyB,EAC7B,EAiDY1P,cA/Cc,SAAOkQ,GAAoC,uD,yEAGjE,OAFM3J,GAAU,EAAAiH,EAAA,GAAyB0C,IAEpC,EAAArC,EAAA,GAAetH,EAASpF,EAAUoF,EAAQ9F,cAI/C,GAAM6F,EAAoBC,IAHf,CAAP,EAAOqH,EAAiB,IAAI,I,OAGhC,S,iBAGI,O,sBAAA,GAAMN,EAAsB/G,I,cAA5B,S,0CAEqBsG,OACjB8C,EAA8B,G,oBAItCD,GAAyB,G,cAgCrB,gBAAC5I,EAAA7E,EAAa,CACVgE,UAAWA,EACXC,gBAAiBI,EACjBH,gBA5DgB,WACxBuJ,GAAyB,EAC7B,EA2DY3I,gBAAiBA,EACjBoJ,uBAAqB,EACrBxN,KAAMsE,EAAAhF,EAAYiF,WAIlC,ECxHA,SAxB4B,SAAC,G,IACzB1C,EAAW,cACX4L,EAAiB,oBACjB7O,EAAyB,4BACzBrB,EAAkB,qBAClBwB,EAAS,YACTkM,EAAgB,mBAGhB,OACI,uBAAKzL,UAAU,yBACX,sBAAIA,UAAU,sB,wBAA2CiO,GACzD,gBAAC,GAA0B,CACvB5L,YAAaA,EACbjD,0BAA2BA,EAC3BrB,mBAAoBA,EACpBwB,UAAWA,EACXkM,iBAAkBA,EAClB7G,gBAAiBvC,EAAYwC,kBAI7C,ECEA,SAxB8E,SAAC,G,IAC3EuF,EAAuB,0BACvBC,EAAmB,sBACnB9K,EAAS,YAET,OACI,gBAACG,EAAA,EAAI,KACA0K,GAA2B,gBAACQ,EAAA,EAAa,MAE1C,uBAAK5K,UAAU,gBACX,gBAACM,EAAA,GAAM,CACHC,SAAU8J,EACVhK,GAAG,6BACHd,UAAWA,EACXiB,KAAK,SACLC,QAASH,EAAA,GAAcI,SAEvB,gBAACN,EAAA,EAAgB,CAACC,GAAG,6BAKzC,ECyBA,SA3CuB,SAAC,G,IACpB4N,EAAiB,oBACjB7O,EAAyB,4BACzBrB,EAAkB,qBAClBwB,EAAS,YACTkM,EAAgB,mBAEV,GAA8C,IAAA4B,YAA7Ca,EAAkB,KAAEd,EAAqB,KAIhCK,GAEZ,UAAa,wCAEX7I,GAAkB,IAAAuJ,UAAQ,WAC5B,GAAKD,aAAkB,EAAlBA,EAAoB9J,QAAzB,CAIA,IAAM/E,EAAYoO,KAA0B,IACtCpP,GAAU,IAAA+D,MAAK/C,EAAW,CAAE+O,KAAMF,EAAmB9J,QAAQ9F,cAEnE,OAAO,gCACA4P,EAAmB9J,SAAO,CAC7B/F,QAASA,EAAUA,EAAQpC,KAAOiS,EAAmB9J,QAAQ9F,aAPjE,CASJ,GAAG,CAAC4P,IAEJ,OACI,uBAAKlO,UAAU,yBACX,sBAAIA,UAAU,sB,wBAA2CiO,GACzD,gBAAC,GAA0B,CACvB7O,0BAA2BA,EAC3BrB,mBAAoBA,EACpBwB,UAAWA,EACXkM,iBAAkBA,EAClB7G,gBAAiBA,EACjBwI,sBAAuBA,IAGvC,ECuCA,UAAe,EAAA3P,EAAA,GACX0D,EAA4F,CACxFxD,aAAc,SAACC,EAAQ,IACnBoP,EADsC,kBAC7BpP,EACb,EACAE,iBAAkB,SAAC,GAAwB,OACvCmP,aADgC,kBAAO,EAG3CC,oBAAoB,GAPxB/L,EAtEqE,SAAC,G,IACtE/B,EAAyB,4BACzBrB,EAAkB,qBAClBwB,EAAS,YACTkM,EAAgB,mBAEV,GAA0D,IAAA4B,WAAS,GAAlEgB,EAAwB,KAAEC,EAA2B,KAIpD,GAEJ,UAAa,mBAFD1H,EAAe,kBAAE4C,EAAS,YAIpCtH,EAAe0E,KAAqB,IACpClK,EAAS8M,IAETa,GAAsB,IAAA8D,UAAQ,WAChC,OAAO5O,KAAc,EAAAqM,EAAA,GAA2B1J,EACpD,GAAG,CAAC3C,EAAW2C,IAEf,IAAKxF,EACD,OAAO,KAKH,IAAqB0N,EAEzB1N,EAAM,qCAMV,OACI,gCACKwF,EAAaqC,KAAI,SAAClC,EAA0BkM,GAAkB,OAC3D,gBAAC,GAAmB,CAChBlM,YAAaA,EACb4L,kBAAmBM,EAAQ,EAC3BnP,0BAA2BA,EAC3BrB,mBAAoBA,EACpBwB,UAAWA,EACXgE,IAAKlB,EAAYhC,GACjBoL,iBAAkBA,GARqC,KAWrC,IAAxBvJ,EAAamE,QAAgBgI,IAC3B,gBAAC,GAAc,CACXJ,kBAA2C,IAAxB/L,EAAamE,OAAe,EAAKnE,EAAamE,OAAS,EAC1EjH,0BAA2BA,EAC3BrB,mBAAoBA,EACpBwB,UAAWA,EACXkM,iBAAkBA,IAG1B,gBAACnL,EAAA,GAAM,CAACN,UAAU,yBAAyBE,QA1Bd,WACjCoO,GAA4B,EAChC,EAwB0F7N,QAASH,EAAA,GAAckO,WAAS,4BAGlH,gBAAC,GAAyB,CACtBjP,UAAWA,EACX8K,oBAAqBA,EACrBD,wBAAyBA,IAIzC,K,gBChEA,SAtB+E,SAAC,G,IAC5EqE,EAAQ,WACRC,EAAe,kBAEf,OACI,uBAAK1O,UAAU,sBACX,gBAACI,EAAA,EAAgB,CAACC,GAAG,uCAAwC,IAC7D,iCACc,wBACVJ,KAAK,IACLC,SAAS,EAAAC,EAAA,GAAesO,IAExB,gBAACrO,EAAA,EAAgB,CAACC,GAAG,0CACpB,IACL,gBAACsO,GAAA,EAAc,CACXtO,GAAG,sCACHH,QAASwO,IAIzB,E,mDCDA,UAAe,IAAA/K,OAnBwE,SAAC,G,IACpFiL,EAAQ,WAEFC,GAAe,IAAAV,UACjB,WAAM,uBAAC/N,EAAA,EAAgB,CAACC,GAAG,sCAArB,GACN,IAGJ,OACI,gBAACyO,GAAA,EAAiB,CACdzO,GAAG,gBACHwO,aAAcA,EACd5S,KAAK,wBACL2S,SAAUA,EACVG,OAAO,yBAGnB,I,wCC4EA,SAvEA,yB,qDA+DY,EAAAC,uBACJ,SAAC/S,GAAS,gBAACwI,IAGPwK,EAF0B,EAAK3N,MAAK,eAEtBrF,EAAMwI,EACxB,CAJU,E,CAKlB,QArEoC,oBAC1B,YAAAwC,kBAAN,W,sIACU,EAAoDP,KAAKpF,MAAvD4N,EAAU,aAAEvH,EAAQ,WAAE,IAAA8D,iBAAAA,OAAgB,IAAG,IAAAnD,KAAI,E,iBAGjD,O,sBAAA,GAAM4G,EAAW,CAAEvH,SAAQ,K,cAA3B,S,+BAEA8D,EAAiB,G,+BAInB,YAAAjE,qBAAN,W,sIACU,EAAsDd,KAAKpF,MAAzD6N,EAAY,eAAExH,EAAQ,WAAE,IAAA8D,iBAAAA,OAAgB,IAAG,IAAAnD,KAAI,E,iBAGnD,O,sBAAA,GAAM6G,EAAa,CAAExH,SAAQ,K,cAA7B,S,+BAEA8D,EAAiB,G,+BAIzB,YAAAhE,OAAA,sBACU,EAA+Cf,KAAKpF,MAAlD8C,EAAO,UAAEgL,EAAQ,WAAElQ,EAAU,aAAEK,EAAS,YAE1C8P,EAAmBnQ,EAAWkN,QAAO,SAAC,GAAe,OAAP,QAAO,IACrDkD,EAA6BD,EAAiBhJ,OAAS,EAE7D,OACI,gBAACzG,EAAA,EAAc,CAACL,UAAWA,GACvB,uBAAKS,UAAU,aAAauP,MAAO,CAAEC,QAAS,IAC1C,uBAAKxP,UAAU,6BACX,gBAACkI,GAAA,EAAa,CAAC9D,QAASA,KAG5B,uBAAKpE,UAAU,gCACX,gBAACM,EAAA,GAAM,CACHD,GAAI+O,EACJlP,SAAS,EAAAC,EAAA,KACTsP,KAAMnP,EAAA,GAAWoP,KACjBX,OAAO,mBACPtO,QAASH,EAAA,GAAckO,WAEvB,gBAACpO,EAAA,EAAgB,CAACC,GAAG,0BAKhCiP,GACG,gBAAChF,GAAA,EAAQ,CAACjK,GAAG,kBACRgP,EAAiB9K,KAAI,SAACoL,GAAU,OAC7B,gBAACC,GAAA,EAAgB,CACbD,MAAOA,EACPpM,IAAK,UAAGoM,EAAMtP,GAAE,YAAIsP,EAAM1T,MAC1B2S,SAAU,EAAKI,uBAAuBW,EAAM1T,MAC5C4T,gBAAgB,gCALS,KAYrD,EAQJ,EArEA,CAAoC,EAAAzH,eCrB7B,IAAM0H,GAA8D,SAACxO,GAEpE,IAAAqG,EAOArG,EAAK,SANLpC,EAMAoC,EAAK,WALL2N,EAKA3N,EAAK,cAJL4N,EAIA5N,EAAK,WAHL6N,EAGA7N,EAAK,aAFLuD,EAEAvD,EAAK,gBADLyO,EACAzO,EAAK,sBAEH0O,GAAqB,IAAA9L,cACvB,UACI,SAAC+L,GAA8C,gBAACpM,GAC5C,OAAAqL,GAAW,gCACJe,GACApM,GAFP,CAD2C,IAMnD,IAGEqM,EAAsB,mBAEtBrM,EAAqC,CACvCsM,UAAW,CACPD,oBAAmB,IAI3B,OACI,gBAAC,GAAqB,CAClB9L,QAASS,EACTuK,SAAUc,EACVf,aAAcA,EACdjQ,WAAYA,EACZgQ,WAAYc,EAAmBnM,GAC/BtE,UAAWwQ,EACXpI,SAAUA,EACVsH,cAAeA,GAG3B,E,oFC8JA,UAAe,IAAAtL,OA1K2B,SAACrC,GAEnC,IAAS8O,EAST9O,EAAK,QARLqG,EAQArG,EAAK,SAPLpC,EAOAoC,EAAK,WANL/B,EAMA+B,EAAK,UALL4N,EAKA5N,EAAK,WAJL6N,EAIA7N,EAAK,aAHLmK,EAGAnK,EAAK,iBAFL2N,EAEA3N,EAAK,cADLjC,EACAiC,EAAK,UACH8C,GAAU,EAAAiM,GAAA,GAAgBD,EAA4B/Q,GAEtDiR,GAAkC,IAAA5O,QAA0C,CAAC,GAE7E6O,EAAgC,CAClCC,uBAAwB,CACpBC,8BAA+B,SAC3BC,GAEAJ,EAAgC1O,QAAQ+O,oBACpCD,CACR,IAIFE,EAA2B,CAC7BC,kBAAmB,CACfJ,8BAA+B,SAC3BC,GAEAJ,EAAgC1O,QAAQ+O,oBACpCD,CACR,IAIFI,GAAmD,QACrDnJ,GAEE4I,EACAK,GAyBN,IAAAjP,YAAU,WAGN,OA1BsC,gD,uEAElC,O,sBAAA,GAAMuN,GAAW,eACbvH,SAAQ,GACLmJ,K,cAFP,S,+BAKgC,mBAArBrF,GAAmC,aAAiBf,OAC3De,EAAiB,G,8BAkBlB,YAbiC,gD,uEAEpC,O,sBAAA,GAAM0D,EAAa,CAAExH,SAAQ,K,cAA7B,S,+BAEgC,mBAArB8D,GAAmC,aAAiBf,OAC3De,EAAiB,G,6BAUzB,CACJ,GAAG,IAEH,IAAM4D,EAAmBnQ,EAAWkN,QAAO,SAAC,GAAe,OAAP,QAAO,IACrDkD,EAA6BD,EAAiBhJ,OAAS,EAmB7D,OACI,gBAAC,KAAc,CAAC0K,wBAAsB,EAACxR,UAAWA,GAC9C,uBAAKS,UAAU,aAAauP,MAAO,CAAEC,QAAS,IAC1C,uBAAKxP,UAAU,6BACX,uBAAKA,UAAU,mCACToE,EAAQpG,WAAaoG,EAAQnG,WAC3B,qBAAG+B,UAAU,oBACT,wBAAMA,UAAU,cAAc,UAAGoE,EAAQpG,UAAS,MAClD,wBAAMgC,UAAU,eAAeoE,EAAQnG,YAI7CmG,EAAQ1F,OAAS0F,EAAQxF,UACvB,qBAAGoB,UAAU,iBACT,wBAAMA,UAAU,gBAAgB,UAAGoE,EAAQxF,QAAO,MAClD,wBAAMoB,UAAU,OAAOoE,EAAQ1F,QAIvC,uBAAKsB,UAAU,OACX,qBAAGA,UAAU,gCACT,wBAAMA,UAAU,kBAAkB,UAAGoE,EAAQlG,SAAQ,MACpDkG,EAAQjG,UACL,wBAAM6B,UAAU,kBAAkB,aAAMoE,EAAQjG,YAIxD,qBAAG6B,UAAU,iBACRoE,EAAQzF,MACL,wBAAMqB,UAAU,YAAY,UAAGoE,EAAQzF,KAAI,OAE9CyF,EAAQ4M,mBACL,wBAAMhR,UAAU,UAAU,UAAGoE,EAAQ4M,kBAAiB,OAEzD5M,EAAQ3F,YACL,wBAAMuB,UAAU,eAAe,UAAGoE,EAAQ3F,WAAU,QAEvD2F,EAAQ6M,kBACL,wBAAMjR,UAAU,gBAAgB,UAAGoE,EAAQ6M,iBAAgB,SAM3E,gBAACC,GAAA,EAA4B,OAGjC,uBAAKlR,UAAU,gCACX,gBAAC,MAAM,CACHE,QA/DU,kE,6EACiD,mBAAhEoQ,EAAgC1O,QAAQ+O,oBAA/C,MAEI,GAAML,EAAgC1O,QAAQ+O,uB,QAD5C/L,EACF,WAGAtD,EAAM6P,iBAAgB,gCACfvM,GACC0K,EAA6BlL,EAAQhG,aAAe,CAAC,I,mCAwDrDqR,KAAM,MAAWC,KACjBX,OAAO,mBACPtO,QAAS,MAAc+N,WAEvB,gBAACpO,EAAA,EAAgB,CAACC,GAAG,0BAKhCiP,GACG,gBAAC,KAAQ,CAACjP,GAAG,kBACRgP,EAAiB9K,KAAI,SAACoL,GAAU,OAC7B,gBAAC,KAAgB,CACbA,MAAOA,EACPpM,IAAK,UAAGoM,EAAMtP,GAAE,YAAIsP,EAAM1T,MAC1B2S,UAlFmD3S,EAkFlB0T,EAAM1T,KAlFqB,SAACwI,GACjF,OAAAwK,EAAchT,EAAMwI,EAApB,GAkFoBoL,gBAAgB,iCAnFkC,IAAC5T,CA8E1B,KAYrD,ICrMO,IAAMmV,GAAwE,SAAC9P,GAE9E,IAAAqG,EAUArG,EAAK,SATLpC,EASAoC,EAAK,WARLjC,EAQAiC,EAAK,UAPL6P,EAOA7P,EAAK,gBANL2N,EAMA3N,EAAK,cALLmK,EAKAnK,EAAK,iBAJL4N,EAIA5N,EAAK,WAHL6N,EAGA7N,EAAK,aAFL/B,EAEA+B,EAAK,UADLuD,EACAvD,EAAK,gBAET,OACI,gBAAC,GAAiC,CAC9B8C,QAASS,EACTxF,UAAWA,EACX8P,aAAcA,EACdjQ,WAAYA,EACZgQ,WAAYA,EACZ3P,UAAWA,EACXoI,SAAUA,EACVwJ,gBAAiBA,EACjBlC,cAAeA,EACfxD,iBAAkBA,GAG9B,E,wBCRM4F,GAAmB,kBAEzB,4B,qDAmEY,EAAA/R,cAAiE,SACrEgS,EACAC,GAEM,MAGF,EAAKjQ,MAFKhC,EAAa,uBAQrBkS,EAPQ,aAITpF,QAAO,SAACuD,GAAU,OAAAA,EAAM8B,MAAN,IAClBlN,KAAI,SAACoL,GAAU,OAAAA,EAAM1T,IAAN,IAEuBqG,SAASgP,GAC9C,uBAAgBA,GAChBA,EAENhS,EAAc,UAAG+R,GAAgB,YAAIG,GAAiBD,EAC1D,EAEQ,EAAAG,aAA2D,SAACJ,EAAW7M,IAG3EwK,EAF0B,EAAK3N,MAAK,eAEtBgQ,EAAW7M,EAC7B,EAEQ,EAAAkN,yBAAqF,SAAC,G,IAC1FhR,EAAM,SACNiR,EAAU,aAEF3C,EAAkB,EAAK3N,MAAK,cAE/BX,GACDsO,EAAc,WAAY2C,EAElC,E,CACJ,QAvGkC,oBAG9B,YAAAnK,OAAA,WACU,MAeFf,KAAKpF,MAdLwC,EAAS,YACAe,EAAe,UACxBsM,EAAe,kBACfnN,EAAe,kBACfjE,EAAqB,wBACrBV,EAAS,YACTD,EAAyB,4BACzBF,EAAU,aACVK,EAAS,YACTJ,EAAgB,mBAChBM,EAAsB,yBAESoS,EAAW,gCAIxCC,EAAehO,GAAaA,EAAUuC,OAAS,EAC/C0L,GAA0B,EAAAC,GAAA,GAC5BnN,EACAf,EACA5E,GAGJ,OACI,gBAACoL,GAAA,EAAQ,CAACjK,GAAG,2BACRyR,GACG,gBAACxH,GAAA,EAAQ,CAACjK,GAAG,qBACT,gBAACT,EAAA,EAAc,CAACL,UAAWA,GACvB,gBAACoF,EAAA7E,EAAa,CACVgE,UAAWA,EACXC,gBAAiBoN,EACjBnN,gBAAiBA,EACjBY,gBACImN,EAA0BlN,OAAkBtH,EAEhDiD,KAAMsE,EAAAhF,EAAYiF,cAMhCgN,GACE,gBAACnS,EAAA,EAAc,CAACL,UAAWA,EAAW0S,2BAAyB,GAC3D,gBAACpS,EAAAC,EAAW,CACRT,UAAWA,EACXD,0BAA2BA,EAC3Bd,YAAauT,GAAeA,EAAYvT,YACxCgT,UAAWD,GACXnS,WAAYA,EACZC,iBAAkBA,EAClBM,uBAAwBA,EACxByS,qBAAsBxL,KAAKiL,yBAC3B/C,SAAUlI,KAAKgL,aACfpS,cAAeoH,KAAKpH,cACpBS,sBAAuBA,KAM/C,EAsCJ,EAvGA,CAAkC,EAAAoS,WAyGlC,UAAe,EAAAC,GAAA,GAAcC,IC9B7B,UAAe,IAAA1O,OApEkD,SAACrC,GAE1D,IAAAqG,EAeArG,EAAK,SAdLpC,EAcAoC,EAAK,WAbLjC,EAaAiC,EAAK,UAZLlC,EAYAkC,EAAK,0BAXLY,EAWAZ,EAAK,aAVLnC,EAUAmC,EAAK,iBATL6P,EASA7P,EAAK,gBARL2N,EAQA3N,EAAK,cAPL0C,EAOA1C,EAAK,gBANL/B,EAMA+B,EAAK,UALLuD,EAKAvD,EAAK,gBAJLgR,EAIAhR,EAAK,4BAHLwC,EAGAxC,EAAK,UAFLvB,EAEAuB,EAAK,sBADL7B,EACA6B,EAAK,uBAEDiR,GAAyC,EAAAC,EAAA,KAA0B,qCACnEC,GAAiB,IAAAC,YAAWC,GAAA,IAAY,aAUhD,MAAiB,cAAbhL,GAA4B9C,EAExB,gBAACiL,IAAwB,iBACjBxO,EAAK,CACTuD,gBAAiBA,KAKzB8C,IAAY,QAAuBA,IAAa9C,GAAmB0N,EAE/D,gBAACnB,IAA6B,iBACrB9P,EAAK,CACVqG,SAAUA,EACV9C,gBAAiBA,KAMzB,gBAAC,GAAmB,CAChBT,QAASS,EACTf,UAAWA,EACX5B,aAAcA,EACd7C,UAAWA,EACXD,0BAA2BA,EAC3BF,WAAYA,EACZC,iBAAkBA,EAClBM,uBAAwBA,EACxBF,UAAWA,EACX4R,gBAAiBA,EACjBlC,cAvC8D,SAACqC,EAAW7M,GAC1E6N,GACAG,GAAa,GAGjBxD,EAAcqC,EAAW7M,EAC7B,EAkCQT,gBAAiBA,EACjBjE,sBAAuBA,GAGnC,IC3GO,IAAM6S,GAA0B,CACnC,WACA,aACA,cACA,OACA,kBACA,uBCuFG,IAEP,eAaI,WACItR,G,MAEA,IAAK,UAACA,IAAM,KAXhB,EAAAuJ,MAAiC,CAC7BgI,oBAAoB,EACpBC,wBAAwB,EACxBR,6BAA6B,GA6GzB,EAAAjI,oBAAqC,WACnC,MAAuC,EAAK/I,MAA1C/B,EAAS,YAAE2C,EAAY,eAAE6Q,EAAO,UAEhCD,EAA2B,EAAKjI,MAAK,uBAE7C,QAAKkI,IAIExT,GAAauT,KAA2B,EAAAlH,EAAA,GAA2B1J,GAC9E,EAEQ,EAAA8Q,kBAA4C,SAAO/W,GAAI,kD,2EAS3D,OARQqD,EAAkBoH,KAAKpF,MAAK,cAEvB,gBAATrF,IACAqD,EAAc,kCAAmC,IACjDA,EAAc,sCAAuC,KAIzD,GAAM,IAAI2T,SAAQ,SAACC,GAAY,OAAAC,WAAWD,EAAX,K,OAQ/B,OARA,SAEME,EAAkBR,GAAwBtQ,SAASrG,GAEjDqW,EAAgC5L,KAAKmE,MAAK,4BAE9BnE,KAAKpF,MAAK,SAM9BoF,KAAK2M,0BAA0BD,IAAoBd,G,KAH/C,I,QA6BA,EAAAgB,oBAAkD,SAAOlP,GAAO,kD,mFAC9D,EAAgEsC,KAAKpF,MAAnEiS,EAAa,gBAAE,IAAA9H,iBAAAA,OAAgB,IAAG,IAAAnD,KAAI,EAAE1K,EAAM,SAAE4V,EAAS,YAEjE9M,KAAKsE,SAAS,CAAE6H,oBAAoB,I,iBAGhC,O,uBAAA,GAAMU,EAAcnP,I,cAApB,SAEAoP,GAAU,gCACH5V,GAAM,CACTiH,iBAAiB,EAAA4O,GAAA,GACb/M,KAAK1H,UAAUoF,EAAQ9F,aACvB8F,M,+BAIRqH,EAAiB,G,oBAEjB/E,KAAKsE,SAAS,CAAE6H,oBAAoB,I,6BAIpC,EAAA7O,gBAA8B,6D,qFAC5B,EAAqE0C,KAAKpF,MAAxEoS,EAAkB,qBAAE,IAAAjI,iBAAAA,OAAgB,IAAG,IAAAnD,KAAI,EAAEkL,EAAS,YAAE5V,EAAM,SAEtE8I,KAAKsE,SAAS,CAAE6H,oBAAoB,I,iBAGhB,O,uBAAA,GAAMa,K,cAAhBtP,EAAU,SAEhBoP,GAAU,gCACH5V,GAAM,CACTiH,iBAAiB,EAAA4O,GAAA,GACb/M,KAAK1H,UAAUoF,GAAWA,EAAQ9F,aAClC8F,M,+BAIRqH,EAAiB,G,oBAEjB/E,KAAKsE,SAAS,CAAE6H,oBAAoB,I,6BAtMhC,IAAAU,EAAkB,EAAKjS,MAAK,c,OAEpC,EAAKqS,wBAAyB,IAAAC,WAC1B,SAAOxP,EAAkByP,GAA+B,kD,iEAEhD,O,sBAAA,GAAMN,EAAcnP,EAAS,CACzB0P,OAAQ,CACJC,QAAS,CACL,wCAAyCF,O,cAHrD,SAQIA,GACAnN,KAAKsE,SAAS,CAAEsH,6BAA6B,I,oBAGjD5L,KAAKsE,SAAS,CAAE8H,wBAAwB,I,8BAGrB,QAA3B,EAAAxR,EAAM0S,6BAAqB,QAxCA,M,CA0CnC,CAyLJ,OAjOiC,oBA0C7B,YAAAvM,OAAA,WACU,MAoBFf,KAAKpF,MAnBLwC,EAAS,YACTqG,EAAc,iBACd3I,EAAoB,uBACpBjC,EAAS,YACTkM,EAAgB,mBAChB9D,EAAQ,WACR5H,EAAqB,wBACrBV,EAAS,YACTD,EAAyB,4BACzBD,EAAgB,mBAChB0F,EAAe,kBACf3C,EAAY,eACZkI,EAAuB,0BACvB8E,EAAU,aACV6D,EAAO,UACP5D,EAAY,eACe8E,EAAW,yBACtClE,EAAqB,wBACrBtQ,EAAsB,yBAGpB,EACFiH,KAAKmE,MADDgI,EAAkB,qBAAEC,EAAsB,yBAAER,EAA2B,8BAIzE4B,GADuB,CAAC,aACgCC,MAC1D,SAACxO,GAAW,OAAAA,IAAWgC,CAAX,IAGhB,OACI,gBAACjI,EAAA,EAAI,CAACC,aAAa,MACf,gBAAC2K,GAAA,EAAQ,KACL,gBAAC,GAAe,CACZxG,UAAWA,EACX5B,aAAcA,EACd7C,UAAWA,EACXD,0BAA2BA,EAC3B+P,aAAcA,EACdjQ,WAAYwH,KAAK1H,UAAUiV,GAAeA,EAAY3V,aACtDa,iBAAkBA,EAClBmT,4BAA6BA,EAC7BpD,WAAYA,EACZzP,uBAAwBA,EACxBF,UAAWsT,EACX9C,sBAAuBA,EACvBpI,SAAUA,EACVwJ,gBAAiBzK,KAAK4M,oBACtBrE,cAAevI,KAAKsM,kBACpBvH,iBAAkBA,EAClBzH,gBAAiB0C,KAAK1C,gBACtBa,gBAAiBA,EACjB9E,sBAAuBA,IAE1BmU,GACG,uBAAKlU,UAAU,aACX,gBAAC,GAA0B,QAKvC,gBAAC,GAAkB,CACfmK,eAAgBA,EAChB3I,qBAAsBA,EACtBjC,UAAWA,GAAauT,EACxB1N,qBAAqB,EACrBiF,oBAAqB3D,KAAK2D,sBAC1BD,wBAAyBA,EACzB9C,0BAA2ByL,IAI3C,EAsCQ,YAAAM,0BAAR,SAAkCQ,GACxB,MAGFnN,KAAKpF,MAFLuD,EAAe,kBACYoP,EAAW,yBAGpCG,EAAyBH,IAAe,EAAA5I,EAAA,GAAyB4I,GAEnEI,MAAMC,QAAQzP,aAAe,EAAfA,EAAiBzG,gBAC/ByV,IAA0B,IAAAU,SACtB1P,aAAe,EAAfA,EAAiBzG,aACjBgW,aAAsB,EAAtBA,EAAwBhW,eACvByV,GAGJO,KAA0B,EAAAnI,EAAA,GAAemI,EAAwBvP,KAItE6B,KAAKsE,SAAS,CAAE8H,wBAAwB,IACxCpM,KAAKiN,uBAAuBS,EAAwBP,GACxD,EA8CQ,YAAA7U,UAAR,SAAkBV,GAGd,OAAOU,EAFe0H,KAAKpF,MAAK,WAEfhD,EACrB,EA7NO,EAAAkW,YAAc7B,GAAA,GA8NzB,C,CAjOA,CAAiC,EAAAvK,eAmOjC,UAAe,EAAA3K,EAAA,GACX0D,EAA0F,CACtFxD,aAAc,SAACC,EAAQ,IACnBoP,EADsC,kBAC7BpP,EACb,EACAE,iBAAkB,SAAC,G,IACfkB,EAAS,YACT6F,EAAe,kBAGb,OACF4P,sBAHuB,0BAIvBxH,aAHe,kBAIfpI,iBAAiB,EAAA4O,GAAA,GACbzU,EAAU6F,GAAmBA,EAAgBvG,aAC7CuG,GALF,EAQN6P,eAAgB,SAAC,G,IAAE7P,EAAe,kBAAE7F,EAAS,YAAED,EAAQ,WACnD,QAAE8F,IACF,EAAA5F,EAAA,GAAqC,CACjCF,SAAQ,EACRG,WAAYF,EAAU6F,EAAgBvG,eACvCqW,YAAY9P,EAJf,EAKJ/F,iBAAkB,SAAC,G,IACfC,EAAQ,WACRC,EAAS,YAGT,OA3QZ,SAAoC2I,GAChC,IAAMiN,EAA6C,CAC/ChY,EAAA,EAAgBE,6BAChBF,EAAA,EAAgBG,mCAGpB,OAAO8X,QAAQlN,IAAaiN,EAAiCtS,SAASqF,GAC1E,CAoQYmN,CAFQ,aAGF,QAAO,CACHjQ,iBAAiB,SAAiC,SAACkQ,GAC/C,SAAAC,GAAA,GAAoC,CAChC5Y,WAAW,OAAyB2C,GACpCG,WAAYF,EAAU+V,GAAcA,EAAWzW,cAFnD,OAMR,QAAO,CACHuG,iBAAiB,SAAiC,SAACkQ,GAC/C,SAAA9V,EAAA,GAAqC,CACjCF,SAAQ,EACRG,WAAYF,EAAU+V,GAAcA,EAAWzW,cAFnD,KAXd,EAiBJ4O,oBAAoB,GA7CxB/L,CA8CG8T,KC3LP,UAAe,EAAAxX,EAAA,IApHM,SAAC,G,IAClBqG,EAAS,YACT0H,EAAU,aACV/I,EAAI,OACJ0H,EAAc,iBACdgB,EAAqB,wBACrBjJ,EAAY,eACZ7C,EAAS,YACTD,EAAyB,4BACzBsP,EAAe,kBACfwG,EAAe,kBACf/F,EAAY,eACZuE,EAAkB,qBAClB1U,EAAS,YACTG,EAAgB,mBAChB+P,EAAU,aACViG,EAAuB,0BACvBC,EAAO,UACP7V,EAAS,YACT6F,EAAmB,sBACnBuC,EAAQ,WACR0N,EAAqB,wBACrB5G,EAAQ,WACR6G,EAAsB,yBACtB7J,EAAgB,mBAChBzH,EAAe,kBACfa,EAAe,kBACfuF,EAAuB,0BACvBrK,EAAqB,wBACrBwV,EAAO,UACPhC,EAAa,gBACbxD,EAAqB,wBACrBtQ,EAAsB,yBACtB+B,EAAoB,uBACpBgU,EAA2B,8BAErB,GAAuD,EAAAhD,EAAA,KAArDiD,EAAuB,0BAAEC,EAAuB,0BAElDC,EAAoBF,GAA2BL,EAC/CM,EACA5R,EA2CN,OAAOsB,EAxCCgQ,EAEI,gBAAC,GAAsB,CAAC1G,gBAAiBA,EAAiBD,SAAUA,IAIxE+G,EACO,gBAAC,GAAmB,CACvBpW,0BAA2BA,EAC3B8V,gBAAiBA,EACjBnX,mBAAoB8G,aAAe,EAAfA,EAAiBvG,YACrCiB,UAAWA,EACXyN,SAAUqI,EACV5J,iBAAkBA,IAInB,gBAAC,GAAiB,CACrB3H,UAAW6R,EACXnK,WAAYA,EACZ/I,KAAMA,EACN0H,eAAgBA,EAChBjI,aAAcA,EACd7C,UAAWA,EACXD,0BAA2BA,EAC3B+L,sBAAuBA,EACvB+J,gBAAiBA,EACjBnX,mBAAoB8G,aAAe,EAAfA,EAAiBvG,YACrCU,UAAWA,EACXG,iBAAkBA,EAClBM,uBAAwBA,EACxB+B,qBAAsBA,EACtBjC,UAAWA,EACXyN,SAAUqI,EACV5J,iBAAkBA,EAClBzH,gBAAiBA,EACjBoG,wBAAyBA,IAO7B,gBAAC,GAAkB,CACftG,UAAW6R,EACXxL,eAAgBA,EAChBjI,aAAcA,EACd7C,UAAWA,EACXD,0BAA2BA,EAC3B8V,gBAAiBA,EACjB/F,aAAcA,EACduE,mBAAoBA,EACpB1U,UAAWA,EACXG,iBAAkBA,EAClB+P,WAAYA,EACZiG,wBAAyBA,EACzB1V,uBAAwBA,EACxB+B,qBAAsBA,EACtBjC,UAAWA,EACX6F,oBAAqBA,EACrB2K,sBAAuBA,EACvBpI,SAAUA,EACVqF,SAAUsI,EACV7J,iBAAkBA,EAClB5G,gBAAiBA,EACjBuF,wBAAyBA,EACzBrK,sBAAuBA,EACvBwV,QAASA,EACThC,cAAeA,GAG3B,IC9HA,UAAe,IAAA5P,OAtCgD,SAAC,G,IAC5DyB,EAAmB,sBACnBgQ,EAAO,UACPQ,EAAqB,wBACrBC,EAAuB,0BAEvB,OACI,gCACI,gBAACjQ,EAAA,EAAS,CAACC,OAAM,wCACjB,uBAAK7F,UAAU,yBACX,gBAACwK,GAAA,EAAM,CAACuE,OAAO,4BACX,gBAAC3O,EAAA,EAAgB,CACbC,GACI+E,EACMgQ,EACI,+CACA,yCACJ,uCAKjBS,GACG,iCACc,uBACV5V,KAAK,IACLC,SAAS,EAAAC,EAAA,GAAeyV,IAExB,gBAACxV,EAAA,EAAgB,CACbC,GAAI+E,EAAsB,0BAA4B,6BAOlF,I,gBCCA,SA1CA,yB,8CAwCA,QAxC2C,oBACjC,YAAA6B,kBAAN,W,sIACU,EAIFP,KAAKpF,MAHL4N,EAAU,aACVvH,EAAQ,WACR,IAAA8D,iBAAAA,OAAgB,IAAG,IAAAnD,KAAI,E,iBAIvB,O,sBAAA,GAAM4G,EAAW,CAAEvH,SAAQ,K,cAA3B,S,+BAEA8D,EAAiB,G,+BAInB,YAAAjE,qBAAN,W,sIACU,EAIFd,KAAKpF,MAHL6N,EAAY,eACZxH,EAAQ,WACR,IAAA8D,iBAAAA,OAAgB,IAAG,IAAAnD,KAAI,E,iBAIvB,O,sBAAA,GAAM6G,EAAa,CAAExH,SAAQ,K,cAA7B,S,+BAEA8D,EAAiB,G,+BAIzB,YAAAhE,OAAA,WAEI,OACI,gCACI,uBAAKzH,UAAU,aAAauP,MAAQ,CAAEC,QAAS,IAC3C,uBAAKnP,GAAG,oBAAoBkP,MAAQ,CAAEuG,MAAO,WAEjD,2BAGZ,EACJ,EAxCA,CAA2C,EAAA1N,eCH5B,SAAS2N,GAAkB1X,EAAiBwM,G,MAEjDxL,EAAkC,CACpC,GAAM,CACF,OAAQ,MACR,OAAQ,MACR,SAAU,MACV,QAAS,MACT,QAAS,MACT,OAAQ,MACR,QAAS,MACT,QAAS,MACT,OAAQ,MACR,OAAQ,MACR,OAAQ,MACR,OAAQ,MACR,OAAQ,MACR,OAAQ,MACR,KAAQ,MACR,QAAS,MACT,OAAQ,MACR,OAAQ,MACR,OAAQ,MACR,OAAQ,MACR,OAAQ,MACR,OAAQ,MACR,OAAQ,MACR,SAAU,MACV,OAAQ,MACR,OAAQ,MACR,OAAQ,MACR,SAAU,MACV,QAAS,MACT,OAAQ,MACR,OAAQ,MACR,OAAQ,OAEZ,GAAM,CACF,kCAAmC,IACnC,eAAgB,IAChB,UAAa,IACb,MAAS,IACT,OAAU,IACV,QAAW,IACX,WAAc,IACd,aAAc,IACd,QAAW,IACX,MAAS,IACT,WAAY,IACZ,WAAY,IACZ,QAAW,IACX,SAAY,IACZ,QAAW,IACX,MAAS,IACT,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,sBAAuB,IACvB,mBAAoB,IACpB,QAAW,KAEf,GAAM,CACF,iBAAkB,KAClB,oBAAqB,KACrB,MAAS,KACT,MAAS,KACT,aAAgB,KAChB,IAAO,KACP,QAAW,KACX,QAAW,KACX,mBAAoB,KACpB,oBAAqB,KACrB,UAAa,KACb,UAAa,KACb,OAAU,KACV,iBAAkB,KAClB,YAAe,KACf,QAAW,KACX,UAAa,KACb,QAAW,KACX,SAAY,KACZ,OAAU,KACV,OAAU,KACV,UAAa,KACb,OAAU,KACV,aAAc,KACd,QAAW,KACX,YAAe,KACf,gBAAiB,KACjB,cAAe,KACf,8BAA+B,KAC/B,WAAc,KACd,2CAA4C,KAC5C,YAAe,KACf,MAAS,KACT,WAAc,KACd,UAAa,MAEjB,GAAM,CACF,KAAQ,KACR,OAAU,KACV,SAAY,KACZ,KAAQ,KACR,cAAe,KACf,iBAAkB,KAClB,iBAAkB,KAClB,KAAQ,KACR,MAAS,KACT,mBAAoB,KACpB,QAAW,KACX,aAAc,KACd,aAAc,KACd,6BAA8B,KAC9B,mBAAoB,KACpB,oBAAqB,KACrB,mBAAoB,KACpB,qBAAsB,KACtB,sBAAuB,KACvB,sBAAuB,KACvB,mBAAoB,KACpB,kBAAmB,KACnB,iBAAkB,KAClB,oBAAqB,KACrB,OAAU,KACV,eAAgB,KAChB,UAAa,MAEjB,GAAM,CACF,MAAS,MACT,MAAS,MACT,SAAY,MACZ,OAAU,MACV,kBAAmB,MACnB,OAAU,MACV,eAAgB,MAChB,MAAS,MACT,OAAU,MACV,SAAY,MACZ,WAAc,MACd,MAAS,MACT,QAAW,MACX,eAAgB,MAChB,OAAU,MACV,UAAa,OAEjB,GAAM,CACF,OAAU,KACV,MAAS,KACT,MAAS,KACT,QAAW,KACX,OAAU,IACV,OAAU,IACV,QAAW,KACX,SAAY,KACZ,MAAS,KACT,QAAW,KACX,SAAY,KACZ,MAAS,KACT,KAAQ,KACR,MAAS,KACT,SAAY,KACZ,OAAU,KACV,UAAa,KACb,MAAS,KACT,UAAa,KACb,UAAa,KACb,UAAa,KACb,QAAW,KACX,QAAW,MAEfa,KACb,KAAQ,KACR,MAAS,KACT,UAAa,KACb,SAAY,KACZ,MAAS,KACT,QAAW,KACX,SAAY,KACZ,MAAS,KACT,OAAU,KACV,UAAa,KACb,SAAY,KACZ,MAAS,KACT,SAAY,KACZ,MAAS,KACT,IAAO,KACP,OAAU,KACV,SAAY,KACZ,OAAU,KACV,SAAY,KACZ,KAAQ,KACR,QAAW,KACX,KAAQ,KACR,QAAW,KACX,QAAW,KACX,MAAS,KACT,KAAQ,KACR,QAAW,KACX,MAAS,KACT,QAAW,KACX,SAAY,KACZ,QAAW,KACX,UAAa,KACb,MAAS,KACT,QAAW,KACX,OAAU,KACV,SAAY,KACZ,SAAY,KACZ,UAAa,KACb,UAAa,OAIrB,OAAIA,EAAUhB,GACsB,QAAzB,EAAAgB,EAAUhB,GAASwM,UAAM,QAMxC,SAAwBmL,EAA+BnL,GACnD,OAAOoL,OAAOC,KAAKF,GAAW5T,MAAK,SAAAmB,GAAO,OAAAyS,EAAUzS,KAASsH,CAAnB,KAA6BA,CAC3E,CAR4CsL,CAAe9W,EAAUhB,GAAUwM,GAGpEA,CACX,CC1CA,UAAe,IAAAlH,OAjN8D,SAACrC,GAEtE,IAAAjC,EAYAiC,EAAK,UAXLY,EAWAZ,EAAK,aAVL6P,EAUA7P,EAAK,gBATL4N,EASA5N,EAAK,WARL6N,EAQA7N,EAAK,aAPL+I,EAOA/I,EAAK,oBANL0L,EAMA1L,EAAK,SALL8U,EAKA9U,EAAK,KAJL+U,EAIA/U,EAAK,gBAHLgV,EAGAhV,EAAK,iBAFLiV,EAEAjV,EAAK,wBADLuD,EACAvD,EAAK,gBAEH,GAAkC,IAAA+L,WAAS,GAA1CmJ,EAAY,KAAEC,EAAe,KAC9B,GAAoD,IAAApJ,WAAS,GAA5DqJ,EAAqB,KAAEC,EAAwB,KAChD,GAAqD,IAAAtJ,UAAS,CAChErP,UAAW,GACXC,SAAU,GACVW,QAAS,GACTV,SAAU,GACVC,SAAU,GACVQ,KAAM,GACNJ,gBAAiB,GACjBC,oBAAqB,GACrBK,mBAAmB,EACnBR,QAAS,GACTC,YAAa,GACbG,WAAY,GACZC,MAAO,GACPN,aAAc,KAdXwY,EAAqB,KAAEC,EAAwB,KAiBhDC,GAAgB,IAAA5S,cAAY,WAC1BmS,GACAA,GAER,GAAG,CAACA,KAEJ,IAAA1U,YAAU,WACN,GAAIO,EAAa,GAAI,CACV,IAAA+C,EAA4B/C,EAAa,GAAE,yBAE9C+C,IAA6BD,GAA6BC,IAC1D6R,GAER,CACJ,GAAG,CAAC5U,KAEJ,IAAAP,YAAU,WACwCiV,EAAsB5Y,YAAa,EAAA4N,EAAA,GAA2B1J,MACvFwU,IAA0BF,IAAiBD,KAC/BF,GAAmBC,KAGhDD,IACAC,IACAtJ,EAAS,CAACyH,uBAAuB,EAAM5P,gBAAiB+R,EAAuB3J,aAAc,KAErG,GAAG,CAACyJ,EAAuB1J,EAAU4J,EAAuBvM,EAAqBkM,EAAyBC,EAActU,IAExH,IA8Gc6U,EA9GRC,EAAwB3X,aAAS,EAATA,EAAWkF,KAAI,SAAAlG,GAAW,OAAE+P,KAAM/P,EAAQ+P,KAAMnS,KAAMoC,EAAQpC,KAApC,IAClDgb,EAAmBD,EAAwBA,EAAsBzS,KAAI,SAAAlG,GAAW,OAAAA,EAAQ+P,IAAR,IAAc8I,KAAK,MAAQ,GAS3GC,GAA8B,IAAAjT,cAAY,SAAOkT,GAA6B,uD,uFACzEC,EAC0DD,EAAQ,SADxDE,EACgDF,EAAQ,mBADpC,EAC4BA,EAAQ,MAD3B,IAAAhT,QAAAA,OAAO,IAAG,GAAE/F,QAAS,GAAIwM,MAAO,GAAI0M,MAAO,GAAIC,MAAO,GAAI7Y,KAAM,GAAI8Y,YAAa,IAAI,EAC7H,IAAAxb,KAAAA,OAAI,IAAG,KAAE,EAAE,IAAA+B,UAAAA,OAAS,IAAG,KAAE,EAAE,IAAAC,SAAAA,OAAQ,IAAG,KAAE,EAAE,IAAAS,MAAAA,OAAK,IAAG,KAAE,EAEtD2Y,GAZkB,SAACb,EAAqBc,EAA6B5Y,QAAlD,IAAA8X,IAAAA,GAAA,GACvB,IAAMkB,EAAgBtB,EAAKuB,WACrBC,GAAoB/S,aAAe,EAAfA,EAAiB7G,YAAawY,EAGxD,OAAOkB,GAAiBE,GAFUN,IAAuB5Y,CAG7D,CAOYmZ,CAAkBT,aAAQ,EAARA,EAAUZ,aAAcc,EAAoB5Y,IAC9DoY,IAGEgB,EAAQ7b,aAAI,EAAJA,EAAM8b,MAAM,KAGpB1Z,EAAU2Y,aAAqB,EAArBA,EAAuB5U,MAAK,SAAA/D,GAAW,OAAAA,EAAQ+P,OAAShK,EAAQ/F,OAAzB,IAAkCpC,KACnF4O,EAAQkL,GAAkB3R,EAAQ/F,QAAS+F,EAAQyG,OACnDmN,EAAgB,CAClBha,UAAWA,GAAa8Z,EAAM,GAC9B7Z,SAAUA,GAAY6Z,EAAM,GAC5BlZ,QAAS,GACTV,SAAUkG,EAAQmT,MAClBpZ,SAAUiG,EAAQoT,OAAS,GAC3B7Y,KAAMyF,EAAQzF,KACdJ,gBAAiBsM,EACjBrM,oBAAqBqM,EACrBhM,mBAAmB,EACnBR,QAASA,GAAW+F,EAAQ/F,QAC5BC,YAAa8F,EAAQ/F,QACrBI,WAAY2F,EAAQqT,YACpB/Y,MAAOA,GAAS,GAChBN,aAAc,IAGbgY,EAAKuB,YACNhB,GAAyB,SAAA/U,GAAW,OAACA,CAAD,IAGxCuP,EAAgB6G,GAChBnB,EAAyBmB,GAErBZ,EAASZ,eAAiBA,GAC1BC,GAAgB,SAAA7U,GAAW,OAACA,CAAD,KAG/BkV,I,YAGL,CAACE,EAAuB7F,IAErBnB,GAAqB,IAAA9L,cACvB,UACI,SAAC+L,GAA8C,gBAACpM,GAC5C,OAAAqL,GAAW,gCACJe,GACApM,GAFP,CAD2C,IAMnD,IAGEoU,EAAuB,SACzB5X,EACA6X,GACA,IAAMC,EAAkBC,SAASC,eAAehY,GAEhD,GAAI8X,EACA,OAAO,EAAAG,GAAA,GAAiBH,EAAiBD,EAIjD,EAEMK,GAAuB,IAAArU,cAAa,WACtC,IAAM6S,EAAc,8BACdyB,EAAYP,EAAqB,UAAGlB,EAAW,WAAW,CAAC,QAAS,mBAAoB,eAAgB,eACxG0B,EAAYR,EAAqB,UAAGlB,EAAW,WAAW,CAAC,UAC3D2B,EAAYT,EAAqB,UAAGlB,EAAW,WAAW,CAAC,UAEjE,OAAO0B,GAAaD,GAAaE,EAAY,CACzCC,UAAWF,EAAUG,MACrBC,UAAWL,EAAUI,MACrBE,qBAAsBN,EAAUI,MAChCG,eAAgBL,EAAUE,MAC1BI,gBAAiBR,EAAU,oBAC3BS,iBAAkBT,EAAU,cAC5BU,YAAaV,EAAU,sBACvBjb,CACR,GAAG,IAEOsG,EAAqC,CACvCsV,UAAW,CACPC,UAAW,oBACXC,iBAAkBlC,EAClBmC,mBAAoBrC,EACpBsC,UAAWhB,EACXpC,eAAgBJ,GAChByD,UAAW,YACX7R,SAAU,SA6BlB,OACI,gCACI,gBAAC,GAA4B,CACzBwH,aAAeA,EACfD,WAAac,EAAmBnM,GAChC8D,SAAS,eA7BXoP,EAAc,8BAGhB,uBACI/W,UAAU,+BACVK,GAAK,UAAG0W,EAAW,WACnB0C,YAAY,QAEZ,uBACIzZ,UAAU,qBAEV,uBACIA,UAAU,+BACVK,GAAK,UAAG0W,EAAW,cAG3B,uBACI/W,UAAU,+BACVK,GAAK,UAAG0W,EAAW,eAgB3C,IC5KA,gC,qDAKI,EAAAlM,MAAiC,CAC7BiI,wBAAwB,GA2DpB,EAAAzI,oBAAqC,WACnC,MAAuC,EAAK/I,MAA1C/B,EAAS,YAAE2C,EAAY,eAAE6Q,EAAO,UAEhCD,EAA2B,EAAKjI,MAAK,uBAE7C,QAAKkI,IAIExT,GAAauT,KAA2B,EAAAlH,EAAA,GAA2B1J,GAC9E,EAEQ,EAAAoR,oBAAkD,SAAOlP,GAAO,kD,mFAC9D,EAAgEsC,KAAKpF,MAAnEiS,EAAa,gBAAE,IAAA9H,iBAAAA,OAAgB,IAAG,IAAAnD,KAAI,EAAE1K,EAAM,SAAE4V,EAAS,Y,iBAG7D,O,sBAAA,GAAMD,EAAcnP,I,cAApB,SAEAoP,GAAU,gCACH5V,GAAM,CACTiH,iBAAiB,EAAA4O,GAAA,GACb/M,KAAK1H,UAAUoF,EAAQ9F,aACvB8F,M,+BAIRqH,EAAiB,G,gCAS7B,QApGiC,oBAS7B,YAAAhE,OAAA,WACU,MAgBFf,KAAKpF,MAfL6I,EAAc,iBACd3I,EAAoB,uBACpBjC,EAAS,YACTF,EAAS,YACTgX,EAAe,kBACfxR,EAAe,kBACf3C,EAAY,eACZkI,EAAuB,0BACvB8E,EAAU,aACV6D,EAAO,UACP5D,EAAY,eACZnC,EAAQ,WACRsJ,EAAgB,mBAChBF,EAAI,OACJG,EAAuB,0BAGnBzD,EAA2BpM,KAAKmE,MAAK,uBAE7C,OACI,gBAACnL,EAAA,EAAI,CAACC,aAAa,MACf,gBAAC2K,GAAA,EAAQ,KACL,gBAAC,GAAqB,CAClBpI,aAAcA,EACd7C,UAAWA,EACX8P,aAAcA,EACdD,WAAYA,EACZqH,wBAAyBA,EACzBD,iBAAkBA,EAClBD,gBAAiBA,EACjBlF,gBAAiBzK,KAAK4M,oBACtBtG,SAAUA,EACVnI,gBAAiBA,EACjBwF,oBAAqB3D,KAAK2D,sBAC1B+L,KAAMA,IAEV,uBAAKpW,UAAU,aACX,gBAAC,GAA0B,QAInC,gBAAC,GAAkB,CACfmK,eAAgBA,EAChB3I,qBAAsBA,EACtBjC,UAAWA,GAAauT,EACxB1N,qBAAqB,EACrBiF,oBAAqB3D,KAAK2D,sBAC1BD,wBAAyBA,EACzB9C,0BAA2ByL,IAI3C,EAgCQ,YAAA/T,UAAR,SAAkBV,GAGd,OAAOU,EAFe0H,KAAKpF,MAAK,WAEfhD,EACrB,EAhGO,EAAAkW,YAAc7B,GAAA,GAiGzB,C,CApGA,CAAiC,EAAAvK,eAsGjC,UAAe,EAAA3K,EAAA,GACX0D,EAA0F,CACtFxD,aAAc,SAACC,EAAQ,IACnBoP,EADsC,kBAC7BpP,EACb,EACAE,iBAAkB,SAAC,G,IACIkB,EAAS,YACT6F,EAAe,kBAGb,OACrB4P,sBAH0C,0BAI1CxH,aAHkC,kBAIlCpI,iBAAiB,EAAA4O,GAAA,GACbzU,EAAU6F,GAAmBA,EAAgBvG,aAC7CuG,GALiB,EAQzB6P,eAAgB,SAAC,G,IAAE7P,EAAe,kBAAE7F,EAAS,YAAED,EAAQ,WACnD,QAAE8F,IACF,EAAA5F,EAAA,GAAqC,CACjCF,SAAQ,EACRG,WAAYF,EAAU6F,EAAgBvG,eACvCqW,YAAY9P,EAJf,EAKJ/F,iBAAkB,SAAC,G,IACIC,EAAQ,WACRC,EAAS,YAG5B,OAF2B,YAGrB,QAAO,CACL6F,iBAAiB,SAAiC,SAACkQ,GAC/C,SAAAC,GAAA,GAAoC,CAChC5Y,WAAW,OAAyB2C,GACpCG,WAAYF,EAAU+V,GAAcA,EAAWzW,cAFnD,OAMN,QAAO,CACLuG,iBAAiB,SAAiC,SAACkQ,GAC/C,SAAA9V,EAAA,GAAqC,CACjCF,SAAQ,EACRG,WAAYF,EAAU+V,GAAcA,EAAWzW,cAFnD,KAXZ,EAiBJ4O,oBAAoB,GA7CxB/L,CA8CGuY,KC1GP,SArEA,YACI,WAAYpY,GACR,QAAK,UAACA,IAAM,K,OA0DR,EAAAqY,qBAAmC,WACvC,EAAK3O,SAAS,CAAEqL,iBAAiB,GACrC,EAEQ,EAAAuD,iBAA+B,WACnC,EAAK5O,SAAS,CAAEsL,kBAAkB,GACtC,EA9DI,EAAKzL,MAAQ,CACTwL,iBAAiB,EACjBC,kBAAkB,G,CAE1B,CA2DJ,OAnE6B,oBAUzB,YAAA7O,OAAA,WACI,IAAM,EAeFf,KAAKpF,MAdL6T,EAAuB,0BACvBC,EAAO,UACPS,EAAuB,0BAEvBtC,GADQ,WACK,iBACbrE,EAAU,aACVC,EAAY,eACZ/J,EAAmB,sBACnBgR,EAAI,OACJpJ,EAAQ,WACR4I,EAAqB,wBACrBrW,EAAS,YACTgX,EAAuB,0BACpBsD,GAAiB,cAdlB,8NAiBA,EAGFnT,KAAKmE,MAFLwL,EAAe,kBACfC,EAAgB,mBAGpB,OAAO,gCACH,gBAACwD,EAAAha,EAAmB,CAACP,UAAW+W,GAAoBD,IACpD,uBAAKrW,UAAU,gBAAgBuP,MAAO,CAACwK,QAASzD,GAAoBD,EAAkB,YAAS9Y,IAC3F,gBAAC,GAAc,CACX6X,QAASA,EACThQ,oBAAqBA,EACrBwQ,sBAAuBA,EACvBC,wBAAyBA,IAE7B,gBAAC,IAAkB,iBACXgE,EAAiB,CACrB1K,aAAcA,EACdD,WAAYA,EACZiG,wBAAyBA,EACzB5V,UAAWA,EACX6F,oBAAqBA,EACrBmR,wBAAyBA,EACzBD,iBAAkB5P,KAAKkT,iBACvBvD,gBAAiB3P,KAAKiT,qBACtB3M,SAAUA,EACVoJ,KAAMA,EACN7C,cAAeA,MAI/B,EASJ,EAnEA,CAA6B,EAAApB,WCgD7B,mBACI,WAAY7Q,GACR,QAAK,UAACA,IAAM,K,OAoGR,EAAA0Y,8BAA4C,6D,0FAC1C,EAMFtT,KAAKpF,MALLY,EAAY,eACZkD,EAAmB,sBACnB,IAAA6U,sBAAAA,OAAqB,IAAG,IAAA3R,KAAI,EAC5B,IAAAmD,iBAAAA,OAAgB,IAAG,IAAAnD,KAAI,EACvB4R,EAAqB,0BAGrB9U,GAAuBlD,EAAamE,OAAS,GAA7C,YACAK,KAAKsE,SAAS,CAAEmP,gBAAgB,I,iBAI5B,O,uBAAA,GAAMD,EAAsBhY,EAAa,GAAG2C,kB,cAA5C,S,+BAEA4G,EAAiB,G,oBAEjB/E,KAAKsE,SAAS,CAAEmP,gBAAgB,I,kBAIxCF,I,YAGI,EAAAG,2BAAyE,yDAAO,G,gCACpF3F,EAAqB,wBACJ4F,EAAa,kBAC9BpN,EAAY,e,iEAEN,EAUFvG,KAAKpF,MATL4T,EAAe,kBACfoF,EAAc,iBACdJ,EAAqB,wBACrBK,EAAoB,uBACpBC,EAAgB,mBAChB/O,EAAgB,mBAChB5G,EAAe,kBACf4V,EAAc,iBACd9S,EAAQ,WAGNyM,EAAyBiG,IAAiB,EAAAhP,EAAA,GAAyBgP,GACnEK,EAA8C,GAC9CC,EAAmBjU,KAAKiU,iBAAiBhT,IAE1C,EAAAsE,EAAA,GAAemI,EAAwBvP,KAAoBA,aAAe,EAAfA,EAAiBhG,sBAAsBuV,aAAsB,EAAtBA,EAAwBvV,oBAC3H6b,EAASE,KAAKV,EAAsB9F,GAA0B,CAAC,IAI/DK,GACAL,KACC,EAAAnI,EAAA,GAAemI,EAAwBqG,KACvCE,GAEDD,EAASE,KAAKL,EAAqBnG,IAGnCc,IAAoBjI,GACpByN,EAASE,KAAKN,EAAe,CAAEpF,gBAAiBjI,K,iBAIhD,O,sBAAA,GAAMgG,QAAQ4H,IAAIH,I,cAAlB,SAEAF,EAAiB/F,G,0CAEI/J,OACjBe,EAAiB,G,+BAKrB,EAAAkP,iBAAmD,SAAChT,GAGxD,MAF6B,CAAC,aAEFwM,MAAK,SAACxO,GAAW,OAAAA,IAAWgC,CAAX,GACjD,EAEQ,EAAA1D,oBAAkE,SACtEG,EACAjC,GAAM,kD,6EAEA,EAAqCuE,KAAKpF,MAAxCwZ,EAAY,eAAErP,EAAgB,mB,iBAGlC,O,sBAAA,GAAMqP,EAAa,CACf1W,QAAO,EACPzB,UAAW,CACP,CACIW,SAAU,EACVnB,OAAM,O,cALlB,SAUA4Y,SAAS9a,KAAO,yD,0CAEK,GACjBwL,EAAiB,IAAI,EAAkB,I,+BAK3C,EAAAuP,0BAAuE,yDAAO,G,gBAClF/N,EAAY,e,iEAEN,EAA0EvG,KAAKpF,MAA7E4T,EAAe,kBAAEoF,EAAc,iBAAEE,EAAgB,mBAAE/O,EAAgB,mB,8CAGnEyJ,IAAoBjI,EAApB,MACA,GAAMqN,EAAe,CAAEpF,gBAAiBjI,K,OAAxC,S,wBAGJuN,GAAiB,G,0CAEI9P,OACjBe,EAAiB,G,+BAxNzB,EAAKZ,MAAQ,CACTsP,gBAAgB,G,CAExB,CAyNJ,OAhOuB,oBASb,YAAAlT,kBAAN,W,4IACU,EAMFP,KAAKpF,MALL2Z,EAAyB,4BACzBC,EAAwB,2BACxBC,EAAmB,sBACnB,IAAAC,QAAAA,OAAO,IAAG,IAAA9S,KAAI,EACd,IAAAmD,iBAAAA,OAAgB,IAAG,IAAAnD,KAAI,E,iBAIvB,O,uBAAA,GAAM2K,QAAQ4H,IAAI,CAACI,IAA6BE,IAAuBD,O,cAAvE,SAEAE,I,+BAEA3P,EAAiB,G,oBAEjB/E,KAAKsE,SAAS,CAAEmP,gBAAgB,I,6BAIxC,YAAA1S,OAAA,WACI,IAAM,EAeFf,KAAKpF,MAdL6T,EAAuB,0BACvBC,EAAO,UACPS,EAAuB,0BACvBL,EAA2B,8BAC3B7L,EAAQ,WACRuQ,EAAqB,wBACrBmB,EAAwB,2BACxBC,EAA0B,6BAC1BlW,EAAmB,sBACnBgR,EAAI,OACJ3W,EAAsB,yBACtB8b,EAAsB,yBACtBC,EAAwB,2BACrB3B,GAAiB,cAdlB,oSAkBFM,EACAzT,KAAKmE,MAAK,eAEd,OAAI0Q,IAA2B5R,EAAS8R,OAAS/U,KAAKpF,MAAMjC,UAAUgH,OAAS,EACpE,gBAAC,IAAc,iBACbwT,EAAiB,CACtBlQ,SAAWA,EACXwF,aAAcmM,EACdpM,WAAYmM,EACZlG,wBAAyBA,EACzBC,QAAUA,EACV5T,sBAAsBga,IAA4BrB,EAClD5a,UAAY4a,EACZ/U,oBAAqBA,EACrBmR,wBAA0B7P,KAAKpF,MAAM/B,UACrCqW,sBAAwBlP,KAAKsT,8BAC7BhN,SAAUtG,KAAK0T,2BACfvE,wBAA0BA,EAC1BO,KAAMA,EACN7C,cAAe2G,KAKnB,gBAACJ,EAAAha,EAAmB,CAACP,UAAW4a,EAAgBuB,mBAAoBF,GAChE,uBAAKxb,UAAU,iBACX,gBAAC,GAAc,CACXoV,QAASA,EACThQ,oBAAqBA,EACrBwQ,sBAAuBlP,KAAKsT,8BAC5BnE,wBAAyBA,IAE7B,gBAAC,IAAY,iBACLgE,EAAiB,CACrB/V,UAAW6F,EAAS7F,UACpBqL,aAAcmM,EACdpM,WAAYmM,EACZlG,wBAAyBA,EACzB1V,uBAAwBA,EACxB2V,QAASA,EACT5T,sBAAsBga,IAA4BrB,EAClD/U,oBAAqBA,EACrBoQ,4BAA6BA,EAC7BH,sBAAuB3O,KAAKsU,0BAC5B1F,uBAAwB5O,KAAK0T,2BAC7BpW,gBAAiB0C,KAAKzC,oBACtBlE,uBAAwBqV,EACxB7B,cAAe2G,MAKnC,EA4HJ,EAhOA,CAAuB,EAAA/H,WAkOjBwJ,IAA6B,SAC/B,SAAC,GAAqE,OAA/B,mCAA+B,IACtE,SAAC,GAAsD,OAA/B,qBAAoC/U,iBAAL,IACvD,SAACgV,EAAmB1Z,GAAiB,yE,iEACjC,OAAKA,GAAiBA,EAAamE,OAIhB,GAAM4M,QAAQ4H,IAAI3Y,EAAaqC,KAAI,SAAC,G,IAAElE,EAAE,KAAO,OAAAub,EAAkBvb,EAAlB,MAH9D,I,OAKJ,MAAO,CAAP,EAFmB,SAAsE,QAE7Ewb,sB,OAPqB,IAYlC,SAASC,GAAmB,G,MAC/BzS,EAAe,kBACfC,EAAa,gBAGT,EAsBAA,EAAa,KArBTC,EAAO,UACPG,EAAW,cACXF,EAAS,YACTC,EAAW,cACX7C,EAAe,kBACfiV,EAAkB,qBAClBE,EAAiB,oBACjBC,EAAwB,2BACxBvO,EAAoB,uBAExB,EAWAnE,EAAa,SAVTyG,EAAqB,wBACrB/G,EAAyB,4BACzBD,EAAwB,2BACxBE,EAAqB,wBACrBC,EAAsB,yBACtB+S,EAAyB,4BACzBC,EAA0B,6BAC1BC,EAAwB,2BACxBC,EAAkB,qBAIpB3f,EAAWiN,IACXhN,EAAS8M,IACTtH,EAAe0E,KAAqB,GACpC+C,EAAWF,IACXhH,EAAO8G,IAEb,KAAK9M,GAAaC,GAAWiN,GAAalH,GACtC,OAAO,KAIP,MAMA/F,EAAM,iBALF2f,EAAmB,sBACnBC,EAAQ,WACRC,EAAuB,0BACvBpd,EAAgB,mBAIlBwI,EAAWnL,EAAoBC,EAAUC,GACzC8f,GAAsB,EAAA9P,EAAA,GAAuBjK,GAC7ClD,EACFwJ,KACAC,KACAC,KACAC,KACAiT,KACAC,KACAH,IACEpG,EACF0G,IAA4B5U,GAAY6U,EAAsB,EAC5DhH,GACF,EAAAiH,EAAA,GACI/f,EAAOQ,iBACP,kDAIF2H,GACDgR,GAA2B3T,EAAamE,OAAS,OAAI9I,EAAYse,IAEhE7e,GAA6B,EAAAC,EAAA,GAC/BP,EAAOQ,iBAAiBF,4BAG5B,MAAO,CACHwO,WAAYnC,EAAgBqT,qBAC5BjC,eAAgBsB,IAChBtZ,KAAI,EACJP,aAAY,EACZ7C,UAAWoO,KAA0B,IACrCrO,0BAf8B,CAAC,KAAM,KAAM,KAAM,KAAM,MAgBvDuK,SAAQ,EACRuL,gBAAiBzY,EAASyY,gBAC1B/J,sBAAuB9B,EAAgB8B,sBACvCmQ,2BAA4BjS,EAAgBsT,qBAC5CjJ,mBAAoBiI,GAA2B,CAAEtS,gBAAe,EAAEC,cAAa,IAC/EtK,UAAWgd,EACX7c,iBAAgB,EAChBkc,yBAA0BhS,EAAgB2G,mBAC1CoF,QAASzL,EAASyL,QAClB+E,eAAgB+B,KAAgCnT,IAChDxJ,UAAS,EACTwQ,sBAAuBA,IACvBkL,0BAA2B5R,EAAgB4R,0BAC3CC,yBAA0B7R,EAAgB6R,yBAC1CC,oBAAqB9R,EAAgB8R,oBACrCxT,SAAQ,EACR3K,2BAA0B,EAC1B6H,gBAAe,EACf2W,yBAAiF,QAAvD,EAAAc,EAAS,sDAA8C,SACjFzG,wBAAuB,EACvBL,4BAA2B,EAC3BpL,wBAAyBiS,EACzB9G,QAASlM,EAAgBuT,gBACzB9B,aAAczR,EAAgBwT,uBAC9BtC,qBAAsBlR,EAAgBkR,qBACtCD,eAAgBjR,EAAgBiR,eAChCJ,sBAAuB7Q,EAAgB6Q,sBACvCza,wBAAwB,EAAAA,EAAA,GAAuB/C,EAAOQ,kBACtDqe,uBAAwBve,IAA+BJ,EAAA,EAAgBkgB,YAAa,EAAAC,EAAA,GAAmCta,GAE/H,CAEA,UAAe,EAAA2G,EAAA,GAAa0S,GAA5B,CAAgD/W,G,0DCrbpCiY,EAMAC,E,yCAMZ,SAASC,EACL5b,GAEQ,IAAAtB,EAAqDsB,EAAK,UAA/C6b,EAA0C7b,EAAK,YAAlC/B,EAA6B+B,EAAK,UAAvBmO,EAAkBnO,EAAK,KAAjBb,EAAYa,EAAK,QAElE,OAAO,IACH,SACAtB,EACA,CAAE,kBAAmBS,IAAYuc,EAActc,SAC/C,CAAE,mBAAoBD,IAAYuc,EAAcxO,WAChD,CAAE,iBAAkB/N,IAAYuc,EAAcI,QAC9C,CAAE,gBAAiB3N,IAASwN,EAAWI,OACvC,CAAE,eAAgB5N,IAASwN,EAAWvN,MACtC,CAAE,gBAAiBD,IAASwN,EAAWK,OACvC,CAAE,eAAgBH,GAClB,CACI,kCACI1c,IAAYuc,EAActc,SAAWD,IAAYuc,EAAcI,QAEvE,CAAE,oCAAqC3c,IAAYuc,EAAcxO,WACjE,CAAE,aAAcjP,GAExB,EAlCA,SAAYyd,GACR,oBACA,wBACA,iBACH,CAJD,CAAYA,IAAAA,EAAa,KAMzB,SAAYC,GACR,gBACA,cACA,eACH,CAJD,CAAYA,IAAAA,EAAU,KAqDtB,QAvB+C,SAAC,GAC5C,IAAAM,EAAQ,WACRvd,EAAS,YACTO,EAAQ,WACR4c,EAAW,cACX5d,EAAS,YACTkQ,EAAI,OACJV,EAAM,SACNvO,EAAI,OACJC,EAAO,UACJ+c,GAAI,cAVqC,gGAW1C,OACF,2CACQA,EAAI,CACRxd,UAAWkd,EAAa,CAAEld,UAAS,EAAEmd,YAAW,EAAE5d,UAAS,EAAEkQ,KAAI,EAAEhP,QAAO,IAAG,YAClEsO,EACXxO,SAAUA,GAAYhB,EACtBiB,KAAMA,GAAQ,WAEb+c,E","sources":["webpack://checkout/./packages/core/src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./packages/core/src/app/shipping/getShippingMethodId.ts","webpack://checkout/./packages/core/src/app/address/AddressFormModal.tsx","webpack://checkout/./packages/core/src/app/common/form/withFormikExtended.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./packages/core/src/app/shipping/findConsignment.ts","webpack://checkout/./packages/core/src/app/shipping/getShippableLineItems.ts","webpack://checkout/./packages/core/src/app/shipping/ItemAddressSelect.tsx","webpack://checkout/./packages/core/src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/updateShippableItems.ts","webpack://checkout/./packages/core/src/app/shipping/ConsignmentAddressSelector.tsx","webpack://checkout/./packages/core/src/app/shipping/ConsignmentListItem.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingFormV2Footer.tsx","webpack://checkout/./packages/core/src/app/shipping/NewConsignment.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingFormV2.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingGuestForm.tsx","webpack://checkout/./packages/core/src/app/shipping/BillingSameAsShippingField.tsx","webpack://checkout/./packages/core/src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./packages/core/src/app/shipping/AmazonPayShippingAddress.tsx","webpack://checkout/./packages/paypal-fastlane-integration/src/PayPalFastlaneShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/PayPalFastlaneShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./packages/core/src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingHeader.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddressDisplay.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeStateMapper.ts","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShipping.tsx","webpack://checkout/./packages/core/src/app/shipping/Shipping.tsx","webpack://checkout/./packages/ui/src/button/Button.tsx"],"sourcesContent":["import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class UnassignItemError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'UNASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.unassign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, UnassignItemError.prototype);\n    }\n}\n","import { Checkout, StoreConfig } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\nimport getProviderWithCustomCheckout from '../payment/getProviderWithCustomCheckout';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nexport default function getShippingMethodId(checkout: Checkout, config: StoreConfig): string | undefined {\n    const SHIPPING_METHOD_IDS: string[] = [\n        PaymentMethodId.AmazonPay,\n        PaymentMethodId.BraintreeAcceleratedCheckout,\n        PaymentMethodId.PayPalCommerceAcceleratedCheckout,\n    ];\n    const providerWithCustomCheckout = getProviderWithCustomCheckout(\n        config.checkoutSettings?.providerWithCustomCheckout,\n    );\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    if (preselectedPayment && SHIPPING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1) {\n        return preselectedPayment.providerId;\n    }\n\n    return providerWithCustomCheckout && SHIPPING_METHOD_IDS.indexOf(providerWithCustomCheckout) > -1\n        ? providerWithCustomCheckout\n        : undefined;\n}\n","import { Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { FunctionComponent } from 'react';\nimport { lazy } from 'yup';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport AddressForm from './AddressForm';\nimport getAddressFormFieldsValidationSchema from './getAddressFormFieldsValidationSchema';\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport interface AddressFormModalProps extends AddressFormProps {\n    isOpen: boolean;\n    onAfterOpen?(): void;\n}\n\nexport interface AddressFormProps {\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    shouldShowSaveAddress?: boolean;\n    defaultCountryCode?: string;\n    isFloatingLabelEnabled?: boolean;\n    getFields(countryCode?: string): FormField[];\n    onSaveAddress(address: AddressFormValues): void;\n    onRequestClose?(): void;\n}\n\nconst SaveAddress: FunctionComponent<\n    AddressFormProps & WithLanguageProps & FormikProps<AddressFormValues>\n> = ({\n    googleMapsApiKey,\n    getFields,\n    countriesWithAutocomplete,\n    countries,\n    values,\n    setFieldValue,\n    isLoading,\n    onRequestClose,\n    isFloatingLabelEnabled,\n}) => (\n    <Form autoComplete=\"on\">\n        <LoadingOverlay isLoading={isLoading}>\n            <AddressForm\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                countryCode={values.countryCode}\n                formFields={getFields(values.countryCode)}\n                googleMapsApiKey={googleMapsApiKey}\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\n                setFieldValue={setFieldValue}\n                shouldShowSaveAddress={false}\n            />\n            <div className=\"form-actions\">\n                <a\n                    className=\"button optimizedCheckout-buttonSecondary\"\n                    href=\"#\"\n                    onClick={preventDefault(onRequestClose)}\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </a>\n\n                <Button\n                    disabled={isLoading}\n                    id=\"checkout-save-address\"\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"address.save_address_action\" />\n                </Button>\n            </div>\n        </LoadingOverlay>\n    </Form>\n);\n\nconst SaveAddressForm = withLanguage(\n    withFormik<AddressFormProps & WithLanguageProps, AddressFormValues>({\n        handleSubmit: (values, { props: { onSaveAddress } }) => {\n            onSaveAddress(values);\n        },\n        mapPropsToValues: ({ defaultCountryCode = '' }) => ({\n            firstName: '',\n            lastName: '',\n            address1: '',\n            address2: '',\n            customFields: {},\n            country: '',\n            countryCode: defaultCountryCode,\n            stateOrProvince: '',\n            stateOrProvinceCode: '',\n            postalCode: '',\n            phone: '',\n            city: '',\n            company: '',\n            shouldSaveAddress: false,\n        }),\n        validationSchema: ({ language, getFields }: AddressFormProps & WithLanguageProps) =>\n            lazy<Partial<AddressFormValues>>((values) =>\n                getAddressFormFieldsValidationSchema({\n                    language,\n                    formFields: getFields(values && values.countryCode),\n                }),\n            ),\n    })(SaveAddress),\n);\n\nconst AddressFormModal: FunctionComponent<AddressFormModalProps> = ({\n    isOpen,\n    onAfterOpen,\n    onRequestClose,\n    ...addressFormProps\n}) => (\n    <Modal\n        additionalModalClassName=\"modal--medium\"\n        header={\n            <ModalHeader>\n                <TranslatedString id=\"address.add_address_heading\" />\n            </ModalHeader>\n        }\n        isOpen={isOpen}\n        onAfterOpen={onAfterOpen}\n        onRequestClose={onRequestClose}\n        shouldShowCloseButton={true}\n    >\n        <SaveAddressForm {...addressFormProps} onRequestClose={onRequestClose} />\n    </Modal>\n);\n\nexport default AddressFormModal;\n","import { FormikProps, FormikValues, withFormik, WithFormikConfig } from 'formik';\nimport React, { ComponentType, useEffect, useRef } from 'react';\n\nexport interface WithFormikExtendedProps {\n    isInitialValueLoaded?: boolean;\n}\n\n/**\n * This HOC extends the behavior of the default `withFormik` HOC. It can reset a form to its initial state when\n * the `isInitialValueLoaded` prop is set to true. This is useful when a form needs to be rendered before its\n * initial value is fully loaded.\n */\nexport default function withFormikExtended<TOuterProps, TValues extends FormikValues, TPayload = TValues>(\n    config: WithFormikConfig<TOuterProps, TValues, TPayload>\n) {\n    return (OriginalComponent: ComponentType<TOuterProps & FormikProps<TValues>>) => {\n        const DecoratedComponent: ComponentType<TOuterProps & FormikProps<TValues> & WithFormikExtendedProps> = (props) => {\n            const { resetForm, isInitialValueLoaded } = props;\n            const previousIsInitialValueLoadedRef = useRef(isInitialValueLoaded);\n\n            useEffect(() => {\n                if (\n                    previousIsInitialValueLoadedRef.current === false && \n                    isInitialValueLoaded === true\n                ) {\n                    resetForm();\n                }\n\n                previousIsInitialValueLoadedRef.current = isInitialValueLoaded;\n            }, [isInitialValueLoaded]);\n\n            return <OriginalComponent {...props} />;\n        };\n\n        DecoratedComponent.displayName = `WithFormikExtended(${\n            OriginalComponent.displayName || OriginalComponent.name\n        })`;\n\n        return withFormik(config)(DecoratedComponent);\n    };\n}\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class AssignItemInvalidAddressError extends CustomError {\n    constructor(data?: Error) {\n        super({\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\n            title: getLanguageService().translate(\n                'shipping.assign_item_invalid_address_error_heading',\n            ),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\n    }\n}\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class AssignItemFailedError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'ASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.assign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemFailedError.prototype);\n    }\n}\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { find, includes } from 'lodash';\n\nexport default function findConsignment(\n    consignments: Consignment[],\n    itemId: string,\n): Consignment | undefined {\n    return find(consignments, (consignment) => includes(consignment.lineItemIds, itemId));\n}\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport { isNil, reduce } from 'lodash';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport default function getShippableLineItems(\n    cart: Cart,\n    consignments: Consignment[],\n): ShippableItem[] {\n    return reduce(\n        (cart && cart.lineItems.physicalItems) || [],\n        (result, item, i) =>\n            !item.addedByPromotion && isNil(item.parentId)\n                ? result.concat(...splitItem(item, consignments, i))\n                : result,\n        [] as ShippableItem[],\n    );\n}\n\nfunction splitItem(\n    item: PhysicalItem,\n    consignments: Consignment[],\n    lineItemIndex: number,\n): ShippableItem[] {\n    let splitItems: ShippableItem[] = [];\n    const consignment = findConsignment(consignments, item.id as string);\n\n    for (let i = 0; i < item.quantity; i++) {\n        splitItems = splitItems.concat({\n            ...item,\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\n            consignment,\n            quantity: 1,\n        });\n    }\n\n    return splitItems;\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { AddressSelect, AddressType } from '../address';\n\nimport ShippableItem from './ShippableItem';\n\nexport interface ItemAddressSelectProps {\n    item: ShippableItem;\n    addresses: CustomerAddress[];\n    onSelectAddress(address: Address, itemId: string, itemKey: string): void;\n    onUseNewAddress(itemId: string, itemKey: string): void;\n}\n\nconst ItemAddressSelect: FunctionComponent<ItemAddressSelectProps> = ({\n    item: { id, key, imageUrl, quantity, name, options, consignment },\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n}) => {\n    const handleUseNewAddress = useCallback(\n        () => {\n            onUseNewAddress(id as string, key);\n        },\n        [id, onUseNewAddress, key],\n    );\n\n    const handleSelectAddress = useCallback(\n        (address: Address) => {\n            onSelectAddress(address, id as string, key);\n        },\n        [id, key, onSelectAddress],\n    );\n\n    return (\n        <div className=\"consignment\">\n            <figure className=\"consignment-product-figure\">\n                {imageUrl && <img alt={name} src={imageUrl} />}\n            </figure>\n\n            <div className=\"consignment-product-body\">\n                <h4 className=\"optimizedCheckout-contentPrimary\">{`${quantity} x ${name}`}</h4>\n\n                {(options || []).map(({ name: optionName, value, nameId }) => (\n                    <ul\n                        className=\"product-options optimizedCheckout-contentSecondary\"\n                        data-test=\"consigment-item-product-options\"\n                        key={nameId}\n                    >\n                        <li className=\"product-option\">{`${optionName} ${value}`}</li>\n                    </ul>\n                ))}\n\n                <AddressSelect\n                    addresses={addresses}\n                    onSelectAddress={handleSelectAddress}\n                    onUseNewAddress={handleUseNewAddress}\n                    selectedAddress={consignment && consignment.shippingAddress}\n                    type={AddressType.Shipping}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default memo(ItemAddressSelect);\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\n\nexport default function getRecommendedShippingOption(\n    availableShippingOptions: ShippingOption[],\n): ShippingOption | undefined {\n    if (!availableShippingOptions) {\n        return;\n    }\n\n    return availableShippingOptions.find(\n        ({ isRecommended }: { isRecommended: any }) => isRecommended,\n    );\n}\n","import { ExtensionRegion, ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\n\nimport { EMPTY_ARRAY } from '../../common/utility';\nimport { Checklist, ChecklistItem } from '../../ui/form';\nimport { LoadingOverlay } from '../../ui/loading';\n\nimport StaticShippingOption from './StaticShippingOption';\n\ninterface ShippingOptionListItemProps {\n    consignmentId: string;\n    isMultiShippingMode: boolean;\n    selectedShippingOptionId?: string;\n    shippingOption: ShippingOption;\n}\n\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\n    consignmentId,\n    isMultiShippingMode,\n    selectedShippingOptionId,\n    shippingOption,\n}) => {\n    const isSelected = selectedShippingOptionId === shippingOption.id;\n\n    const renderLabel = useCallback(\n        () => (\n            <div className=\"shippingOptionLabel\">\n                <StaticShippingOption displayAdditionalInformation={true} method={shippingOption} />\n                {(isSelected && !isMultiShippingMode) && (\n                    <Extension region={ExtensionRegion.ShippingSelectedShippingMethod} />\n                )}\n            </div>\n        ),\n        [isSelected, isMultiShippingMode, shippingOption],\n    );\n\n\n    return (\n        <ChecklistItem\n            htmlId={`shippingOptionRadio-${consignmentId}-${shippingOption.id}`}\n            label={renderLabel}\n            value={shippingOption.id}\n        />\n    );\n};\n\nexport interface ShippingOptionListProps {\n    consignmentId: string;\n    inputName: string;\n    isLoading: boolean;\n    isMultiShippingMode: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions?: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\n    consignmentId,\n    inputName,\n    isLoading,\n    isMultiShippingMode,\n    shippingOptions = EMPTY_ARRAY,\n    selectedShippingOptionId,\n    onSelectedOption,\n}) => {\n    const handleSelect = useCallback(\n        (value: string) => {\n            onSelectedOption(consignmentId, value);\n        },\n        [consignmentId, onSelectedOption],\n    );\n\n    if (!shippingOptions.length) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay isLoading={isLoading}>\n            <Checklist\n                aria-live=\"polite\"\n                defaultSelectedItemId={selectedShippingOptionId}\n                name={inputName}\n                onSelect={handleSelect}\n            >\n                {shippingOptions.map((shippingOption) => (\n                    <ShippingOptionListItem\n                        consignmentId={consignmentId}\n                        isMultiShippingMode={isMultiShippingMode}\n                        key={shippingOption.id}\n                        selectedShippingOptionId={selectedShippingOptionId}\n                        shippingOption={shippingOption}\n                    />\n                ))}\n            </Checklist>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ShippingOptionsList);\n","import { CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { AnalyticsContextProps } from '@bigcommerce/checkout/analytics';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { AddressType, StaticAddress } from '../../address';\nimport { withAnalytics } from '../../analytics';\nimport { withFormikExtended } from '../../common/form';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\n\nimport { ShippingOptionsProps, WithCheckoutShippingOptionsProps } from './ShippingOptions';\nimport './ShippingOptionsForm.scss';\nimport ShippingOptionsList from './ShippingOptionsList';\n\nexport type ShippingOptionsFormProps = ShippingOptionsProps & WithCheckoutShippingOptionsProps & AnalyticsContextProps;\n\nclass ShippingOptionsForm extends PureComponent<\n    ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>\n> {\n    private unsubscribe?: () => void;\n\n    componentDidMount(): void {\n        const { subscribeToConsignments } = this.props;\n\n        this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOptions);\n    }\n\n    componentDidUpdate(): void {\n        const {\n            analyticsTracker,\n            consignments,\n            shouldShowShippingOptions\n        } = this.props;\n\n        if (consignments?.length && shouldShowShippingOptions) {\n            analyticsTracker.showShippingMethods();\n        }\n    }\n\n    componentWillUnmount(): void {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n            this.unsubscribe = undefined;\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            consignments,\n            isMultiShippingMode,\n            selectShippingOption,\n            isLoading,\n            shouldShowShippingOptions,\n            invalidShippingMessage,\n            methodId\n        } = this.props;\n\n        if (!consignments?.length || !shouldShowShippingOptions) {\n            return (\n                <ChecklistSkeleton\n                    additionalClassName=\"shippingOptions-skeleton\"\n                    isLoading={isLoading()}\n                    rows={2}\n                >\n                    {this.renderNoShippingOptions(\n                        <TranslatedString\n                            id={\n                                methodId || isMultiShippingMode\n                                    ? 'shipping.select_shipping_address_text'\n                                    : 'shipping.enter_shipping_address_text'\n                            }\n                        />,\n                    )}\n                </ChecklistSkeleton>\n            );\n        }\n\n        return (\n            <>\n                {consignments.map((consignment) => (\n                    <div className=\"shippingOptions-container form-fieldset\" key={consignment.id}>\n                        {isMultiShippingMode && this.renderConsignment(consignment)}\n\n                        <ShippingOptionsList\n                            consignmentId={consignment.id}\n                            inputName={getRadioInputName(consignment.id)}\n                            isLoading={isLoading(consignment.id)}\n                            isMultiShippingMode = {isMultiShippingMode}\n                            onSelectedOption={selectShippingOption}\n                            selectedShippingOptionId={\n                                consignment.selectedShippingOption &&\n                                consignment.selectedShippingOption.id\n                            }\n                            shippingOptions={consignment.availableShippingOptions}\n                        />\n\n                        {(!consignment.availableShippingOptions ||\n                            !consignment.availableShippingOptions.length) && (\n                            <ChecklistSkeleton\n                                additionalClassName=\"shippingOptions-skeleton\"\n                                isLoading={isLoading(consignment.id)}\n                                rows={2}\n                            >\n                                {this.renderNoShippingOptions(invalidShippingMessage)}\n                            </ChecklistSkeleton>\n                        )}\n                    </div>\n                ))}\n            </>\n        );\n    }\n\n    private selectDefaultShippingOptions: (state: CheckoutSelectors) => void = async ({ data }) => {\n        const { selectShippingOption, setFieldValue } = this.props;\n\n        const consignment = (data.getConsignments() || []).find(\n            ({ selectedShippingOption, availableShippingOptions: shippingOptions }) =>\n                !selectedShippingOption && shippingOptions,\n        );\n\n        if (!consignment || !consignment.availableShippingOptions) {\n            return;\n        }\n\n        const { availableShippingOptions, id } = consignment;\n        const recommendedOption = getRecommendedShippingOption(availableShippingOptions);\n        const singleShippingOption =\n            availableShippingOptions.length === 1 && availableShippingOptions[0];\n        const defaultShippingOption = recommendedOption || singleShippingOption;\n\n        if (!defaultShippingOption) {\n            return;\n        }\n\n        await selectShippingOption(id, defaultShippingOption.id);\n        setFieldValue(`shippingOptionIds.${id}`, defaultShippingOption.id);\n    };\n\n    private renderNoShippingOptions(message: ReactNode): ReactNode {\n        return (\n            <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\n                <p\n                    aria-live=\"polite\"\n                    className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\"\n                    role=\"alert\"\n                >\n                    {message}\n                </p>\n            </div>\n        );\n    }\n\n    private renderConsignment(consignment: Consignment): ReactNode {\n        const { cart } = this.props;\n\n        return (\n            <div className=\"staticConsignment\">\n                <strong>\n                    <TranslatedString id=\"shipping.shipping_address_heading\" />\n                </strong>\n\n                <StaticAddress address={consignment.shippingAddress} type={AddressType.Shipping} />\n\n                <StaticConsignmentItemList cart={cart} consignment={consignment} />\n            </div>\n        );\n    }\n}\n\nfunction getRadioInputName(consignmentId: string): string {\n    return `shippingOptionIds.${consignmentId}`;\n}\n\nexport interface ShippingOptionsFormValues {\n    shippingOptionIds: {\n        [shippingOptionIds: string]: string;\n    };\n}\n\nexport default withAnalytics(withFormikExtended<ShippingOptionsFormProps, ShippingOptionsFormValues>({\n    handleSubmit: noop,\n    mapPropsToValues({ consignments }) {\n        const shippingOptionIds: { [id: string]: string } = {};\n\n        (consignments || []).forEach((consignment) => {\n            shippingOptionIds[consignment.id] = consignment.selectedShippingOption\n                ? consignment.selectedShippingOption.id\n                : '';\n        });\n\n        return { shippingOptionIds };\n    },\n})(ShippingOptionsForm));\n","import { Cart, CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { map, sortBy, uniq } from 'lodash';\nimport { createSelector } from 'reselect';\n\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport getShippableLineItems from '../getShippableLineItems';\nimport getShippingMethodId from '../getShippingMethodId';\n\nimport ShippingOptionsForm from './ShippingOptionsForm';\n\nexport interface ShippingOptionsProps {\n    isInitialValueLoaded: boolean;\n    isMultiShippingMode: boolean;\n    isUpdatingAddress?: boolean;\n    shouldShowShippingOptions: boolean;\n}\n\nexport interface WithCheckoutShippingOptionsProps {\n    invalidShippingMessage: string;\n    methodId?: string;\n    consignments?: Consignment[];\n    cart: Cart;\n    isSelectingShippingOption(consignmentId?: string): boolean;\n    subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\n    selectShippingOption(consignmentId: string, optionId: string): Promise<CheckoutSelectors>;\n    isLoading(consignmentId?: string): boolean;\n}\n\nconst subscribeToConsignmentsSelector = createSelector(\n    ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\n    (subscribe) => (subscriber: (state: CheckoutSelectors) => void) => {\n        return subscribe(subscriber, ({ data }) => data.getConsignments());\n    },\n);\n\nconst isLoadingSelector = createSelector(\n    (_: CheckoutSelectors, { isUpdatingAddress }: ShippingOptionsProps) => isUpdatingAddress,\n    ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\n    ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\n    ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\n    ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\n    (\n        isUpdatingAddress,\n        isLoadingShippingOptions,\n        isSelectingShippingOption,\n        isUpdatingConsignment,\n        isCreatingConsignments,\n    ) => {\n        return (consignmentId?: string) => {\n            return (\n                isUpdatingAddress ||\n                isLoadingShippingOptions() ||\n                isSelectingShippingOption(consignmentId) ||\n                isUpdatingConsignment(consignmentId) ||\n                isCreatingConsignments()\n            );\n        };\n    },\n);\n\nconst sortConsignments = (cart: Cart, unsortedConsignments: Consignment[]): Consignment[] => {\n    if (unsortedConsignments.length < 2) {\n        return unsortedConsignments;\n    }\n\n    const shippableItems = getShippableLineItems(cart, unsortedConsignments);\n    const consignmentsOrder = uniq(map(shippableItems, 'consignment.id'));\n\n    return sortBy(unsortedConsignments, (consignment) => consignmentsOrder.indexOf(consignment.id));\n};\n\nexport function mapToShippingOptions(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    props: ShippingOptionsProps,\n): WithCheckoutShippingOptionsProps | null {\n    const {\n        data: { getCart, getConsignments, getConfig, getCustomer, getCheckout },\n        statuses: { isSelectingShippingOption },\n    } = checkoutState;\n\n    const customer = getCustomer();\n    const cart = getCart();\n    const config = getConfig();\n    const checkout = getCheckout();\n\n    if (!config || !checkout || !customer || !cart) {\n        return null;\n    }\n\n    const consignments = sortConsignments(cart, getConsignments() || []);\n    const methodId = getShippingMethodId(checkout, config);\n    const { shippingQuoteFailedMessage } = config.checkoutSettings;\n\n    return {\n        cart,\n        consignments,\n        invalidShippingMessage: shippingQuoteFailedMessage,\n        isLoading: isLoadingSelector(checkoutState, props),\n        isSelectingShippingOption,\n        methodId,\n        selectShippingOption: checkoutService.selectConsignmentShippingOption,\n        subscribeToConsignments: subscribeToConsignmentsSelector({\n            checkoutService,\n            checkoutState,\n        }),\n    };\n}\n\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Legend } from '../ui/form';\n\nimport { ShippingOptions } from './shippingOption';\n\nexport interface ShippingFormFooterProps {\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowShippingOptions?: boolean;\n    shouldDisableSubmit: boolean;\n    isInitialValueLoaded: boolean;\n    isLoading: boolean;\n}\n\nconst ShippingFormFooter: FunctionComponent<ShippingFormFooterProps> = ({\n    cartHasChanged,\n    isMultiShippingMode,\n    shouldShowOrderComments,\n    shouldShowShippingOptions = true,\n    shouldDisableSubmit,\n    isInitialValueLoaded,\n    isLoading,\n}) => {\n    return (\n        <>\n            <Extension region={ExtensionRegion.ShippingShippingAddressFormAfter} />\n            <Fieldset\n                id=\"checkout-shipping-options\"\n                legend={\n                    <>\n                        <Legend>\n                            <TranslatedString id=\"shipping.shipping_method_label\" />\n                        </Legend>\n\n                        {cartHasChanged && (\n                            <Alert type={AlertType.Error}>\n                                <strong>\n                                    <TranslatedString id=\"shipping.cart_change_error\" />\n                                </strong>\n                            </Alert>\n                        )}\n                    </>\n                }\n            >\n                <ShippingOptions\n                    isInitialValueLoaded={isInitialValueLoaded}\n                    isMultiShippingMode={isMultiShippingMode}\n                    isUpdatingAddress={isLoading}\n                    shouldShowShippingOptions={shouldShowShippingOptions}\n                />\n            </Fieldset>\n\n            {shouldShowOrderComments && <OrderComments />}\n\n            <div className=\"form-actions\">\n                <Button\n                    disabled={shouldDisableSubmit}\n                    id=\"checkout-shipping-continue\"\n                    isLoading={isLoading}\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </>\n    );\n};\n\nexport default ShippingFormFooter;\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutSelectors,\n    CheckoutStoreSelector,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    CustomerAddress,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport {\n    AddressFormModal,\n    AddressFormValues,\n    isValidAddress,\n    mapAddressFromFormValues,\n} from '../address';\nimport { ErrorModal } from '../common/error';\nimport { withFormikExtended } from '../common/form';\nimport { Form } from '../ui/form';\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippableLineItems from './getShippableLineItems';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport hasUnassignedLineItems from './hasUnassignedLineItems';\nimport ItemAddressSelect from './ItemAddressSelect';\nimport ShippableItem from './ShippableItem';\nimport ShippingFormFooter from './ShippingFormFooter';\nimport updateShippableItems from './updateShippableItems';\n\nexport interface MultiShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    customerMessage: string;\n    isLoading: boolean;\n    shouldShowOrderComments: boolean;\n    defaultCountryCode?: string;\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isFloatingLabelEnabled?: boolean;\n    isInitialValueLoaded: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    createCustomerAddress(address: AddressRequestBody): void;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: MultiShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n}\n\ninterface ShippableItemId {\n    key: string;\n    itemId: string;\n}\n\nexport interface MultiShippingFormState {\n    items: ShippableItem[];\n    itemAddingAddress?: ShippableItemId;\n    createCustomerAddressError?: Error;\n}\n\nclass MultiShippingForm extends PureComponent<\n    MultiShippingFormProps & WithLanguageProps & FormikProps<MultiShippingFormValues>,\n    MultiShippingFormState\n> {\n    static getDerivedStateFromProps(\n        { cart, consignments }: MultiShippingFormProps,\n        state: MultiShippingFormState,\n    ) {\n        if (!state || !state.items || getShippableItemsCount(cart) !== state.items.length) {\n            return { items: getShippableLineItems(cart, consignments) };\n        }\n\n        return null;\n    }\n\n    state: MultiShippingFormState = { items: [] };\n\n    render(): ReactNode {\n        const {\n            addresses,\n            consignments,\n            cart,\n            cartHasChanged,\n            shouldShowOrderComments,\n            isInitialValueLoaded,\n            isLoading,\n            getFields,\n            defaultCountryCode,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            isFloatingLabelEnabled,\n        } = this.props;\n\n        const { items, itemAddingAddress, createCustomerAddressError } = this.state;\n\n        return (\n            <>\n                <ErrorModal\n                    error={createCustomerAddressError}\n                    message={\n                        <>\n                            <TranslatedString id=\"address.consignment_address_updated_text\" />{' '}\n                            <TranslatedString id=\"customer.create_address_error\" />\n                        </>\n                    }\n                    onClose={this.handleCloseErrorModal}\n                    shouldShowErrorCode={false}\n                />\n                <AddressFormModal\n                    countries={countries}\n                    countriesWithAutocomplete={countriesWithAutocomplete}\n                    defaultCountryCode={defaultCountryCode}\n                    getFields={getFields}\n                    googleMapsApiKey={googleMapsApiKey}\n                    isFloatingLabelEnabled={isFloatingLabelEnabled}\n                    isLoading={isLoading}\n                    isOpen={!!itemAddingAddress}\n                    onRequestClose={this.handleCloseAddAddressForm}\n                    onSaveAddress={this.handleSaveAddress}\n                />\n\n                <Form>\n                    <ul className=\"consignmentList\">\n                        {items.map((item) => (\n                            <li key={item.key}>\n                                <ItemAddressSelect\n                                    addresses={addresses}\n                                    item={item}\n                                    onSelectAddress={this.handleSelectAddress}\n                                    onUseNewAddress={this.handleUseNewAddress}\n                                />\n                            </li>\n                        ))}\n                    </ul>\n\n                    <ShippingFormFooter\n                        cartHasChanged={cartHasChanged}\n                        isInitialValueLoaded={isInitialValueLoaded}\n                        isLoading={isLoading}\n                        isMultiShippingMode={true}\n                        shouldDisableSubmit={this.shouldDisableSubmit()}\n                        shouldShowOrderComments={shouldShowOrderComments}\n                        shouldShowShippingOptions={\n                            !hasUnassignedLineItems(consignments, cart.lineItems)\n                        }\n                    />\n                </Form>\n            </>\n        );\n    }\n\n    private handleCloseErrorModal: () => void = () => {\n        this.setState({ createCustomerAddressError: undefined });\n    };\n\n    private handleSaveAddress: (address: AddressFormValues) => void = async (address) => {\n        const { createCustomerAddress } = this.props;\n        const { itemAddingAddress } = this.state;\n\n        if (!itemAddingAddress) {\n            return;\n        }\n\n        const shippingAddress = mapAddressFromFormValues(address);\n\n        await this.handleSelectAddress(\n            shippingAddress,\n            itemAddingAddress.itemId,\n            itemAddingAddress.key,\n        );\n\n        try {\n            await createCustomerAddress(shippingAddress);\n        } catch (error) {\n            if (error instanceof Error) {\n                this.setState({ createCustomerAddressError: error });\n            }\n        }\n\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleUseNewAddress: (itemId: string, itemKey: string) => void = (\n        itemId,\n        itemKey,\n    ) => {\n        this.setState({\n            itemAddingAddress: {\n                key: itemKey,\n                itemId,\n            },\n        });\n    };\n\n    private handleCloseAddAddressForm: () => void = () => {\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleSelectAddress: (\n        address: Address,\n        itemId: string,\n        itemKey: string,\n    ) => Promise<void> = async (address, itemId, itemKey) => {\n        const { assignItem, onUnhandledError, getFields } = this.props;\n\n        if (!isValidAddress(address, getFields(address.countryCode))) {\n            return onUnhandledError(new AssignItemInvalidAddressError());\n        }\n\n        try {\n            const { data } = await assignItem({\n                address,\n                lineItems: [\n                    {\n                        itemId,\n                        quantity: 1,\n                    },\n                ],\n            });\n\n            this.syncItems(itemKey, address, data);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(new AssignItemFailedError(error));\n            }\n        }\n    };\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments } = this.props;\n\n        return isLoading || !hasSelectedShippingOptions(consignments);\n    };\n\n    private syncItems: (key: string, address: Address, data: CheckoutStoreSelector) => void = (\n        key,\n        address,\n        data,\n    ) => {\n        const { items: currentItems } = this.state;\n        const items = updateShippableItems(\n            currentItems,\n            {\n                updatedItemIndex: currentItems.findIndex((item) => item.key === key),\n                address,\n            },\n            {\n                cart: data.getCart(),\n                consignments: data.getConsignments(),\n            },\n        );\n\n        if (items) {\n            this.setState({ items });\n        }\n    };\n}\n\nexport interface MultiShippingFormValues {\n    orderComment: string;\n}\n\nexport default withLanguage(\n    withFormikExtended<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({ customerMessage }) => ({\n            orderComment: customerMessage,\n        }),\n        enableReinitialize: true,\n    })(MultiShippingForm),\n);\n","import { Address, Cart, Consignment } from '@bigcommerce/checkout-sdk';\n\nimport { isEqualAddress } from '../address';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport interface UpdateItemParams {\n    updatedItemIndex: number;\n    address: Address;\n}\n\nexport default function updateShippableItems(\n    items: ShippableItem[],\n    { updatedItemIndex, address }: UpdateItemParams,\n    { cart, consignments }: { cart?: Cart; consignments?: Consignment[] },\n): ShippableItem[] | undefined {\n    if (updatedItemIndex < 0 || updatedItemIndex >= items.length || !cart) {\n        return;\n    }\n\n    const cartItemIds = cart.lineItems.physicalItems.map(({ id }) => id);\n\n    const updatedConsignment = (consignments || []).find((consignment) =>\n        isEqualAddress(consignment.shippingAddress, address),\n    );\n\n    const newId = findNewItemId(items[updatedItemIndex], cart, updatedConsignment);\n\n    return items.map((item, i) => {\n        if ((newId && !cartItemIds.includes(item.id)) || i === updatedItemIndex) {\n            const itemId = newId ?? item.id;\n\n            return {\n                ...item,\n                id: itemId,\n                consignment: findConsignment(consignments || [], itemId as string),\n            };\n        }\n\n        return item;\n    });\n}\n\nfunction findNewItemId(\n    item: ShippableItem,\n    cart?: Cart,\n    consignment?: Consignment,\n): string | undefined {\n    if (!cart || !consignment) {\n        return;\n    }\n\n    const { physicalItems } = cart.lineItems;\n    const matchingCartItems = physicalItems.filter(\n        ({ productId, variantId }) => productId === item.productId && variantId === item.variantId,\n    );\n\n    const matchingCartItemIds = matchingCartItems.map(({ id }) => id);\n\n    return consignment.lineItemIds.find((id) => matchingCartItemIds.includes(id));\n}\n","import { Address, Consignment, ConsignmentCreateRequestBody } from \"@bigcommerce/checkout-sdk\";\nimport React, { useState } from \"react\";\n\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\n\nimport { AddressFormModal, AddressFormValues, AddressSelect, AddressType, isValidAddress, mapAddressFromFormValues } from \"../address\";\nimport { ErrorModal } from \"../common/error\";\nimport { EMPTY_ARRAY, isFloatingLabelEnabled } from \"../common/utility\";\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from \"./errors\";\n\ninterface ConsignmentAddressSelectorProps {\n    consignment?: Consignment;\n    defaultCountryCode?: string;\n    countriesWithAutocomplete: string[];\n    isLoading: boolean;\n    onUnhandledError(error: Error): void;\n    setConsignmentRequest?(consignmentRequest: ConsignmentCreateRequestBody): void;\n    selectedAddress?: Address;\n}\n\nconst ConsignmentAddressSelector = ({\n    consignment,\n    countriesWithAutocomplete,\n    defaultCountryCode,\n    isLoading,\n    onUnhandledError,\n    selectedAddress,\n    setConsignmentRequest,\n}: ConsignmentAddressSelectorProps) => {\n    const [isOpenNewAddressModal, setIsOpenNewAddressModal] = useState(false);\n    const [createCustomerAddressError, setCreateCustomerAddressError] = useState<Error>();\n\n    const {\n        checkoutState: {\n            data: { getCart, getShippingCountries, getCustomer, getConfig, getShippingAddressFields: getFields },\n        },\n        checkoutService: { assignItemsToAddress: assignItem, createCustomerAddress },\n    } = useCheckout();\n\n    const cart = getCart();\n    const countries = getShippingCountries() || EMPTY_ARRAY;\n    const customer = getCustomer();\n    const config = getConfig();\n\n    if (!config || !cart || !customer) {\n        return null;\n    }\n\n    const isFloatingLabelEnabledFlag = isFloatingLabelEnabled(config.checkoutSettings);\n    const addresses = customer.addresses || EMPTY_ARRAY;\n    const {\n        checkoutSettings: {\n            googleMapsApiKey,\n        },\n    } = config;\n\n    const handleSelectAddress = async (address: Address) => {\n        if (!isValidAddress(address, getFields(address.countryCode))) {\n            return onUnhandledError(new AssignItemInvalidAddressError());\n        }\n\n        if (!consignment) {\n            setConsignmentRequest?.({\n                address,\n                shippingAddress: address,\n                lineItems: [],\n            });\n\n            return;\n        }\n\n        const cartLineItems = [...cart.lineItems.physicalItems, ...(cart.lineItems.customItems || EMPTY_ARRAY)];\n        const consignmentLineItems = consignment.lineItemIds.map(lineItemId => (\n            { itemId: lineItemId, quantity: cartLineItems.find(({ id }) => id === lineItemId)?.quantity || 0 }\n        ));\n\n        try {\n            await assignItem({\n                address,\n                lineItems: consignmentLineItems,\n            });\n\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(new AssignItemFailedError(error));\n            }\n        }\n    }\n\n    const handleUseNewAddress = () => {\n        setIsOpenNewAddressModal(true);\n    }\n\n    const handleCloseAddAddressForm = () => {\n        setIsOpenNewAddressModal(false);\n    }\n\n    const handleSaveAddress = async (addressFormValues: AddressFormValues) => {\n        const address = mapAddressFromFormValues(addressFormValues);\n\n        if (!isValidAddress(address, getFields(address.countryCode))) {\n            return onUnhandledError(new AssignItemInvalidAddressError());\n        }\n\n        await handleSelectAddress(address);\n\n        try {\n            await createCustomerAddress(address);\n        } catch (error) {\n            if (error instanceof Error) {\n                setCreateCustomerAddressError(error);\n            }\n        }\n\n        setIsOpenNewAddressModal(false);\n    }\n\n    const handleCloseErrorModal = () => {\n        setCreateCustomerAddressError(undefined);\n    }\n\n    return (\n        <>\n            <ErrorModal\n                error={createCustomerAddressError}\n                message={\n                    <>\n                        <TranslatedString id=\"address.consignment_address_updated_text\" />{' '}\n                        <TranslatedString id=\"customer.create_address_error\" />\n                    </>\n                }\n                onClose={handleCloseErrorModal}\n                shouldShowErrorCode={false}\n            />\n            <AddressFormModal\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                defaultCountryCode={defaultCountryCode}\n                getFields={getFields}\n                googleMapsApiKey={googleMapsApiKey}\n                isFloatingLabelEnabled={isFloatingLabelEnabledFlag}\n                isLoading={isLoading}\n                isOpen={isOpenNewAddressModal}\n                onRequestClose={handleCloseAddAddressForm}\n                onSaveAddress={handleSaveAddress}\n            />\n            <AddressSelect\n                addresses={addresses}\n                onSelectAddress={handleSelectAddress}\n                onUseNewAddress={handleUseNewAddress}\n                selectedAddress={selectedAddress}\n                showSingleLineAddress\n                type={AddressType.Shipping}\n            />\n        </>\n    )\n}\n\nexport default ConsignmentAddressSelector;\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport React from \"react\";\n\nimport ConsignmentAddressSelector from './ConsignmentAddressSelector';\n\nexport interface ConsignmentListItemProps {\n    consignment: Consignment;\n    consignmentNumber: number;\n    defaultCountryCode?: string;\n    countriesWithAutocomplete: string[];\n    isLoading: boolean;\n    onUnhandledError(error: Error): void;\n}\n\nconst ConsignmentListItem = ({\n    consignment,\n    consignmentNumber,\n    countriesWithAutocomplete,\n    defaultCountryCode,\n    isLoading,\n    onUnhandledError\n}: ConsignmentListItemProps) => {\n\n    return (\n        <div className='consignment-container'>\n            <h3 className='consignment-header'>Shipping destination {consignmentNumber}</h3>\n            <ConsignmentAddressSelector\n                consignment={consignment}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                defaultCountryCode={defaultCountryCode}\n                isLoading={isLoading}\n                onUnhandledError={onUnhandledError}\n                selectedAddress={consignment.shippingAddress}\n            />\n        </div>\n    )\n}\n\nexport default ConsignmentListItem;\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { OrderComments } from '../orderComments';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\n\nexport interface ShippingFormFooterProps {\n    shouldShowOrderComments: boolean;\n    shouldDisableSubmit: boolean;\n    isLoading: boolean;\n}\n\nconst MultiShippingFormV2Footer: FunctionComponent<ShippingFormFooterProps> = ({\n    shouldShowOrderComments,\n    shouldDisableSubmit,\n    isLoading,\n}) => {\n    return (\n        <Form>\n            {shouldShowOrderComments && <OrderComments />}\n\n            <div className=\"form-actions\">\n                <Button\n                    disabled={shouldDisableSubmit}\n                    id=\"checkout-shipping-continue\"\n                    isLoading={isLoading}\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </Form>\n    );\n};\n\nexport default MultiShippingFormV2Footer;\n","import { ConsignmentCreateRequestBody } from \"@bigcommerce/checkout-sdk\";\nimport { find } from \"lodash\";\nimport React, { useMemo, useState } from \"react\";\n\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\n\nimport { EMPTY_ARRAY } from \"../common/utility\";\n\nimport ConsignmentAddressSelector from './ConsignmentAddressSelector';\n\ninterface NewConsignmentProps {\n    consignmentNumber: number;\n    defaultCountryCode?: string;\n    countriesWithAutocomplete: string[];\n    isLoading: boolean;\n    onUnhandledError(error: Error): void;\n}\n\nconst NewConsignment = ({\n    consignmentNumber,\n    countriesWithAutocomplete,\n    defaultCountryCode,\n    isLoading,\n    onUnhandledError\n}: NewConsignmentProps) => {\n    const [consignmentRequest, setConsignmentRequest] = useState<ConsignmentCreateRequestBody | undefined>();\n\n    const {\n        checkoutState: {\n            data: { getShippingCountries },\n        },\n    } = useCheckout();\n\n    const selectedAddress = useMemo(() => {\n        if (!consignmentRequest?.address) {\n            return undefined;\n        }\n\n        const countries = getShippingCountries() || EMPTY_ARRAY;\n        const country = find(countries, { code: consignmentRequest.address.countryCode });\n\n        return {\n            ...consignmentRequest.address,\n            country: country ? country.name : consignmentRequest.address.countryCode,\n        };\n    }, [consignmentRequest]);\n\n    return (\n        <div className='consignment-container'>\n            <h3 className='consignment-header'>Shipping destination {consignmentNumber}</h3>\n            <ConsignmentAddressSelector\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                defaultCountryCode={defaultCountryCode}\n                isLoading={isLoading}\n                onUnhandledError={onUnhandledError}\n                selectedAddress={selectedAddress}\n                setConsignmentRequest={setConsignmentRequest} />\n        </div>\n    )\n}\n\nexport default NewConsignment;\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useMemo, useState } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withFormikExtended } from '../common/form';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { Button, ButtonVariant } from '../ui/button';\n\nimport ConsignmentListItem from './ConsignmentListItem';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport MultiShippingFormV2Footer from './MultiShippingFormV2Footer';\nimport './MultiShippingFormV2.scss';\nimport NewConsignment from './NewConsignment';\n\ninterface MultiShippingFormV2Values {\n    orderComment: string;\n}\n\nexport interface MultiShippingFormV2Props {\n    customerMessage: string;\n    defaultCountryCode?: string;\n    countriesWithAutocomplete: string[];\n    isLoading: boolean;\n    onUnhandledError(error: Error): void;\n    onSubmit(values: MultiShippingFormV2Values): void;\n}\n\nconst MultiShippingFormV2: FunctionComponent<MultiShippingFormV2Props> = ({\n    countriesWithAutocomplete,\n    defaultCountryCode,\n    isLoading,\n    onUnhandledError,\n}: MultiShippingFormV2Props) => {\n    const [isAddShippingDestination, setIsAddShippingDestination] = useState(false);\n\n    const {\n        checkoutState: {\n            data: { getConsignments, getConfig },\n        },\n    } = useCheckout();\n\n    const consignments = getConsignments() || EMPTY_ARRAY;\n    const config = getConfig();\n\n    const shouldDisableSubmit = useMemo(() => {\n        return isLoading || !hasSelectedShippingOptions(consignments);\n    }, [isLoading, consignments]);\n\n    if (!config) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments: shouldShowOrderComments,\n        },\n    } = config;\n\n    const handleAddShippingDestination = () => {\n        setIsAddShippingDestination(true);\n    }\n\n    return (\n        <>\n            {consignments.map((consignment: Consignment, index: number) => (\n                <ConsignmentListItem\n                    consignment={consignment}\n                    consignmentNumber={index + 1}\n                    countriesWithAutocomplete={countriesWithAutocomplete}\n                    defaultCountryCode={defaultCountryCode}\n                    isLoading={isLoading}\n                    key={consignment.id}\n                    onUnhandledError={onUnhandledError}\n                />\n            ))}\n            {(consignments.length === 0 || isAddShippingDestination) && (\n                <NewConsignment\n                    consignmentNumber={consignments.length === 0 ? 1 : (consignments.length + 1)}\n                    countriesWithAutocomplete={countriesWithAutocomplete}\n                    defaultCountryCode={defaultCountryCode}\n                    isLoading={isLoading}\n                    onUnhandledError={onUnhandledError}\n                />)\n            }\n            <Button className='add-consignment-button' onClick={handleAddShippingDestination} variant={ButtonVariant.Secondary}>\n                Add shipping destination\n            </Button>\n            <MultiShippingFormV2Footer\n                isLoading={isLoading}\n                shouldDisableSubmit={shouldDisableSubmit}\n                shouldShowOrderComments={shouldShowOrderComments}\n            />\n        </>\n    );\n}\n\nexport default withLanguage(\n    withFormikExtended<MultiShippingFormV2Props & WithLanguageProps, MultiShippingFormV2Values>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({ customerMessage }) => ({\n            orderComment: customerMessage,\n        }),\n        enableReinitialize: true,\n    })(MultiShippingFormV2),\n);\n","import React, { FunctionComponent } from \"react\";\n\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\nimport { TranslatedLink, TranslatedString } from \"@bigcommerce/checkout/locale\";\n\ninterface MultiShippingGuestFormProps {\n    onSignIn(): void;\n    onCreateAccount(): void;\n}\n\nconst MultiShippingGuestForm: FunctionComponent<MultiShippingGuestFormProps> = ({\n    onSignIn,\n    onCreateAccount\n}: MultiShippingGuestFormProps) => {\n    return (\n        <div className=\"checkout-step-info\">\n            <TranslatedString id=\"shipping.multishipping_guest_intro\" />{' '}\n            <a\n                data-test=\"shipping-sign-in-link\"\n                href=\"#\"\n                onClick={preventDefault(onSignIn)}\n            >\n                <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\n            </a>{' '}\n            <TranslatedLink\n                id=\"shipping.multishipping_guest_create\"\n                onClick={onCreateAccount}\n            />\n        </div>\n    )\n};\n\nexport default MultiShippingGuestForm;\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField } from '../ui/form';\n\nexport interface BillingSameAsShippingFieldProps {\n    onChange?(isChecked: boolean): void;\n}\n\nconst BillingSameAsShippingField: FunctionComponent<BillingSameAsShippingFieldProps> = ({\n    onChange,\n}) => {\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"billing.use_shipping_address_label\" />,\n        [],\n    );\n\n    return (\n        <CheckboxFormField\n            id=\"sameAsBilling\"\n            labelContent={labelContent}\n            name=\"billingSameAsShipping\"\n            onChange={onChange}\n            testId=\"billingSameAsShipping\"\n        />\n    );\n};\n\nexport default memo(BillingSameAsShippingField);\n","import {\n    Address,\n    CheckoutSelectors,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { StaticAddress } from '../address/';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { DynamicFormField, Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport './StaticAddressEditable.scss';\n\nexport interface StaticAddressEditableProps {\n    address: Address;\n    buttonId: string;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StaticAddressEditable extends PureComponent<StaticAddressEditableProps> {\n    async componentDidMount(): Promise<void> {\n        const { initialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const { address, buttonId, formFields, isLoading } = this.props;\n\n        const customFormFields = formFields.filter(({ custom }) => custom);\n        const shouldShowCustomFormFields = customFormFields.length > 0;\n\n        return (\n            <LoadingOverlay isLoading={isLoading}>\n                <div className=\"stepHeader\" style={{ padding: 0 }}>\n                    <div className=\"stepHeader-body subheader\">\n                        <StaticAddress address={address} />\n                    </div>\n\n                    <div className=\"stepHeader-actions subheader\">\n                        <Button\n                            id={buttonId}\n                            onClick={preventDefault()}\n                            size={ButtonSize.Tiny}\n                            testId=\"step-edit-button\"\n                            variant={ButtonVariant.Secondary}\n                        >\n                            <TranslatedString id=\"common.edit_action\" />\n                        </Button>\n                    </div>\n                </div>\n\n                {shouldShowCustomFormFields && (\n                    <Fieldset id=\"customFieldset\">\n                        {customFormFields.map((field) => (\n                            <DynamicFormField\n                                field={field}\n                                key={`${field.id}-${field.name}`}\n                                onChange={this.handleFieldValueChange(field.name)}\n                                parentFieldName=\"shippingAddress.customFields\"\n                            />\n                        ))}\n                    </Fieldset>\n                )}\n            </LoadingOverlay>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void =\n        (name) => (value) => {\n            const { onFieldChange } = this.props;\n\n            onFieldChange(name, value);\n        };\n}\n\nexport default StaticAddressEditable;\n","import { Address, ShippingInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FC, useCallback } from 'react';\n\nimport { ShippingAddressProps } from './ShippingAddress';\nimport StaticAddressEditable from './StaticAddressEditable';\n\ninterface AmazonPayShippingAddressProps extends ShippingAddressProps {\n    shippingAddress:  Address,\n}\n\nexport const AmazonPayShippingAddress: FC<AmazonPayShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        onFieldChange,\n        initialize,\n        deinitialize,\n        shippingAddress,\n        isShippingStepPending,\n    } = props;\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const editAddressButtonId = 'edit-ship-button';\n\n    const options: ShippingInitializeOptions = {\n        amazonpay: {\n            editAddressButtonId,\n        },\n    };\n\n    return (\n        <StaticAddressEditable\n            address={shippingAddress}\n            buttonId={editAddressButtonId}\n            deinitialize={deinitialize}\n            formFields={formFields}\n            initialize={initializeShipping(options)}\n            isLoading={isShippingStepPending}\n            methodId={methodId}\n            onFieldChange={onFieldChange}\n        />\n    );\n};\n","import {\n    Address,\n    CheckoutSelectors,\n    Country,\n    CustomerAddress,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { memo, useEffect, useRef } from 'react';\n\nimport { localizeAddress, TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    Button,\n    ButtonSize,\n    ButtonVariant,\n    DynamicFormField,\n    Fieldset,\n    LoadingOverlay,\n} from '@bigcommerce/checkout/ui';\n\nimport isPayPalCommerceFastlaneMethod from './is-paypal-commerce-fastlane-method';\nimport PoweredByPayPalFastlaneLabel from './PoweredByPayPalFastlaneLabel';\n\nexport interface PayPalFastlaneStaticAddressProps {\n    address: Address;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    countries?: Country[];\n}\n\nexport interface PayPalFastlaneAddressComponentRef {\n    showAddressSelector?: () => Promise<CustomerAddress | undefined>;\n}\n\nconst PayPalFastlaneShippingAddressForm = (props: PayPalFastlaneStaticAddressProps) => {\n    const {\n        address: addressWithoutLocalization,\n        methodId,\n        formFields,\n        isLoading,\n        initialize,\n        deinitialize,\n        onUnhandledError,\n        onFieldChange,\n        countries,\n    } = props;\n    const address = localizeAddress(addressWithoutLocalization, countries);\n\n    const paypalFastlaneShippingComponent = useRef<PayPalFastlaneAddressComponentRef>({});\n\n    const paypalCommerceFastlaneOptions = {\n        paypalcommercefastlane: {\n            onPayPalFastlaneAddressChange: (\n                showPayPalFastlaneAddressSelector: PayPalFastlaneAddressComponentRef['showAddressSelector'],\n            ) => {\n                paypalFastlaneShippingComponent.current.showAddressSelector =\n                    showPayPalFastlaneAddressSelector;\n            },\n        },\n    };\n\n    const braintreeFastlaneOptions = {\n        braintreefastlane: {\n            onPayPalFastlaneAddressChange: (\n                showPayPalFastlaneAddressSelector: PayPalFastlaneAddressComponentRef['showAddressSelector'],\n            ) => {\n                paypalFastlaneShippingComponent.current.showAddressSelector =\n                    showPayPalFastlaneAddressSelector;\n            },\n        },\n    };\n\n    const initializationOptions: ShippingInitializeOptions = isPayPalCommerceFastlaneMethod(\n        methodId,\n    )\n        ? paypalCommerceFastlaneOptions\n        : braintreeFastlaneOptions;\n\n    const initializeShippingStrategyOrThrow = async () => {\n        try {\n            await initialize({\n                methodId,\n                ...initializationOptions,\n            });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializeShippingStrategyOrThrow = async () => {\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializeShippingStrategyOrThrow();\n\n        return () => {\n            void deinitializeShippingStrategyOrThrow();\n        };\n    }, []);\n\n    const customFormFields = formFields.filter(({ custom }) => custom);\n    const shouldShowCustomFormFields = customFormFields.length > 0;\n\n    const handleFieldValueChange: (name: string) => (value: string) => void = (name) => (value) =>\n        onFieldChange(name, value);\n\n    const handleEditButtonClick = async () => {\n        if (typeof paypalFastlaneShippingComponent.current.showAddressSelector === 'function') {\n            const selectedAddress =\n                await paypalFastlaneShippingComponent.current.showAddressSelector();\n\n            if (selectedAddress) {\n                props.onAddressSelect({\n                    ...selectedAddress,\n                    ...(shouldShowCustomFormFields ? address.customFields : {}),\n                });\n            }\n        }\n    };\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"stepHeader\" style={{ padding: 0 }}>\n                <div className=\"stepHeader-body subheader\">\n                    <div className=\"vcard checkout-address--static\">\n                        {(address.firstName || address.lastName) && (\n                            <p className=\"fn address-entry\">\n                                <span className=\"first-name\">{`${address.firstName} `}</span>\n                                <span className=\"family-name\">{address.lastName}</span>\n                            </p>\n                        )}\n\n                        {(address.phone || address.company) && (\n                            <p className=\"address-entry\">\n                                <span className=\"company-name\">{`${address.company} `}</span>\n                                <span className=\"tel\">{address.phone}</span>\n                            </p>\n                        )}\n\n                        <div className=\"adr\">\n                            <p className=\"street-address address-entry\">\n                                <span className=\"address-line-1\">{`${address.address1} `}</span>\n                                {address.address2 && (\n                                    <span className=\"address-line-2\">{` / ${address.address2}`}</span>\n                                )}\n                            </p>\n\n                            <p className=\"address-entry\">\n                                {address.city && (\n                                    <span className=\"locality\">{`${address.city}, `}</span>\n                                )}\n                                {address.localizedProvince && (\n                                    <span className=\"region\">{`${address.localizedProvince}, `}</span>\n                                )}\n                                {address.postalCode && (\n                                    <span className=\"postal-code\">{`${address.postalCode} / `}</span>\n                                )}\n                                {address.localizedCountry && (\n                                    <span className=\"country-name\">{`${address.localizedCountry} `}</span>\n                                )}\n                            </p>\n                        </div>\n                    </div>\n\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n\n                <div className=\"stepHeader-actions subheader\">\n                    <Button\n                        onClick={handleEditButtonClick}\n                        size={ButtonSize.Tiny}\n                        testId=\"step-edit-button\"\n                        variant={ButtonVariant.Secondary}\n                    >\n                        <TranslatedString id=\"common.edit_action\" />\n                    </Button>\n                </div>\n            </div>\n\n            {shouldShowCustomFormFields && (\n                <Fieldset id=\"customFieldset\">\n                    {customFormFields.map((field) => (\n                        <DynamicFormField\n                            field={field}\n                            key={`${field.id}-${field.name}`}\n                            onChange={handleFieldValueChange(field.name)}\n                            parentFieldName=\"shippingAddress.customFields\"\n                        />\n                    ))}\n                </Fieldset>\n            )}\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(PayPalFastlaneShippingAddressForm);\n","import { Address } from '@bigcommerce/checkout-sdk';\nimport React, { FC } from 'react';\n\nimport { PayPalFastlaneShippingAddressForm } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nimport { ShippingAddressProps } from './ShippingAddress';\n\ninterface PayPalFastlaneShippingAddressProps extends ShippingAddressProps {\n    methodId: string,\n    shippingAddress:  Address,\n}\n\nexport const PayPalFastlaneShippingAddress: FC<PayPalFastlaneShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        onAddressSelect,\n        onFieldChange,\n        onUnhandledError,\n        initialize,\n        deinitialize,\n        isLoading,\n        shippingAddress,\n    } = props;\n\n    return (\n        <PayPalFastlaneShippingAddressForm\n            address={shippingAddress}\n            countries={countries}\n            deinitialize={deinitialize}\n            formFields={formFields}\n            initialize={initialize}\n            isLoading={isLoading}\n            methodId={methodId}\n            onAddressSelect={onAddressSelect}\n            onFieldChange={onFieldChange}\n            onUnhandledError={onUnhandledError}\n        />\n    )\n};\n","import {\n    Address,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { AddressForm, AddressSelect, AddressType, isValidCustomerAddress } from '../address';\nimport { connectFormik, ConnectFormikProps } from '../common/form';\nimport { Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingAddressFormProps {\n    addresses: CustomerAddress[];\n    address?: Address;\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    formFields: FormField[];\n    shouldShowSaveAddress?: boolean;\n    isFloatingLabelEnabled?: boolean;\n    onUseNewAddress(): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onAddressSelect(address: Address): void;\n}\n\nconst addressFieldName = 'shippingAddress';\n\nclass ShippingAddressForm extends Component<\n    ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>\n> {\n    render(): ReactNode {\n        const {\n            addresses,\n            address: shippingAddress,\n            onAddressSelect,\n            onUseNewAddress,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            formFields,\n            isLoading,\n            googleMapsApiKey,\n            isFloatingLabelEnabled,\n            formik: {\n                values: { shippingAddress: formAddress },\n            },\n        } = this.props;\n\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = isValidCustomerAddress(\n            shippingAddress,\n            addresses,\n            formFields,\n        );\n\n        return (\n            <Fieldset id=\"checkoutShippingAddress\">\n                {hasAddresses && (\n                    <Fieldset id=\"shippingAddresses\">\n                        <LoadingOverlay isLoading={isLoading}>\n                            <AddressSelect\n                                addresses={addresses}\n                                onSelectAddress={onAddressSelect}\n                                onUseNewAddress={onUseNewAddress}\n                                selectedAddress={\n                                    hasValidCustomerAddress ? shippingAddress : undefined\n                                }\n                                type={AddressType.Shipping}\n                            />\n                        </LoadingOverlay>\n                    </Fieldset>\n                )}\n\n                {!hasValidCustomerAddress && (\n                    <LoadingOverlay isLoading={isLoading} unmountContentWhenLoading>\n                        <AddressForm\n                            countries={countries}\n                            countriesWithAutocomplete={countriesWithAutocomplete}\n                            countryCode={formAddress && formAddress.countryCode}\n                            fieldName={addressFieldName}\n                            formFields={formFields}\n                            googleMapsApiKey={googleMapsApiKey}\n                            isFloatingLabelEnabled={isFloatingLabelEnabled}\n                            onAutocompleteToggle={this.handleAutocompleteToggle}\n                            onChange={this.handleChange}\n                            setFieldValue={this.setFieldValue}\n                            shouldShowSaveAddress={shouldShowSaveAddress}\n                        />\n                    </LoadingOverlay>\n                )}\n            </Fieldset>\n        );\n    }\n\n    private setFieldValue: (fieldName: string, fieldValue: string) => void = (\n        fieldName,\n        fieldValue,\n    ) => {\n        const {\n            formik: { setFieldValue },\n            formFields,\n        } = this.props;\n\n        const customFormFieldNames = formFields\n            .filter((field) => field.custom)\n            .map((field) => field.name);\n\n        const formFieldName = customFormFieldNames.includes(fieldName)\n            ? `customFields.${fieldName}`\n            : fieldName;\n\n        setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\n    };\n\n    private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        const { onFieldChange } = this.props;\n\n        onFieldChange(fieldName, value);\n    };\n\n    private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({\n        isOpen,\n        inputValue,\n    }) => {\n        const { onFieldChange } = this.props;\n\n        if (!isOpen) {\n            onFieldChange('address1', inputValue);\n        }\n    };\n}\n\nexport default connectFormik(ShippingAddressForm);\n","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useContext } from 'react';\n\nimport { isPayPalFastlaneMethod, usePayPalFastlaneAddress } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport { AmazonPayShippingAddress } from './AmazonPayShippingAddress';\nimport { PayPalFastlaneShippingAddress } from './PayPalFastlaneShippingAddress';\nimport ShippingAddressForm from './ShippingAddressForm';\n\nexport interface ShippingAddressProps {\n    addresses: CustomerAddress[];\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    hasRequestedShippingOptions: boolean;\n    isFloatingLabelEnabled?: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(name: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    onUseNewAddress(): void;\n}\n\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        countriesWithAutocomplete,\n        consignments,\n        googleMapsApiKey,\n        onAddressSelect,\n        onFieldChange,\n        onUseNewAddress,\n        isLoading,\n        shippingAddress,\n        hasRequestedShippingOptions,\n        addresses,\n        shouldShowSaveAddress,\n        isFloatingLabelEnabled,\n    } = props;\n\n    const { shouldShowPayPalFastlaneShippingForm } = usePayPalFastlaneAddress();\n    const { setSubmitted } = useContext(FormContext);\n\n    const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        if (hasRequestedShippingOptions) {\n            setSubmitted(true);\n        }\n\n        onFieldChange(fieldName, value);\n    };\n\n    if (methodId === 'amazonpay' && shippingAddress) {\n        return (\n            <AmazonPayShippingAddress\n                {...props}\n                shippingAddress={shippingAddress}\n            />\n        );\n    }\n\n    if (methodId && isPayPalFastlaneMethod(methodId) && shippingAddress && shouldShowPayPalFastlaneShippingForm) {\n        return (\n            <PayPalFastlaneShippingAddress\n                { ...props }\n                methodId={methodId}\n                shippingAddress={shippingAddress}\n            />\n        )\n    }\n\n    return (\n        <ShippingAddressForm\n            address={shippingAddress}\n            addresses={addresses}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            formFields={formFields}\n            googleMapsApiKey={googleMapsApiKey}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isLoading={isLoading}\n            onAddressSelect={onAddressSelect}\n            onFieldChange={handleFieldChange}\n            onUseNewAddress={onUseNewAddress}\n            shouldShowSaveAddress={shouldShowSaveAddress}\n        />\n    );\n};\n\nexport default memo(ShippingAddress);\n","export const SHIPPING_ADDRESS_FIELDS = [\n    'address1',\n    'postalCode',\n    'countryCode',\n    'city',\n    'stateOrProvince',\n    'stateOrProvinceCode',\n];\n","import {\n    Address,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    CustomerRequestOptions,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport { debounce, isEqual, noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport {\n    AddressFormValues,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    isEqualAddress,\n    mapAddressFromFormValues,\n    mapAddressToFormValues,\n} from '../address';\nimport { withFormikExtended } from '../common/form';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { PaymentMethodId } from '../payment/paymentMethod';\nimport { Fieldset, Form } from '../ui/form';\n\nimport BillingSameAsShippingField from './BillingSameAsShippingField';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport ShippingAddress from './ShippingAddress';\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface SingleShippingFormProps {\n    addresses: CustomerAddress[];\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shippingAutosaveDelay?: number;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    isFloatingLabelEnabled?: boolean;\n    isInitialValueLoaded: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isResettingAddress: boolean;\n    isUpdatingShippingData: boolean;\n    hasRequestedShippingOptions: boolean;\n}\n\nfunction shouldHaveCustomValidation(methodId?: string): boolean {\n    const methodIdsWithoutCustomValidation: string[] = [\n        PaymentMethodId.BraintreeAcceleratedCheckout,\n        PaymentMethodId.PayPalCommerceAcceleratedCheckout\n    ];\n\n    return Boolean(methodId && !methodIdsWithoutCustomValidation.includes(methodId));\n}\n\nexport const SHIPPING_AUTOSAVE_DELAY = 1700;\n\nclass SingleShippingForm extends PureComponent<\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n> {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isResettingAddress: false,\n        isUpdatingShippingData: false,\n        hasRequestedShippingOptions: false,\n    };\n\n    private debouncedUpdateAddress: any;\n\n    constructor(\n        props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>,\n    ) {\n        super(props);\n\n        const { updateAddress } = this.props;\n\n        this.debouncedUpdateAddress = debounce(\n            async (address: Address, includeShippingOptions: boolean) => {\n                try {\n                    await updateAddress(address, {\n                        params: {\n                            include: {\n                                'consignments.availableShippingOptions': includeShippingOptions,\n                            },\n                        },\n                    });\n\n                    if (includeShippingOptions) {\n                        this.setState({ hasRequestedShippingOptions: true });\n                    }\n                } finally {\n                    this.setState({ isUpdatingShippingData: false });\n                }\n            },\n            props.shippingAutosaveDelay ?? SHIPPING_AUTOSAVE_DELAY,\n        );\n    }\n\n    render(): ReactNode {\n        const {\n            addresses,\n            cartHasChanged,\n            isInitialValueLoaded,\n            isLoading,\n            onUnhandledError,\n            methodId,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            values: { shippingAddress: addressForm },\n            isShippingStepPending,\n            isFloatingLabelEnabled,\n        } = this.props;\n\n        const { isResettingAddress, isUpdatingShippingData, hasRequestedShippingOptions } =\n            this.state;\n\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n        const shouldShowBillingSameAsShipping = !PAYMENT_METHOD_VALID.some(\n            (method) => method === methodId,\n        );\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <ShippingAddress\n                        addresses={addresses}\n                        consignments={consignments}\n                        countries={countries}\n                        countriesWithAutocomplete={countriesWithAutocomplete}\n                        deinitialize={deinitialize}\n                        formFields={this.getFields(addressForm && addressForm.countryCode)}\n                        googleMapsApiKey={googleMapsApiKey}\n                        hasRequestedShippingOptions={hasRequestedShippingOptions}\n                        initialize={initialize}\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                        isLoading={isResettingAddress}\n                        isShippingStepPending={isShippingStepPending}\n                        methodId={methodId}\n                        onAddressSelect={this.handleAddressSelect}\n                        onFieldChange={this.handleFieldChange}\n                        onUnhandledError={onUnhandledError}\n                        onUseNewAddress={this.onUseNewAddress}\n                        shippingAddress={shippingAddress}\n                        shouldShowSaveAddress={shouldShowSaveAddress}\n                    />\n                    {shouldShowBillingSameAsShipping && (\n                        <div className=\"form-body\">\n                            <BillingSameAsShippingField />\n                        </div>\n                    )}\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={cartHasChanged}\n                    isInitialValueLoaded={isInitialValueLoaded}\n                    isLoading={isLoading || isUpdatingShippingData}\n                    isMultiShippingMode={false}\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\n                    shouldShowOrderComments={shouldShowOrderComments}\n                    shouldShowShippingOptions={isValid}\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isValid } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleFieldChange: (name: string) => void = async (name) => {\n        const { setFieldValue } = this.props;\n\n        if (name === 'countryCode') {\n            setFieldValue('shippingAddress.stateOrProvince', '');\n            setFieldValue('shippingAddress.stateOrProvinceCode', '');\n        }\n\n        // Enqueue the following code to run after Formik has run validation\n        await new Promise((resolve) => setTimeout(resolve));\n\n        const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\n\n        const { hasRequestedShippingOptions } = this.state;\n\n        const { isValid } = this.props;\n\n        if (!isValid) {\n            return;\n        }\n\n        this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\n    };\n\n    private updateAddressWithFormData(includeShippingOptions: boolean) {\n        const {\n            shippingAddress,\n            values: { shippingAddress: addressForm },\n        } = this.props;\n\n        const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\n\n        if (Array.isArray(shippingAddress?.customFields)) {\n            includeShippingOptions = !isEqual(\n                shippingAddress?.customFields,\n                updatedShippingAddress?.customFields\n            ) || includeShippingOptions;\n        }\n\n        if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            return;\n        }\n\n        this.setState({ isUpdatingShippingData: true });\n        this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\n    }\n\n    private handleAddressSelect: (address: Address) => void = async (address) => {\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address,\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private onUseNewAddress: () => void = async () => {\n        const { deleteConsignments, onUnhandledError = noop, setValues, values } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            const address = await deleteConsignments();\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address && address.countryCode),\n                    address,\n                ),\n            });\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const { getFields } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(\n    withFormikExtended<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({\n            getFields,\n            shippingAddress,\n            isBillingSameAsShipping,\n            customerMessage,\n        }) => ({\n            billingSameAsShipping: isBillingSameAsShipping,\n            orderComment: customerMessage,\n            shippingAddress: mapAddressToFormValues(\n                getFields(shippingAddress && shippingAddress.countryCode),\n                shippingAddress,\n            ),\n        }),\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\n            !!shippingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(shippingAddress.countryCode),\n            }).isValidSync(shippingAddress),\n        validationSchema: ({\n            language,\n            getFields,\n            methodId,\n        }: SingleShippingFormProps & WithLanguageProps) =>\n            shouldHaveCustomValidation(methodId)\n                ? object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getCustomFormFieldsValidationSchema({\n                              translate: getTranslateAddressError(language),\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  })\n                : object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getAddressFormFieldsValidationSchema({\n                              language,\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  }),\n        enableReinitialize: false,\n    })(SingleShippingForm),\n);\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    CustomerAddress,\n    CustomerRequestOptions,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React from 'react';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { usePayPalFastlaneAddress } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\nimport MultiShippingFormV2 from './MultiShippingFormV2';\nimport MultiShippingGuestForm from './MultiShippingGuestForm';\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isBillingSameAsShipping: boolean;\n    isGuest: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    isFloatingLabelEnabled?: boolean;\n    isInitialValueLoaded: boolean;\n    isNewMultiShippingUIEnabled: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    onMultiShippingSubmit(values: MultiShippingFormValues): void;\n    onSignIn(): void;\n    onSingleShippingSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nconst ShippingForm = ({\n    addresses,\n    assignItem,\n    cart,\n    cartHasChanged,\n    createCustomerAddress,\n    consignments,\n    countries,\n    countriesWithAutocomplete,\n    onCreateAccount,\n    customerMessage,\n    deinitialize,\n    deleteConsignments,\n    getFields,\n    googleMapsApiKey,\n    initialize,\n    isBillingSameAsShipping,\n    isGuest,\n    isLoading,\n    isMultiShippingMode,\n    methodId,\n    onMultiShippingSubmit,\n    onSignIn,\n    onSingleShippingSubmit,\n    onUnhandledError,\n    onUseNewAddress,\n    shippingAddress,\n    shouldShowOrderComments,\n    shouldShowSaveAddress,\n    signOut,\n    updateAddress,\n    isShippingStepPending,\n    isFloatingLabelEnabled,\n    isInitialValueLoaded,\n    isNewMultiShippingUIEnabled,\n}: ShippingFormProps & WithLanguageProps) => {\n    const { isPayPalFastlaneEnabled, paypalFastlaneAddresses } = usePayPalFastlaneAddress();\n\n    const shippingAddresses = isPayPalFastlaneEnabled && isGuest\n        ? paypalFastlaneAddresses\n        : addresses;\n\n    const getMultiShippingForm = () => {\n        if (isGuest) {\n            return (\n                <MultiShippingGuestForm onCreateAccount={onCreateAccount} onSignIn={onSignIn} />\n            );\n        }\n\n        if (isNewMultiShippingUIEnabled) {\n            return <MultiShippingFormV2\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                customerMessage={customerMessage}\n                defaultCountryCode={shippingAddress?.countryCode}\n                isLoading={isLoading}\n                onSubmit={onMultiShippingSubmit}\n                onUnhandledError={onUnhandledError}\n            />;\n        }\n\n        return <MultiShippingForm\n            addresses={shippingAddresses}\n            assignItem={assignItem}\n            cart={cart}\n            cartHasChanged={cartHasChanged}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            createCustomerAddress={createCustomerAddress}\n            customerMessage={customerMessage}\n            defaultCountryCode={shippingAddress?.countryCode}\n            getFields={getFields}\n            googleMapsApiKey={googleMapsApiKey}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isInitialValueLoaded={isInitialValueLoaded}\n            isLoading={isLoading}\n            onSubmit={onMultiShippingSubmit}\n            onUnhandledError={onUnhandledError}\n            onUseNewAddress={onUseNewAddress}\n            shouldShowOrderComments={shouldShowOrderComments}\n        />;\n    };\n\n    return isMultiShippingMode ? (\n        getMultiShippingForm()\n    ) : (\n        <SingleShippingForm\n            addresses={shippingAddresses}\n            cartHasChanged={cartHasChanged}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            customerMessage={customerMessage}\n            deinitialize={deinitialize}\n            deleteConsignments={deleteConsignments}\n            getFields={getFields}\n            googleMapsApiKey={googleMapsApiKey}\n            initialize={initialize}\n            isBillingSameAsShipping={isBillingSameAsShipping}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isInitialValueLoaded={isInitialValueLoaded}\n            isLoading={isLoading}\n            isMultiShippingMode={isMultiShippingMode}\n            isShippingStepPending={isShippingStepPending}\n            methodId={methodId}\n            onSubmit={onSingleShippingSubmit}\n            onUnhandledError={onUnhandledError}\n            shippingAddress={shippingAddress}\n            shouldShowOrderComments={shouldShowOrderComments}\n            shouldShowSaveAddress={shouldShowSaveAddress}\n            signOut={signOut}\n            updateAddress={updateAddress}\n        />\n    );\n};\n\nexport default withLanguage(ShippingForm);\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Legend } from '../ui/form';\n\ninterface ShippingHeaderProps {\n    isMultiShippingMode: boolean;\n    isGuest: boolean;\n    shouldShowMultiShipping: boolean;\n    onMultiShippingChange(): void;\n}\n\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\n    isMultiShippingMode,\n    isGuest,\n    onMultiShippingChange,\n    shouldShowMultiShipping,\n}) => {\n    return (\n        <>\n            <Extension region={ExtensionRegion.ShippingShippingAddressFormBefore} />\n            <div className=\"form-legend-container\">\n                <Legend testId=\"shipping-address-heading\">\n                    <TranslatedString\n                        id={\n                            isMultiShippingMode\n                                ? isGuest\n                                    ? 'shipping.multishipping_address_heading_guest'\n                                    : 'shipping.multishipping_address_heading'\n                                : 'shipping.shipping_address_heading'\n                        }\n                    />\n                </Legend>\n\n                {shouldShowMultiShipping && (\n                    <a\n                        data-test=\"shipping-mode-toggle\"\n                        href=\"#\"\n                        onClick={preventDefault(onMultiShippingChange)}\n                    >\n                        <TranslatedString\n                            id={isMultiShippingMode ? 'shipping.ship_to_single' : 'shipping.ship_to_multi'}\n                        />\n                    </a>\n                )}\n            </div>\n        </>\n    );\n}\n\nexport default memo(ShippingHeader);\n","import { CheckoutSelectors, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nexport interface StripeupeShippingAddressProps {\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StripeShippingAddressDisplay extends PureComponent<StripeupeShippingAddressProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n\n        return (\n            <>\n                <div className=\"stepHeader\" style={ { padding: 0 } }>\n                    <div id=\"StripeUpeShipping\" style={ { width: '100%' } } />\n                </div>\n                <br />\n            </>\n        );\n    }\n}\n\nexport default StripeShippingAddressDisplay;\n","interface StripeCountryMapping {\n    [key: string]: StripeStateMapping;\n}\n\ninterface StripeStateMapping {\n    [key: string]: string;\n}\n\nexport default function StripeStateMapper(country: string, state: string): string {\n\n    const countries: StripeCountryMapping = {\n        'MX': {\n            'Ags.': 'AGU',\n            'B.C.': 'BCN',\n            'B.C.S.': 'BCS',\n            'Camp.': 'CAM',\n            'Coah.': 'COA',\n            'Col.': 'COL',\n            'Chis.': 'CHP',\n            'Chih.': 'CHH',\n            'Dgo.': 'DUR',\n            'Gto.': 'GUA',\n            'Gro.': 'GRO',\n            'Hgo.': 'HID',\n            'Jal.': 'JAL',\n            'Méx.': 'MEX',\n            'CDMX': 'MEX',\n            'Mich.': 'MIC',\n            'Mor.': 'MOR',\n            'Nay.': 'NAY',\n            'N.L.': 'NLE',\n            'Oax.': 'OAX',\n            'Pue.': 'PUE',\n            'Qro.': 'QUE',\n            'Q.R.': 'ROO',\n            'S.L.P.': 'SLP',\n            'Sin.': 'SIN',\n            'Son.': 'SON',\n            'Tab.': 'TAB',\n            'Tamps.': 'TAM',\n            'Tlax.': 'TLA',\n            'Ver.': 'VER',\n            'Yuc.': 'YUC',\n            'Zac.': 'ZAC',\n        },\n        'AR': {\n            'Ciudad Autónoma de Buenos Aires': 'C',\n            'Buenos Aires': 'B',\n            'Catamarca': 'K',\n            'Chaco': 'H',\n            'Chubut': 'U',\n            'Córdoba': 'X',\n            'Corrientes': 'W',\n            'Entre Ríos': 'E',\n            'Formosa': 'P',\n            'Jujuy': 'Y',\n            'La Pampa': 'L',\n            'La Rioja': 'F',\n            'Mendoza': 'M',\n            'Misiones': 'N',\n            'Neuquén': 'Q',\n            'Salta': 'A',\n            'San Juan': 'J',\n            'San Luis': 'D',\n            'Santa Fe': 'S',\n            'Santiago del Estero': 'G',\n            'Tierra del Fuego': 'V',\n            'Tucumán': 'W',\n        },\n        'IN': {\n            'Andhra Pradesh': 'AP',\n            'Arunachal Pradesh': 'AR',\n            'Assam': 'AS',\n            'Bihar': 'BR',\n            'Chhattisgarh': 'CG',\n            'Goa': 'GA',\n            'Gujarat': 'GJ',\n            'Haryana': 'HR',\n            'Himachal Pradesh': 'HP',\n            'Jammu and Kashmir': 'JK',\n            'Jharkhand': 'JH',\n            'Karnataka': 'KA',\n            'Kerala': 'KL',\n            'Madhya Pradesh': 'MP',\n            'Maharashtra': 'MH',\n            'Manipur': 'MN',\n            'Meghalaya': 'ML',\n            'Mizoram': 'MZ',\n            'Nagaland': 'NL',\n            'Odisha': 'OR',\n            'Punjab': 'PB',\n            'Rajasthan': 'RJ',\n            'Sikkim': 'SK',\n            'Tamil Nadu': 'TN',\n            'Tripura': 'TR',\n            'Uttarakhand': 'UK',\n            'Uttar Pradesh': 'UP',\n            'West Bengal': 'WB',\n            'Andaman and Nicobar Islands': 'AN',\n            'Chandigarh': 'CH',\n            'Dadra and Nagar Haveli and Daman and Diu': 'DN',\n            'Lakshadweep': 'LD',\n            'Delhi': 'DL',\n            'Puducherry': 'PY',\n            'Telangana': 'TS',\n        },\n        'ID': {\n            'Bali': 'BA',\n            'Banten': 'BT',\n            'Bengkulu': 'BE',\n            'Aceh': 'DA',\n            'DKI Jakarta': 'JK',\n            'Sumatera Utara': 'SU',\n            'Sumatera Barat': 'SB',\n            'Riau': 'SI',\n            'Jambi': 'JA',\n            'Sumatera Selatan': 'SS',\n            'Lampung': 'LA',\n            'Jawa Barat': 'JB',\n            'Jawa Timur': 'JT',\n            'Daerah Istimewa Yogyakarta': 'DY',\n            'Kalimantan Barat': 'KB',\n            'Kalimantan Tengah': 'KT',\n            'Kalimantan Timur': 'KI',\n            'Kalimantan Selatan': 'KS',\n            'Nusa Tenggara Barat': 'NB',\n            'Nusa Tenggara Timur': 'NT',\n            'Sulawesi Selatan': 'SN',\n            'Sulawesi Tengah': 'ST',\n            'Sulawesi Utara': 'SA',\n            'Sulawesi Tenggara': 'SG',\n            'Maluku': 'MA',\n            'Maluku Utara': 'MU',\n            'Gorontalo': 'GO',\n        },\n        'MY': {\n            'Johor': 'JHR',\n            'Kedah': 'KDH',\n            'Kelantan': 'KTN',\n            'Melaka': 'MLK',\n            'Negeri Sembilan': 'NSN',\n            'Pahang': 'PHG',\n            'Pulau Pinang': 'PNG',\n            'Perak': 'PRK',\n            'Perlis': 'PLS',\n            'Selangor': 'SGR',\n            'Terengganu': 'TRG',\n            'Sabah': 'SBH',\n            'Sarawak': 'SRW',\n            'Kuala Lumpur': 'KUL',\n            'Labuan': 'LBN',\n            'Putrajaya': 'PJY',\n        },\n        'IE': {\n            'Carlow': 'CW',\n            'Cavan': 'CN',\n            'Clare': 'CE',\n            'Donegal': 'DL',\n            'Dublin': 'D',\n            'Galway': 'G',\n            'Kildare': 'KE',\n            'Kilkenny': 'KK',\n            'Laois': 'LS',\n            'Leitrim': 'LM',\n            'Longford': 'LD',\n            'Louth': 'LH',\n            'Mayo': 'MO',\n            'Meath': 'MH',\n            'Monaghan': 'MN',\n            'Offaly': 'OY',\n            'Roscommon': 'RN',\n            'Sligo': 'SO',\n            'Tipperary': 'TA',\n            'Waterford': 'WD',\n            'Westmeath': 'WH',\n            'Wexford': 'WX',\n            'Wicklow': 'WW',\n        },\n        'ES': {\n            'C': 'ACOR',\n            'VI': 'ALAV',\n            'AB': 'ALBA',\n            'A': 'ALIC',\n            'AL': 'ALME',\n            'O': 'ASTU',\n            'AV': 'AVIL',\n            'BA': 'BADA',\n            'PM': 'BALE',\n            'B': 'BARC',\n            'BU': 'BURG',\n            'CC': 'CACE',\n            'CA': 'CADI',\n            'S': 'CANT',\n            'CS': 'CAST',\n            'CE': 'CEUT',\n            'CR': 'CIUD',\n            'CO': 'CORD',\n            'CU': 'CUEN',\n            'GI': 'GIRO',\n            'GR': 'GRAN',\n            'GU': 'GUAD',\n            'SS': 'GUIP',\n            'H': 'HUEL',\n            'HU': 'HUES',\n            'J': 'JAEN',\n            'LO': 'LAR',\n            'GC': 'LAS',\n            'LE': 'LEON',\n            'L': 'LLEI',\n            'LU': 'LUGO',\n            'M': 'MADR',\n            'MA': 'MALA',\n            'ML': 'MELI',\n            'MU': 'MURC',\n            'NA': 'NAVA',\n            'OR': 'OURE',\n            'P': 'PALE',\n            'PO': 'PONT',\n            'SA': 'SALA',\n            'TF': 'SANT',\n            'SG': 'SEGO',\n            'SE': 'SEVI',\n            'SO': 'SORI',\n            'T': 'TARR',\n            'TE': 'TERU',\n            'TP': 'TOLE',\n            'V': 'VALE',\n            'VA': 'VALL',\n            'BI': 'VIZC',\n            'ZA': 'ZAMO',\n            'Z': 'ZARA',\n        },\n        'JP': {\n            'Aichi': '23',\n            'Akita': '05',\n            'Aomori': '02',\n            'Chiba': '12',\n            'Ehime': '38',\n            'Fukui': '18',\n            'Fukuoka': '40',\n            'Fukushima': '07',\n            'Gifu': '21',\n            'Gunma': '10',\n            'Hiroshima': '34',\n            'Hokkaido': '01',\n            'Hyogo': '28',\n            'Ibaraki': '08',\n            'Ishikawa': '17',\n            'Iwate': '03',\n            'Kagawa': '37',\n            'Kagoshima': '46',\n            'Kanagawa': '14',\n            'Kochi': '39',\n            'Kumamoto': '43',\n            'Kyoto': '26',\n            'Mie': '24',\n            'Miyagi': '04',\n            'Miyazaki': '45',\n            'Nagano': '20',\n            'Nagasaki': '42',\n            'Nara': '29',\n            'Niigata': '15',\n            'Oita': '44',\n            'Okayama': '33',\n            'Okinawa': '47',\n            'Osaka': '27',\n            'Saga': '41',\n            'Saitama': '11',\n            'Shiga': '25',\n            'Shimane': '32',\n            'Shizuoka': '22',\n            'Tochigi': '09',\n            'Tokushima': '36',\n            'Tokyo': '13',\n            'Tottori': '31',\n            'Toyama': '16',\n            'Wakayama': '30',\n            'Yamagata': '06',\n            'Yamaguchi': '35',\n            'Yamanashi': '19'\n        },\n    };\n\n    if (countries[country]) {\n        return countries[country][state] ?? getStripeState(countries[country], state);\n    }\n\n    return state;\n}\n\nfunction getStripeState(stateList: StripeStateMapping, state: string) {\n    return Object.keys(stateList).find(key => stateList[key] === state) || state;\n}\n","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n    StripeShippingEvent\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FunctionComponent, memo, useCallback, useEffect, useState } from 'react';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport { SingleShippingFormValues } from '../SingleShippingForm';\n\nimport StripeShippingAddressDisplay from './StripeShippingAddressDisplay';\nimport StripeStateMapper from './StripeStateMapper';\n\nexport interface StripeShippingAddressProps {\n    consignments: Consignment[];\n    countries?: Country[];\n    shippingAddress?: Address;\n    step: CheckoutStepStatus;\n    isShippingMethodLoading: boolean;\n    shouldDisableSubmit: boolean;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onSubmit(values: SingleShippingFormValues): void;\n}\n\nconst StripeShippingAddress: FunctionComponent<StripeShippingAddressProps> = (props) => {\n    const {\n        countries,\n        consignments,\n        onAddressSelect,\n        initialize,\n        deinitialize,\n        shouldDisableSubmit,\n        onSubmit,\n        step,\n        isStripeLoading,\n        isStripeAutoStep,\n        isShippingMethodLoading,\n        shippingAddress,\n    } = props;\n\n    const [isNewAddress, setIsNewAddress] = useState(true);\n    const [isFirstShippingRender, setIsFirstShippingRender] = useState(true);\n    const [stripeShippingAddress, setStripeShippingAddress] =  useState({\n        firstName: '',\n        lastName: '',\n        company: '',\n        address1: '',\n        address2: '',\n        city: '',\n        stateOrProvince: '',\n        stateOrProvinceCode: '',\n        shouldSaveAddress: true,\n        country: '',\n        countryCode: '',\n        postalCode: '',\n        phone: '',\n        customFields: [],\n    });\n\n    const handleLoading = useCallback(() => {\n        if (isStripeLoading) {\n            isStripeLoading();\n        }\n    }, [isStripeLoading]);\n\n    useEffect(() => {\n        if (consignments[0]) {\n            const {availableShippingOptions} = consignments[0];\n\n            if (availableShippingOptions && !getRecommendedShippingOption(availableShippingOptions)) {\n                handleLoading();\n            }\n        }\n    }, [consignments]);\n\n    useEffect(() => {\n        const hasStripeAddressAndHasShippingOptions = stripeShippingAddress.firstName && hasSelectedShippingOptions(consignments);\n        const afterReload = !isFirstShippingRender && !isNewAddress && !isShippingMethodLoading;\n        const isLoadingBeforeAutoStep =  isStripeLoading && isStripeAutoStep;\n\n        if (hasStripeAddressAndHasShippingOptions && afterReload && isLoadingBeforeAutoStep) {\n            isStripeLoading();\n            isStripeAutoStep();\n            onSubmit({billingSameAsShipping: true, shippingAddress: stripeShippingAddress, orderComment: ''});\n        }\n    }, [isFirstShippingRender, onSubmit, stripeShippingAddress, shouldDisableSubmit, isShippingMethodLoading, isNewAddress ,consignments]);\n\n    const availableShippingList = countries?.map(country => ({code: country.code, name: country.name}));\n    const allowedCountries = availableShippingList ? availableShippingList.map(country => country.code).join(', ') : '';\n    const shouldShowContent = (isNewAddress = true, phoneFieldRequired: boolean, phone: string) => {\n        const stepCompleted = step.isComplete;\n        const shippingPopulated = shippingAddress?.firstName && isNewAddress;\n        const PhoneRequiredAndNotFilled = phoneFieldRequired && !phone;\n\n        return stepCompleted || shippingPopulated || PhoneRequiredAndNotFilled;\n    };\n\n    const handleStripeShippingAddress = useCallback(async (shipping: StripeShippingEvent) => {\n        const {complete, phoneFieldRequired, value: { address = { country: '', state: '', line1: '', line2: '', city: '', postal_code: '' }\n            , name = '', firstName = '', lastName = '', phone = '' } } = shipping;\n\n        if (complete) {\n            if (shouldShowContent(shipping?.isNewAddress, phoneFieldRequired, phone)) {\n                handleLoading();\n            }\n\n            const names = name?.split(' ');\n\n            // @ts-ignore\n            const country = availableShippingList?.find(country => country.code === address.country).name;\n            const state = StripeStateMapper(address.country, address.state);\n            const shippingValue = {\n                firstName: firstName || names[0],\n                lastName: lastName || names[1],\n                company: '',\n                address1: address.line1,\n                address2: address.line2 || '',\n                city: address.city,\n                stateOrProvince: state,\n                stateOrProvinceCode: state,\n                shouldSaveAddress: true,\n                country: country || address.country,\n                countryCode: address.country,\n                postalCode: address.postal_code,\n                phone: phone || '',\n                customFields: [],\n            };\n\n            if (!step.isComplete) {\n                setIsFirstShippingRender(current => !current);\n            }\n\n            onAddressSelect(shippingValue);\n            setStripeShippingAddress(shippingValue);\n\n            if (shipping.isNewAddress !== isNewAddress) {\n                setIsNewAddress(current => !current);\n            }\n        } else {\n            handleLoading();\n        }\n\n    }, [availableShippingList, onAddressSelect]);\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const getStylesFromElement = (\n        id: string,\n        properties: string[]) => {\n        const parentContainer = document.getElementById(id);\n\n        if (parentContainer) {\n            return getAppliedStyles(parentContainer, properties);\n        }\n\n        return undefined;\n    };\n\n    const getStripeStyles: any = useCallback( () => {\n        const containerId = 'stripe-card-component-field';\n        const formInput = getStylesFromElement(`${containerId}--input`, ['color', 'background-color', 'border-color', 'box-shadow']);\n        const formLabel = getStylesFromElement(`${containerId}--label`, ['color']);\n        const formError = getStylesFromElement(`${containerId}--error`, ['color']);\n\n        return formLabel && formInput && formError ? {\n            labelText: formLabel.color,\n            fieldText: formInput.color,\n            fieldPlaceholderText: formInput.color,\n            fieldErrorText: formError.color,\n            fieldBackground: formInput['background-color'],\n            fieldInnerShadow: formInput['box-shadow'],\n            fieldBorder: formInput['border-color'],\n        } : undefined;\n    }, [])\n\n        const options: ShippingInitializeOptions = {\n            stripeupe: {\n                container: 'StripeUpeShipping',\n                onChangeShipping: handleStripeShippingAddress,\n                availableCountries: allowedCountries,\n                getStyles: getStripeStyles,\n                getStripeState: StripeStateMapper,\n                gatewayId: 'stripeupe',\n                methodId: 'card',\n            },\n        };\n\n        const renderCheckoutThemeStylesForStripeUPE = () => {\n            const containerId = 'stripe-card-component-field';\n\n            return (\n                <div\n                    className=\"optimizedCheckout-form-input\"\n                    id={ `${containerId}--input` }\n                    placeholder=\"1111\"\n                >\n                    <div\n                        className=\"form-field--error\"\n                    >\n                        <div\n                            className=\"optimizedCheckout-form-label\"\n                            id={ `${containerId}--error` }\n                        />\n                    </div>\n                    <div\n                        className=\"optimizedCheckout-form-label\"\n                        id={ `${containerId}--label` }\n                    />\n                </div>\n            );\n        };\n\n        return (\n            <>\n                <StripeShippingAddressDisplay\n                    deinitialize={ deinitialize }\n                    initialize={ initializeShipping(options) }\n                    methodId=\"stripeupe\"\n                />\n                { renderCheckoutThemeStylesForStripeUPE() }\n            </>\n        );\n};\n\nexport default memo(StripeShippingAddress);\n","import {\n    Address,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport {\n    AddressFormValues,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    mapAddressToFormValues,\n} from '../../address';\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport { withFormikExtended } from '../../common/form';\nimport { getCustomFormFieldsValidationSchema } from '../../formFields';\nimport { Fieldset, Form } from '../../ui/form';\nimport BillingSameAsShippingField from '../BillingSameAsShippingField';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport ShippingFormFooter from '../ShippingFormFooter';\n\nimport StripeShippingAddress from './StripeShippingAddress';\n\nexport interface SingleShippingFormProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    customerMessage: string;\n    isLoading: boolean;\n    isShippingMethodLoading: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowOrderComments: boolean;\n    step: CheckoutStepStatus;\n    isInitialValueLoaded: boolean;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    updateAddress(\n        address: Partial<Address>,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isUpdatingShippingData: boolean;\n}\n\nclass StripeShippingForm extends PureComponent<\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n    > {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isUpdatingShippingData: false,\n    };\n\n    render(): ReactNode {\n        const {\n            cartHasChanged,\n            isInitialValueLoaded,\n            isLoading,\n            countries,\n            isStripeLoading,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            onSubmit,\n            isStripeAutoStep,\n            step,\n            isShippingMethodLoading,\n        } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <StripeShippingAddress\n                        consignments={consignments}\n                        countries={countries}\n                        deinitialize={deinitialize}\n                        initialize={initialize}\n                        isShippingMethodLoading={isShippingMethodLoading}\n                        isStripeAutoStep={isStripeAutoStep}\n                        isStripeLoading={isStripeLoading}\n                        onAddressSelect={this.handleAddressSelect}\n                        onSubmit={onSubmit}\n                        shippingAddress={shippingAddress}\n                        shouldDisableSubmit={this.shouldDisableSubmit()}\n                        step={step}\n                    />\n                    <div className=\"form-body\">\n                        <BillingSameAsShippingField />\n                    </div>\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={cartHasChanged}\n                    isInitialValueLoaded={isInitialValueLoaded}\n                    isLoading={isLoading || isUpdatingShippingData}\n                    isMultiShippingMode={false}\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\n                    shouldShowOrderComments={shouldShowOrderComments}\n                    shouldShowShippingOptions={isValid}\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isValid } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleAddressSelect: (address: Address) => void = async (address) => {\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address,\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const { getFields } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(\n    withFormikExtended<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({\n                               getFields,\n                               shippingAddress,\n                               isBillingSameAsShipping,\n                               customerMessage,\n                           }) => ({\n            billingSameAsShipping: isBillingSameAsShipping,\n            orderComment: customerMessage,\n            shippingAddress: mapAddressToFormValues(\n                getFields(shippingAddress && shippingAddress.countryCode),\n                shippingAddress,\n            ),\n        }),\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\n            !!shippingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(shippingAddress.countryCode),\n            }).isValidSync(shippingAddress),\n        validationSchema: ({\n                               language,\n                               getFields,\n                               methodId,\n                           }: SingleShippingFormProps & WithLanguageProps) =>\n            methodId\n                ? object({\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                        getCustomFormFieldsValidationSchema({\n                            translate: getTranslateAddressError(language),\n                            formFields: getFields(formValues && formValues.countryCode),\n                        }),\n                    ),\n                })\n                : object({\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                        getAddressFormFieldsValidationSchema({\n                            language,\n                            formFields: getFields(formValues && formValues.countryCode),\n                        }),\n                    ),\n                }),\n        enableReinitialize: false,\n    })(StripeShippingForm),\n);\n","import { Address, CheckoutSelectors, Consignment, Country, Customer, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport ShippingHeader from '../ShippingHeader';\n\nimport StripeShippingForm, { SingleShippingFormValues } from './StripeShippingForm';\n\nexport interface StripeShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    consignments: Consignment[];\n    countries: Country[];\n    customer: Customer;\n    customerMessage: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isInitialValueLoaded: boolean;\n    isLoading: boolean;\n    isShippingMethodLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSubmit(values: SingleShippingFormValues): void;\n    onMultiShippingChange(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    getFields(countryCode?: string): FormField[];\n}\n\ninterface StripeShippingState {\n    isStripeLoading: boolean;\n    isStripeAutoStep: boolean;\n}\n\nclass StripeShipping extends Component<StripeShippingProps, StripeShippingState> {\n    constructor(props: StripeShippingProps) {\n        super(props);\n\n        this.state = {\n            isStripeLoading: true,\n            isStripeAutoStep: false,\n        };\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            updateAddress,\n            initialize,\n            deinitialize,\n            isMultiShippingMode,\n            step,\n            onSubmit,\n            onMultiShippingChange,\n            isLoading,\n            isShippingMethodLoading,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isStripeLoading,\n            isStripeAutoStep,\n        } = this.state;\n\n        return <>\n            <AddressFormSkeleton isLoading={isStripeAutoStep || isStripeLoading}/>\n            <div className=\"checkout-form\" style={{display: isStripeAutoStep || isStripeLoading ? 'none' : undefined}}>\n                <ShippingHeader\n                    isGuest={isGuest}\n                    isMultiShippingMode={isMultiShippingMode}\n                    onMultiShippingChange={onMultiShippingChange}\n                    shouldShowMultiShipping={shouldShowMultiShipping}\n                />\n                <StripeShippingForm\n                    {...shippingFormProps}\n                    deinitialize={deinitialize}\n                    initialize={initialize}\n                    isBillingSameAsShipping={isBillingSameAsShipping}\n                    isLoading={isLoading}\n                    isMultiShippingMode={isMultiShippingMode}\n                    isShippingMethodLoading={isShippingMethodLoading}\n                    isStripeAutoStep={this.handleIsAutoStep}\n                    isStripeLoading={this.stripeLoadedCallback}\n                    onSubmit={onSubmit}\n                    step={step}\n                    updateAddress={updateAddress}\n                />\n            </div>\n        </>;\n    }\n\n    private stripeLoadedCallback: () => void = () => {\n        this.setState({ isStripeLoading: false });\n    }\n\n    private handleIsAutoStep: () => void = () => {\n        this.setState({ isStripeAutoStep: true });\n    }\n}\n\nexport default StripeShipping;\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutRequestBody,\n    CheckoutSelectors,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    Customer,\n    CustomerRequestOptions,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { createSelector } from 'reselect';\n\nimport { shouldUseStripeLinkByMinimumAmount } from '@bigcommerce/checkout/instrument-utils';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout } from '../checkout';\nimport CheckoutStepStatus from '../checkout/CheckoutStepStatus';\nimport { EMPTY_ARRAY, isExperimentEnabled, isFloatingLabelEnabled } from '../common/utility';\nimport getProviderWithCustomCheckout from '../payment/getProviderWithCustomCheckout';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nimport { UnassignItemError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippingMethodId from './getShippingMethodId';\nimport { MultiShippingFormValues } from './MultiShippingForm';\nimport ShippingForm from './ShippingForm';\nimport ShippingHeader from './ShippingHeader';\nimport { SingleShippingFormValues } from './SingleShippingForm';\nimport StripeShipping from './stripeUPE/StripeShipping';\n\nexport interface ShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    onCreateAccount(): void;\n    onToggleMultiShipping(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSignIn(): void;\n    navigateNextStep(isBillingSameAsShipping: boolean): void;\n}\n\nexport interface WithCheckoutShippingProps {\n    billingAddress?: Address;\n    cart: Cart;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowMultiShipping: boolean;\n    isNewMultiShippingUIEnabled: boolean;\n    shouldShowOrderComments: boolean;\n    shouldRenderWhileLoading: boolean;\n    providerWithCustomCheckout?: string;\n    isFloatingLabelEnabled?: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadBillingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    signOut(options?: CustomerRequestOptions): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n    updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    shouldRenderStripeForm: boolean;\n}\n\ninterface ShippingState {\n    isInitializing: boolean;\n}\n\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps, ShippingState> {\n    constructor(props: ShippingProps & WithCheckoutShippingProps) {\n        super(props);\n\n        this.state = {\n            isInitializing: true,\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const {\n            loadShippingAddressFields,\n            loadBillingAddressFields,\n            loadShippingOptions,\n            onReady = noop,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await Promise.all([loadShippingAddressFields(), loadShippingOptions(), loadBillingAddressFields()]);\n\n            onReady();\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            isNewMultiShippingUIEnabled,\n            customer,\n            updateShippingAddress,\n            initializeShippingMethod,\n            deinitializeShippingMethod,\n            isMultiShippingMode,\n            step,\n            isFloatingLabelEnabled,\n            shouldRenderStripeForm,\n            shouldRenderWhileLoading,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isInitializing,\n        } = this.state;\n\n        if (shouldRenderStripeForm && !customer.email && this.props.countries.length > 0) {\n            return <StripeShipping\n                { ...shippingFormProps }\n                customer={ customer }\n                deinitialize={deinitializeShippingMethod}\n                initialize={initializeShippingMethod}\n                isBillingSameAsShipping={isBillingSameAsShipping}\n                isGuest={ isGuest }\n                isInitialValueLoaded={shouldRenderWhileLoading ? !isInitializing : true}\n                isLoading={ isInitializing }\n                isMultiShippingMode={isMultiShippingMode}\n                isShippingMethodLoading={ this.props.isLoading }\n                onMultiShippingChange={ this.handleMultiShippingModeSwitch }\n                onSubmit={this.handleSingleShippingSubmit}\n                shouldShowMultiShipping={ shouldShowMultiShipping }\n                step={step}\n                updateAddress={updateShippingAddress}\n            />;\n        }\n\n        return (\n            <AddressFormSkeleton isLoading={isInitializing} renderWhileLoading={shouldRenderWhileLoading}>\n                <div className=\"checkout-form\">\n                    <ShippingHeader\n                        isGuest={isGuest}\n                        isMultiShippingMode={isMultiShippingMode}\n                        onMultiShippingChange={this.handleMultiShippingModeSwitch}\n                        shouldShowMultiShipping={shouldShowMultiShipping}\n                    />\n                    <ShippingForm\n                        {...shippingFormProps}\n                        addresses={customer.addresses}\n                        deinitialize={deinitializeShippingMethod}\n                        initialize={initializeShippingMethod}\n                        isBillingSameAsShipping={isBillingSameAsShipping}\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                        isGuest={isGuest}\n                        isInitialValueLoaded={shouldRenderWhileLoading ? !isInitializing : true}\n                        isMultiShippingMode={isMultiShippingMode}\n                        isNewMultiShippingUIEnabled={isNewMultiShippingUIEnabled}\n                        onMultiShippingSubmit={this.handleMultiShippingSubmit}\n                        onSingleShippingSubmit={this.handleSingleShippingSubmit}\n                        onUseNewAddress={this.handleUseNewAddress}\n                        shouldShowSaveAddress={!isGuest}\n                        updateAddress={updateShippingAddress}\n                    />\n                </div>\n            </AddressFormSkeleton>\n        );\n    }\n\n    private handleMultiShippingModeSwitch: () => void = async () => {\n        const {\n            consignments,\n            isMultiShippingMode,\n            onToggleMultiShipping = noop,\n            onUnhandledError = noop,\n            updateShippingAddress,\n        } = this.props;\n\n        if (isMultiShippingMode && consignments.length > 1) {\n            this.setState({ isInitializing: true });\n\n            try {\n                // Collapse all consignments into one\n                await updateShippingAddress(consignments[0].shippingAddress);\n            } catch (error) {\n                onUnhandledError(error);\n            } finally {\n                this.setState({ isInitializing: false });\n            }\n        }\n\n        onToggleMultiShipping();\n    };\n\n    private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\n        billingSameAsShipping,\n        shippingAddress: addressValues,\n        orderComment,\n    }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            updateShippingAddress,\n            updateBillingAddress,\n            navigateNextStep,\n            onUnhandledError,\n            shippingAddress,\n            billingAddress,\n            methodId,\n        } = this.props;\n\n        const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const hasRemoteBilling = this.hasRemoteBilling(methodId);\n\n        if (!isEqualAddress(updatedShippingAddress, shippingAddress) || shippingAddress?.shouldSaveAddress !== updatedShippingAddress?.shouldSaveAddress) {\n            promises.push(updateShippingAddress(updatedShippingAddress || {}));\n        }\n\n        if (\n            billingSameAsShipping &&\n            updatedShippingAddress &&\n            !isEqualAddress(updatedShippingAddress, billingAddress) &&\n            !hasRemoteBilling\n        ) {\n            promises.push(updateBillingAddress(updatedShippingAddress));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep(billingSameAsShipping);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    private hasRemoteBilling: (methodId?: string) => boolean = (methodId) => {\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n\n        return PAYMENT_METHOD_VALID.some((method) => method === methodId);\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string) => void = async (\n        address,\n        itemId,\n    ) => {\n        const { unassignItem, onUnhandledError } = this.props;\n\n        try {\n            await unassignItem({\n                address,\n                lineItems: [\n                    {\n                        quantity: 1,\n                        itemId,\n                    },\n                ],\n            });\n\n            location.href = '/account.php?action=add_shipping_address&from=checkout';\n        } catch (error) {\n            if (error instanceof UnassignItemError) {\n                onUnhandledError(new UnassignItemError(error));\n            }\n        }\n    };\n\n    private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({\n        orderComment,\n    }) => {\n        const { customerMessage, updateCheckout, navigateNextStep, onUnhandledError } = this.props;\n\n        try {\n            if (customerMessage !== orderComment) {\n                await updateCheckout({ customerMessage: orderComment });\n            }\n\n            navigateNextStep(false);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n}\n\nconst deleteConsignmentsSelector = createSelector(\n    ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\n    ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\n    (deleteConsignment, consignments) => async () => {\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        const [{ data }] = await Promise.all(consignments.map(({ id }) => deleteConsignment(id)));\n\n        return data.getShippingAddress();\n    },\n);\n\n// tslint:disable-next-line:cyclomatic-complexity\nexport function mapToShippingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\n    const {\n        data: {\n            getCart,\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getShippingAddress,\n            getBillingAddress,\n            getShippingAddressFields,\n            getShippingCountries,\n        },\n        statuses: {\n            isShippingStepPending,\n            isSelectingShippingOption,\n            isLoadingShippingOptions,\n            isUpdatingConsignment,\n            isCreatingConsignments,\n            isCreatingCustomerAddress,\n            isLoadingShippingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n\n    if (!checkout || !config || !customer || !cart) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments,\n            features,\n            hasMultiShippingEnabled,\n            googleMapsApiKey,\n        },\n    } = config;\n\n    const methodId = getShippingMethodId(checkout, config);\n    const shippableItemsCount = getShippableItemsCount(cart);\n    const isLoading =\n        isLoadingShippingOptions() ||\n        isSelectingShippingOption() ||\n        isUpdatingConsignment() ||\n        isCreatingConsignments() ||\n        isUpdatingBillingAddress() ||\n        isUpdatingCheckout() ||\n        isCreatingCustomerAddress();\n    const shouldShowMultiShipping =\n        hasMultiShippingEnabled && !methodId && shippableItemsCount > 1;\n    const isNewMultiShippingUIEnabled =\n        isExperimentEnabled(\n            config.checkoutSettings,\n            'PROJECT-4159.improve_multi_address_shipping_ui',\n        ) \n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ', 'GB'];\n\n    const shippingAddress =\n        !shouldShowMultiShipping && consignments.length > 1 ? undefined : getShippingAddress();\n\n    const providerWithCustomCheckout = getProviderWithCustomCheckout(\n        config.checkoutSettings.providerWithCustomCheckout,\n    );\n\n    return {\n        assignItem: checkoutService.assignItemsToAddress,\n        billingAddress: getBillingAddress(),\n        cart,\n        consignments,\n        countries: getShippingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        createCustomerAddress: checkoutService.createCustomerAddress,\n        deinitializeShippingMethod: checkoutService.deinitializeShipping,\n        deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\n        getFields: getShippingAddressFields,\n        googleMapsApiKey,\n        initializeShippingMethod: checkoutService.initializeShipping,\n        isGuest: customer.isGuest,\n        isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\n        isLoading,\n        isShippingStepPending: isShippingStepPending(),\n        loadShippingAddressFields: checkoutService.loadShippingAddressFields,\n        loadBillingAddressFields: checkoutService.loadBillingAddressFields,\n        loadShippingOptions: checkoutService.loadShippingOptions,\n        methodId,\n        providerWithCustomCheckout,\n        shippingAddress,\n        shouldRenderWhileLoading: features['CHECKOUT-8300.improve_extension_performance'] ?? true,\n        shouldShowMultiShipping,\n        isNewMultiShippingUIEnabled,\n        shouldShowOrderComments: enableOrderComments,\n        signOut: checkoutService.signOutCustomer,\n        unassignItem: checkoutService.unassignItemsToAddress,\n        updateBillingAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        updateShippingAddress: checkoutService.updateShippingAddress,\n        isFloatingLabelEnabled: isFloatingLabelEnabled(config.checkoutSettings),\n        shouldRenderStripeForm: providerWithCustomCheckout === PaymentMethodId.StripeUPE && shouldUseStripeLinkByMinimumAmount(cart),\n    };\n}\n\nexport default withCheckout(mapToShippingProps)(Shipping);\n","import classNames from 'classnames';\nimport React, { ButtonHTMLAttributes, FunctionComponent } from 'react';\n\nexport interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n    isFullWidth?: boolean;\n    isLoading?: boolean;\n    size?: ButtonSize;\n    testId?: string;\n    variant?: ButtonVariant;\n}\n\nexport enum ButtonVariant {\n    Primary = 'primary',\n    Secondary = 'secondary',\n    Action = 'action',\n}\n\nexport enum ButtonSize {\n    Small = 'small',\n    Tiny = 'tiny',\n    Large = 'large',\n}\n\nfunction getClassName(\n    props: Pick<ButtonProps, 'className' | 'isFullWidth' | 'isLoading' | 'size' | 'variant'>,\n) {\n    const { className, isFullWidth, isLoading, size, variant } = props;\n\n    return classNames(\n        'button',\n        className,\n        { 'button--primary': variant === ButtonVariant.Primary },\n        { 'button--tertiary': variant === ButtonVariant.Secondary },\n        { 'button--action': variant === ButtonVariant.Action },\n        { 'button--small': size === ButtonSize.Small },\n        { 'button--tiny': size === ButtonSize.Tiny },\n        { 'button--large': size === ButtonSize.Large },\n        { 'button--slab': isFullWidth },\n        {\n            'optimizedCheckout-buttonPrimary':\n                variant === ButtonVariant.Primary || variant === ButtonVariant.Action,\n        },\n        { 'optimizedCheckout-buttonSecondary': variant === ButtonVariant.Secondary },\n        { 'is-loading': isLoading },\n    );\n}\n\nconst Button: FunctionComponent<ButtonProps> = ({\n    children,\n    className,\n    disabled,\n    isFullWidth,\n    isLoading,\n    size,\n    testId,\n    type,\n    variant,\n    ...rest\n}) => (\n    <button\n        {...rest}\n        className={getClassName({ className, isFullWidth, isLoading, size, variant })}\n        data-test={testId}\n        disabled={disabled || isLoading}\n        type={type || 'button'}\n    >\n        {children}\n    </button>\n);\n\nexport default Button;\n"],"names":["data","name","message","getLanguageService","translate","UnassignItemError","prototype","CustomError","getShippingMethodId","checkout","config","SHIPPING_METHOD_IDS","PaymentMethodId","AmazonPay","BraintreeAcceleratedCheckout","PayPalCommerceAcceleratedCheckout","providerWithCustomCheckout","getProviderWithCustomCheckout","checkoutSettings","preselectedPayment","getPreselectedPayment","indexOf","providerId","undefined","SaveAddressForm","withLanguage","withFormik","handleSubmit","values","onSaveAddress","mapPropsToValues","defaultCountryCode","firstName","lastName","address1","address2","customFields","country","countryCode","stateOrProvince","stateOrProvinceCode","postalCode","phone","city","company","shouldSaveAddress","validationSchema","language","getFields","getAddressFormFieldsValidationSchema","formFields","googleMapsApiKey","countriesWithAutocomplete","countries","setFieldValue","isLoading","onRequestClose","isFloatingLabelEnabled","Form","autoComplete","LoadingOverlay","AddressForm","A","shouldShowSaveAddress","className","href","onClick","preventDefault","TranslatedString","id","Button","disabled","type","variant","Primary","isOpen","onAfterOpen","addressFormProps","Modal","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","withFormikExtended","OriginalComponent","DecoratedComponent","props","resetForm","isInitialValueLoaded","previousIsInitialValueLoadedRef","useRef","useEffect","current","displayName","title","AssignItemInvalidAddressError","AssignItemFailedError","findConsignment","consignments","itemId","find","consignment","includes","lineItemIds","getShippableLineItems","cart","reduce","lineItems","physicalItems","result","item","i","addedByPromotion","isNil","parentId","concat","lineItemIndex","splitItems","quantity","key","variantId","productId","splitItem","memo","imageUrl","options","addresses","onSelectAddress","onUseNewAddress","handleUseNewAddress","useCallback","handleSelectAddress","address","alt","src","map","optionName","value","nameId","AddressSelect","selectedAddress","shippingAddress","AddressType","Shipping","getRecommendedShippingOption","availableShippingOptions","ShippingOptionListItem","consignmentId","isMultiShippingMode","selectedShippingOptionId","shippingOption","isSelected","renderLabel","StaticShippingOption","displayAdditionalInformation","method","Extension","region","ChecklistItem","htmlId","label","inputName","shippingOptions","onSelectedOption","handleSelect","length","Checklist","defaultSelectedItemId","onSelect","selectDefaultShippingOptions","this","selectShippingOption","getConsignments","selectedShippingOption","recommendedOption","singleShippingOption","defaultShippingOption","componentDidMount","subscribeToConsignments","unsubscribe","componentDidUpdate","analyticsTracker","shouldShowShippingOptions","showShippingMethods","componentWillUnmount","render","invalidShippingMessage","methodId","renderConsignment","ChecklistSkeleton","additionalClassName","rows","renderNoShippingOptions","role","StaticAddress","StaticConsignmentItemList","PureComponent","withAnalytics","noop","shippingOptionIds","forEach","ShippingOptionsForm","subscribeToConsignmentsSelector","subscribe","subscriber","isLoadingSelector","_","isLoadingShippingOptions","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","isUpdatingAddress","withCheckout","checkoutService","checkoutState","getCart","getConfig","getCustomer","getCheckout","customer","unsortedConsignments","shippableItems","consignmentsOrder","uniq","sortBy","sortConsignments","selectConsignmentShippingOption","cartHasChanged","shouldShowOrderComments","shouldDisableSubmit","Fieldset","legend","Legend","Alert","Error","ShippingOptions","OrderComments","state","items","handleCloseErrorModal","setState","createCustomerAddressError","handleSaveAddress","createCustomerAddress","itemAddingAddress","mapAddressFromFormValues","itemKey","handleCloseAddAddressForm","assignItem","onUnhandledError","isValidAddress","syncItems","hasSelectedShippingOptions","currentItems","updatedItemIndex","cartItemIds","updatedConsignment","isEqualAddress","newId","matchingCartItems","filter","matchingCartItemIds","findNewItemId","updateShippableItems","findIndex","getDerivedStateFromProps","getShippableItemsCount","ErrorModal","error","onClose","shouldShowErrorCode","hasUnassignedLineItems","onSubmit","orderComment","enableReinitialize","MultiShippingForm","setConsignmentRequest","useState","isOpenNewAddressModal","setIsOpenNewAddressModal","setCreateCustomerAddressError","getShippingCountries","isFloatingLabelEnabledFlag","cartLineItems","customItems","consignmentLineItems","lineItemId","addressFormValues","showSingleLineAddress","consignmentNumber","consignmentRequest","useMemo","code","isAddShippingDestination","setIsAddShippingDestination","index","Secondary","onSignIn","onCreateAccount","TranslatedLink","onChange","labelContent","CheckboxFormField","testId","handleFieldValueChange","onFieldChange","initialize","deinitialize","buttonId","customFormFields","shouldShowCustomFormFields","style","padding","size","Tiny","field","DynamicFormField","parentFieldName","AmazonPayShippingAddress","isShippingStepPending","initializeShipping","defaultOptions","editAddressButtonId","amazonpay","addressWithoutLocalization","localizeAddress","paypalFastlaneShippingComponent","paypalCommerceFastlaneOptions","paypalcommercefastlane","onPayPalFastlaneAddressChange","showPayPalFastlaneAddressSelector","showAddressSelector","braintreeFastlaneOptions","braintreefastlane","initializationOptions","hideContentWhenLoading","localizedProvince","localizedCountry","PoweredByPayPalFastlaneLabel","onAddressSelect","PayPalFastlaneShippingAddress","addressFieldName","fieldName","fieldValue","formFieldName","custom","handleChange","handleAutocompleteToggle","inputValue","formAddress","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","unmountContentWhenLoading","onAutocompleteToggle","Component","connectFormik","ShippingAddressForm","hasRequestedShippingOptions","shouldShowPayPalFastlaneShippingForm","usePayPalFastlaneAddress","setSubmitted","useContext","FormContext","SHIPPING_ADDRESS_FIELDS","isResettingAddress","isUpdatingShippingData","isValid","handleFieldChange","Promise","resolve","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","setValues","mapAddressToFormValues","deleteConsignments","debouncedUpdateAddress","debounce","includeShippingOptions","params","include","shippingAutosaveDelay","addressForm","shouldShowBillingSameAsShipping","some","updatedShippingAddress","Array","isArray","isEqual","contextType","billingSameAsShipping","isInitialValid","isValidSync","methodIdsWithoutCustomValidation","Boolean","shouldHaveCustomValidation","formValues","getCustomFormFieldsValidationSchema","SingleShippingForm","customerMessage","isBillingSameAsShipping","isGuest","onMultiShippingSubmit","onSingleShippingSubmit","signOut","isNewMultiShippingUIEnabled","isPayPalFastlaneEnabled","paypalFastlaneAddresses","shippingAddresses","onMultiShippingChange","shouldShowMultiShipping","width","StripeStateMapper","stateList","Object","keys","getStripeState","step","isStripeLoading","isStripeAutoStep","isShippingMethodLoading","isNewAddress","setIsNewAddress","isFirstShippingRender","setIsFirstShippingRender","stripeShippingAddress","setStripeShippingAddress","handleLoading","containerId","availableShippingList","allowedCountries","join","handleStripeShippingAddress","shipping","complete","phoneFieldRequired","line1","line2","postal_code","stepCompleted","isComplete","shippingPopulated","shouldShowContent","names","split","shippingValue","getStylesFromElement","properties","parentContainer","document","getElementById","getAppliedStyles","getStripeStyles","formInput","formLabel","formError","labelText","color","fieldText","fieldPlaceholderText","fieldErrorText","fieldBackground","fieldInnerShadow","fieldBorder","stripeupe","container","onChangeShipping","availableCountries","getStyles","gatewayId","placeholder","StripeShippingForm","stripeLoadedCallback","handleIsAutoStep","shippingFormProps","AddressFormSkeleton","display","handleMultiShippingModeSwitch","onToggleMultiShipping","updateShippingAddress","isInitializing","handleSingleShippingSubmit","addressValues","updateCheckout","updateBillingAddress","navigateNextStep","billingAddress","promises","hasRemoteBilling","push","all","unassignItem","location","handleMultiShippingSubmit","loadShippingAddressFields","loadBillingAddressFields","loadShippingOptions","onReady","initializeShippingMethod","deinitializeShippingMethod","shouldRenderStripeForm","shouldRenderWhileLoading","email","renderWhileLoading","deleteConsignmentsSelector","deleteConsignment","getShippingAddress","mapToShippingProps","getBillingAddress","getShippingAddressFields","isCreatingCustomerAddress","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","enableOrderComments","features","hasMultiShippingEnabled","shippableItemsCount","isExperimentEnabled","assignItemsToAddress","deinitializeShipping","signOutCustomer","unassignItemsToAddress","StripeUPE","shouldUseStripeLinkByMinimumAmount","ButtonVariant","ButtonSize","getClassName","isFullWidth","Action","Small","Large","children","rest"],"sourceRoot":""}