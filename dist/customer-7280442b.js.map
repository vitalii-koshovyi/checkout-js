{"version":3,"file":"customer-7280442b.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/common/utility/parseAnchor.ts","webpack://checkout/./packages/core/src/app/customer/mapCreateAccountFromFormValues.ts","webpack://checkout/./packages/core/src/app/customer/validationPatterns.ts","webpack://checkout/./packages/core/src/app/customer/getEmailValidationSchema.ts","webpack://checkout/./packages/core/src/app/customer/getCreateCustomerValidationSchema.ts","webpack://checkout/./packages/core/src/app/customer/CreateAccountForm.tsx","webpack://checkout/./packages/core/src/app/customer/EmailField.tsx","webpack://checkout/./packages/core/src/app/customer/EmailLoginForm.tsx","webpack://checkout/./packages/core/src/app/privacyPolicy/PrivacyPolicyField.tsx","webpack://checkout/./packages/core/src/app/customer/SubscribeField.tsx","webpack://checkout/./packages/core/src/app/customer/GuestForm.tsx","webpack://checkout/./packages/core/src/app/privacyPolicy/getPrivacyPolicyValidationSchema.ts","webpack://checkout/./packages/core/src/app/ui/icon/IconEye.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconEyeSlash.tsx","webpack://checkout/./packages/core/src/app/customer/PasswordField.tsx","webpack://checkout/./packages/core/src/app/customer/LoginForm.tsx","webpack://checkout/./packages/core/src/app/customer/mapErrorMessage.ts","webpack://checkout/./packages/core/src/app/customer/Customer.tsx","webpack://checkout/./packages/core/src/app/formFields/mapCustomFormFieldsFromFormValues.ts","webpack://checkout/./packages/core/src/app/locale/TranslatedLink.tsx","webpack://checkout/./packages/core/src/app/ui/form/CheckboxFormField.tsx","webpack://checkout/./packages/core/src/app/ui/form/CheckboxInput.tsx","webpack://checkout/./packages/core/src/app/locale/withDate.tsx","webpack://checkout/./packages/core/src/app/ui/form/RadioInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/DynamicInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/MultiCheckboxControl.tsx","webpack://checkout/./packages/core/src/app/ui/form/CheckboxGroupFormField.tsx","webpack://checkout/./packages/core/src/app/ui/form/DynamicFormField.tsx","webpack://checkout/./packages/core/src/app/ui/form/TextArea.tsx"],"sourcesContent":["export default function parseAnchor(text: string): string[] {\n    const div = document.createElement('div');\n    div.innerHTML = text;\n\n    const anchor = div.querySelector('a');\n\n    if (!anchor) {\n        return [];\n    }\n\n    const anchorSiblings = div.innerHTML.split(anchor.outerHTML);\n\n    return [ anchorSiblings[0], anchor.text, anchorSiblings[1] ];\n}\n","import { CustomerAccountRequestBody } from '@bigcommerce/checkout-sdk';\n\nimport { mapCustomFormFieldsFromFormValues } from '../formFields';\n\nimport { CreateAccountFormValues } from './getCreateCustomerValidationSchema';\n\nexport default function mapCreateAccountFromFormValues(\n    { acceptsMarketingEmails, customFields, ...values }: CreateAccountFormValues\n): CustomerAccountRequestBody {\n    return {\n        ...values,\n        acceptsMarketingEmails: acceptsMarketingEmails && acceptsMarketingEmails.length > 0,\n        customFields: mapCustomFormFieldsFromFormValues(customFields),\n    };\n}\n","// NOTE: This is a legacy regex used to create accounts, more flexible than the current used one\n// we need to keep this regex for login validation as accounts might have been created using this regex\nexport const EMAIL_REGEXP = /^[a-z0-9!#$%&'*+/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { object, string, ObjectSchema } from 'yup';\n\nimport { EMAIL_REGEXP } from './validationPatterns';\n\nexport interface EmailValidationSchemaOptions {\n    language: LanguageService;\n}\n\nexport default function getEmailValidationSchema({\n    language,\n}: EmailValidationSchemaOptions): ObjectSchema<{ email: string }> {\n    return object({\n        email: string()\n            .max(256)\n            .matches(EMAIL_REGEXP, language.translate('customer.email_invalid_error'))\n            .required(language.translate('customer.email_required_error')),\n    });\n}\n","import { FormField, LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, string, ObjectSchema } from 'yup';\n\nimport { getCustomFormFieldsValidationSchema, CustomFormFieldValues, TranslateValidationErrorFunction } from '../formFields';\n\nimport getEmailValidationSchema from './getEmailValidationSchema';\nimport { PasswordRequirements } from './getPasswordRequirements';\n\nexport type CreateAccountFormValues = {\n    firstName: string;\n    lastName: string;\n    email: string;\n    password: string;\n    acceptsMarketingEmails?: string[];\n    token?: string;\n} & CustomFormFieldValues;\n\nexport interface CreateCustomerValidationSchema {\n    formFields: FormField[];\n    language: LanguageService;\n    passwordRequirements: PasswordRequirements;\n}\n\nfunction getTranslateCreateCustomerError(language?: LanguageService): TranslateValidationErrorFunction {\n    return (type, { label, min, max }) => {\n        if (!language) {\n            return;\n        }\n\n        if (type === 'required') {\n            return language.translate('customer.required_error', { label });\n        }\n\n        if (type === 'max' && max) {\n            return language.translate('customer.max_error', { label, max });\n        }\n\n        if (type === 'min' && min) {\n            return language.translate('customer.min_error', { label, min });\n        }\n\n        if (type === 'invalid') {\n            return language.translate('customer.invalid_characters_error', { label });\n        }\n\n        return;\n    };\n}\n\nexport default memoize(function getCreateCustomerValidationSchema({\n    formFields,\n    language,\n    passwordRequirements: { description, numeric, alpha, minLength },\n}: CreateCustomerValidationSchema): ObjectSchema<CreateAccountFormValues> {\n    return object({\n            firstName: string().required(language.translate('address.first_name_required_error')),\n            lastName: string().required(language.translate('address.last_name_required_error')),\n            password: string()\n                .required(language.translate('customer.password_required_error') || description)\n                .matches(numeric, language.translate('customer.password_number_required_error') || description)\n                .matches(alpha, language.translate('customer.password_letter_required_error') || description)\n                .min(minLength, language.translate('customer.password_under_minimum_length_error' || description))\n                .max(100, language.translate('customer.password_over_maximum_length_error')),\n        })\n        .concat(getEmailValidationSchema({ language }))\n        .concat(getCustomFormFieldsValidationSchema({\n            formFields,\n            translate: getTranslateCreateCustomerError(language),\n        }));\n});\n","import { FormField } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { useMemo, FunctionComponent } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { isRequestError } from '../common/error';\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { DynamicFormField, Fieldset, Form } from '../ui/form';\n\nimport getCreateCustomerValidationSchema, { CreateAccountFormValues } from './getCreateCustomerValidationSchema';\nimport getPasswordRequirements from './getPasswordRequirements';\nimport './CreateAccountForm.scss';\n\nexport interface CreateAccountFormProps {\n    formFields: FormField[];\n    createAccountError?: Error;\n    isCreatingAccount?: boolean;\n    requiresMarketingConsent: boolean;\n    onCancel?(): void;\n    onSubmit?(values: CreateAccountFormValues): void;\n}\n\nconst CreateAccountForm: FunctionComponent<CreateAccountFormProps & WithLanguageProps & FormikProps<CreateAccountFormValues>> = ({\n    formFields,\n    createAccountError,\n    isCreatingAccount,\n    onCancel,\n}) => {\n    const createAccountErrorMessage = useMemo(() => {\n        if (!createAccountError) {\n            return;\n        }\n\n        if (isRequestError(createAccountError) && createAccountError.status === 409) {\n            const splitMessage = createAccountError.message.split(':');\n\n            if (splitMessage.length > 1) {\n                return <TranslatedString\n                    data={ { email:  splitMessage[1].trim() } }\n                    id=\"customer.email_in_use_text\"\n                />;\n            }\n\n            return <TranslatedString id=\"customer.unknown_email_in_use_text\" />;\n        }\n\n        return createAccountError.message;\n    }, [createAccountError]);\n\n    return (<>\n        <Form\n            className=\"checkout-form\"\n            id=\"checkout-customer-returning\"\n            testId=\"checkout-customer-returning\"\n        >\n            <Fieldset>\n                { createAccountErrorMessage && <Alert\n                    type={ AlertType.Error }\n                >\n                    { createAccountErrorMessage }\n                </Alert> }\n                <div className=\"create-account-form\">\n                    { formFields.map(field => (\n                        <DynamicFormField\n                            autocomplete={ field.name }\n                            extraClass={ `dynamic-form-field--${field.name}` }\n                            field={ field }\n                            key={ field.id }\n                            parentFieldName={ field.custom ? 'customFields'  : undefined }\n                        />\n                    )) }\n                </div>\n            </Fieldset>\n\n           <div className=\"form-actions\">\n                <Button\n                    disabled={ isCreatingAccount }\n                    id=\"checkout-customer-create\"\n                    testId=\"customer-continue-create\"\n                    type=\"submit\"\n                    variant={ ButtonVariant.Primary }\n                >\n                    <TranslatedString id=\"customer.create_account_action\" />\n                </Button>\n\n                <a\n                    className=\"button optimizedCheckout-buttonSecondary\"\n                    data-test=\"customer-cancel-button\"\n                    href=\"#\"\n                    id=\"checkout-customer-cancel\"\n                    onClick={ preventDefault(onCancel) }\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </a>\n            </div>\n        </Form>\n    </>);\n};\n\nexport default withLanguage(withFormik<CreateAccountFormProps & WithLanguageProps, CreateAccountFormValues>({\n    handleSubmit: (values, { props: { onSubmit = noop } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({requiresMarketingConsent}) => ({\n        firstName: '',\n        lastName: '',\n        email: '',\n        password: '',\n        customFields: {},\n        acceptsMarketingEmails: requiresMarketingConsent ? [] : ['0'],\n    }),\n    validationSchema: ({\n        language,\n        formFields,\n    }: CreateAccountFormProps & WithLanguageProps) => {\n        const passwordRequirements = formFields.find(({ requirements }) => requirements)?.requirements;\n\n        if (!passwordRequirements) {\n            throw new Error('Password requirements missing');\n        }\n\n        const schema = getCreateCustomerValidationSchema({\n            language,\n            formFields,\n            passwordRequirements: getPasswordRequirements(passwordRequirements),\n        });\n\n        return schema;\n    },\n})(CreateAccountForm));\n","import { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { FormField, TextInput } from '../ui/form';\n\nexport interface EmailFieldProps {\n    onChange?(value: string): void;\n}\n\nconst EmailField: FunctionComponent<EmailFieldProps>  = ({\n    onChange,\n}) => {\n    const renderInput = useCallback((props: FieldProps) => (\n        <TextInput\n            { ...props.field }\n            autoComplete={ props.field.name }\n            id={ props.field.name }\n            type=\"email\"\n        />\n    ), []);\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"customer.email_label\" />\n    ), []);\n\n    return <FormField\n        input={ renderInput }\n        labelContent={ labelContent }\n        name=\"email\"\n        onChange={ onChange }\n    />;\n};\n\nexport default memo(EmailField);\n","import { SignInEmail } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { memo, useMemo, FunctionComponent } from 'react';\n\nimport { withLanguage, TranslatedHtml, TranslatedLink, TranslatedString, WithLanguageProps } from '../locale';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { LoadingSpinner } from '../ui/loading';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport getEmailValidationSchema from './getEmailValidationSchema';\nimport EmailField from './EmailField';\n\nexport interface EmailLoginFormProps {\n    email?: string;\n    isOpen: boolean;\n    isSendingEmail?: boolean;\n    emailHasBeenRequested?: boolean;\n    sentEmail?: SignInEmail;\n    sentEmailError?: any;\n    onRequestClose?(): void;\n    onSendLoginEmail?(values: EmailLoginFormValues): void;\n}\n\nexport interface EmailLoginFormValues {\n    email: string;\n}\n\nconst EmailLoginForm: FunctionComponent<EmailLoginFormProps & WithLanguageProps & FormikProps<EmailLoginFormValues>> = ({\n    email,\n    isOpen,\n    isSendingEmail = false,\n    emailHasBeenRequested,\n    onRequestClose = noop,\n    sentEmailError,\n    sentEmail,\n    submitForm,\n    values: {\n        email: formEmail,\n    },\n}) => {\n    const modalHeaderStringId = useMemo(() => {\n        if (emailHasBeenRequested) {\n            if (sentEmailError) {\n                return 'common.error_heading';\n            }\n\n            return 'login_email.sent_header';\n        }\n\n        if (email) {\n            return 'login_email.header_with_email';\n        }\n\n        return 'login_email.header';\n    }, [emailHasBeenRequested, sentEmailError, email]);\n\n    const okButton = useMemo(() => (\n        <div className=\"modal-footer\">\n            <Button onClick={ onRequestClose }>\n                <TranslatedString id=\"common.ok_action\" />\n            </Button>\n        </div>\n    ), [onRequestClose]);\n\n    const footer = useMemo(() => {\n        if (sentEmailError && sentEmailError.status === 429) {\n            return okButton;\n        }\n\n        if (emailHasBeenRequested && !sentEmailError) {\n            if (isSendingEmail) {\n                return <LoadingSpinner isLoading />;\n            }\n\n            if (sentEmail && sentEmail.sent_email === 'reset_password') {\n                return okButton;\n            }\n\n            return (\n                <p>\n                    <TranslatedLink\n                        id=\"login_email.resend_link\"\n                        onClick={ submitForm }\n                    />\n                    <TranslatedLink\n                        id=\"login_email.use_password_link\"\n                        onClick={ onRequestClose }\n                    />\n                </p>\n            );\n        }\n\n        return (\n            <div className=\"modal-footer\">\n                <Button\n                    className=\"optimizedCheckout-buttonSecondary\"\n                    onClick={ onRequestClose }\n                    type=\"button\"\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </Button>\n                <Button\n                    isLoading={ isSendingEmail }\n                    type=\"submit\"\n                    variant={ ButtonVariant.Primary }\n                >\n                    <TranslatedString id=\"login_email.send\" />\n                </Button>\n            </div>\n        );\n    }, [\n        sentEmailError,\n        emailHasBeenRequested,\n        okButton,\n        submitForm,\n        isSendingEmail,\n        onRequestClose,\n        sentEmail,\n    ]);\n\n    const error = useMemo(() => {\n        if (!sentEmailError) {\n            return null;\n        }\n\n        const { status } = sentEmailError;\n\n        return (\n            <Alert type={ AlertType.Error }>\n                { status === 429 ?\n                    <TranslatedString id=\"login_email.error_temporary_disabled\" /> :\n                    <TranslatedString id={ status === 404 ?\n                        'login_email.error_not_found' :\n                        'login_email.error_server' }\n                    /> }\n            </Alert>\n        );\n    }, [sentEmailError]);\n\n    const form = useMemo(() => {\n        if (sentEmailError && sentEmailError.status === 429) {\n            return null;\n        }\n\n        if (emailHasBeenRequested && sentEmail && !sentEmailError) {\n            const { expiry, sent_email } = sentEmail;\n\n            return (\n                <p>\n                    <TranslatedHtml\n                        data={ {\n                            email: formEmail,\n                            minutes: Math.round(expiry / 60),\n                        } }\n                        id={ sent_email === 'sign_in' ?\n                            'login_email.sent_text' :\n                            'customer.reset_password_before_login_error' }\n                    />\n                </p>\n            );\n        }\n\n        if (emailHasBeenRequested && !sentEmail) {\n            return <EmailField />;\n        }\n\n        return (<>\n            <p>\n                <TranslatedString id=\"login_email.text\" />\n            </p>\n            <EmailField />\n        </>);\n    }, [sentEmailError, emailHasBeenRequested, sentEmail, formEmail]);\n\n    return (\n        <Modal\n            additionalBodyClassName=\"modal--withText\"\n            additionalModalClassName=\"modal--medium\"\n            header={\n                <ModalHeader>\n                    <TranslatedString id={ modalHeaderStringId } />\n                </ModalHeader>\n            }\n            isOpen={ isOpen }\n            onRequestClose={ onRequestClose }\n            shouldShowCloseButton={ true }\n        >\n            <Form>\n                <LoadingSpinner isLoading={ isSendingEmail && !email } />\n                { error }\n                { form }\n                { footer }\n            </Form>\n        </Modal>);\n};\n\nexport default withLanguage(withFormik<EmailLoginFormProps & WithLanguageProps, EmailLoginFormValues>({\n    mapPropsToValues: ({\n        email = '',\n    }) => ({\n        email,\n    }),\n    handleSubmit: (values, { props: { onSendLoginEmail = noop } }) => {\n        onSendLoginEmail(values);\n    },\n    validationSchema: ({ language }: WithLanguageProps) => getEmailValidationSchema({ language }),\n})(memo(EmailLoginForm)));\n","import React, { memo, FunctionComponent } from 'react';\n\nimport { TranslatedHtml } from '../locale';\nimport { CheckboxFormField, Fieldset } from '../ui/form';\n\nconst PrivacyPolicyCheckboxFieldLink: FunctionComponent<{ url: string }> = ({\n    url,\n}) => (\n    <CheckboxFormField\n        labelContent={ <TranslatedHtml data={ { url } } id=\"privacy_policy.label\" /> }\n        name=\"privacyPolicy\"\n    />\n);\n\nconst PrivacyPolicyFieldset: FunctionComponent<{ url: string }> = ({\n    url,\n}) => (\n    <Fieldset additionalClassName=\"checkout-privacy-policy\">\n        <PrivacyPolicyCheckboxFieldLink url={ url } />\n    </Fieldset>\n);\n\nexport default memo(PrivacyPolicyFieldset);\n","import { FieldProps } from 'formik';\nimport React, { memo, Fragment, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { Input, Label } from '../ui/form';\n\nexport type SubscribeFieldProps = FieldProps<boolean> & {\n    requiresMarketingConsent: boolean;\n};\n\nconst SubscribeField: FunctionComponent<SubscribeFieldProps> = ({ field, requiresMarketingConsent }) => (\n    <Fragment>\n        <Input\n            { ...field }\n            checked={ field.value }\n            className=\"form-checkbox\"\n            id={ field.name }\n            type=\"checkbox\"\n        />\n\n        <Label htmlFor={ field.name }>\n            <TranslatedString id={ requiresMarketingConsent ?\n                'customer.guest_marketing_consent' :\n                'customer.guest_subscribe_to_newsletter_text' }\n            />\n        </Label>\n    </Fragment>\n);\n\nexport default memo(SubscribeField);\n","import { withFormik, FieldProps, FormikProps } from 'formik';\nimport React, { memo, useCallback, FunctionComponent, ReactNode } from 'react';\nimport { object, string } from 'yup';\n\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\nimport { getPrivacyPolicyValidationSchema, PrivacyPolicyField } from '../privacyPolicy';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { BasicFormField, Fieldset, Form, Legend  } from '../ui/form';\n\nimport EmailField from './EmailField';\nimport SubscribeField from './SubscribeField';\n\nexport interface GuestFormProps {\n    canSubscribe: boolean;\n    checkoutButtons?: ReactNode;\n    continueAsGuestButtonLabelId: string;\n    requiresMarketingConsent: boolean;\n    defaultShouldSubscribe: boolean;\n    email?: string;\n    isLoading: boolean;\n    privacyPolicyUrl?: string;\n    onChangeEmail(email: string): void;\n    onContinueAsGuest(data: GuestFormValues): void;\n    onShowLogin(): void;\n}\n\nexport interface GuestFormValues {\n    email: string;\n    shouldSubscribe: boolean;\n}\n\nconst GuestForm: FunctionComponent<GuestFormProps & WithLanguageProps & FormikProps<GuestFormValues>> = ({\n    canSubscribe,\n    checkoutButtons,\n    continueAsGuestButtonLabelId,\n    isLoading,\n    onChangeEmail,\n    onShowLogin,\n    privacyPolicyUrl,\n    requiresMarketingConsent,\n}) => {\n    const renderField = useCallback((fieldProps: FieldProps<boolean>) => (\n        <SubscribeField\n            { ...fieldProps }\n            requiresMarketingConsent={ requiresMarketingConsent }\n        />\n    ), [\n        requiresMarketingConsent,\n    ]);\n\n    return (\n        <Form\n            className=\"checkout-form\"\n            id=\"checkout-customer-guest\"\n            testId=\"checkout-customer-guest\"\n        >\n            <Fieldset\n                legend={\n                    <Legend hidden>\n                        <TranslatedString id=\"customer.guest_customer_text\" />\n                    </Legend>\n                }\n            >\n                <div className=\"customerEmail-container\">\n                    <div className=\"customerEmail-body\">\n                        <EmailField onChange={ onChangeEmail } />\n\n                        { (canSubscribe || requiresMarketingConsent) && <BasicFormField\n                            name=\"shouldSubscribe\"\n                            render={ renderField }\n                        /> }\n\n                        { privacyPolicyUrl && <PrivacyPolicyField\n                            url={ privacyPolicyUrl }\n                        /> }\n                    </div>\n\n                    <div className=\"form-actions customerEmail-action\">\n                        <Button\n                            className=\"customerEmail-button\"\n                            id=\"checkout-customer-continue\"\n                            isLoading={ isLoading }\n                            testId=\"customer-continue-as-guest-button\"\n                            type=\"submit\"\n                            variant={ ButtonVariant.Primary }\n                        >\n                            <TranslatedString id={ continueAsGuestButtonLabelId } />\n                        </Button>\n                    </div>\n                </div>\n\n                {\n                    !isLoading && <p>\n                        <TranslatedString id=\"customer.login_text\" />\n                        { ' ' }\n                        <a\n                            data-test=\"customer-continue-button\"\n                            id=\"checkout-customer-login\"\n                            onClick={ onShowLogin }\n                        >\n                            <TranslatedString id=\"customer.login_action\" />\n                        </a>\n                    </p>\n                }\n\n                { checkoutButtons }\n            </Fieldset>\n        </Form>\n    );\n};\n\nexport default withLanguage(withFormik<GuestFormProps & WithLanguageProps, GuestFormValues>({\n    mapPropsToValues: ({\n        email = '',\n        defaultShouldSubscribe = false,\n        requiresMarketingConsent,\n    }) => ({\n        email,\n        shouldSubscribe: requiresMarketingConsent ? false : defaultShouldSubscribe,\n        privacyPolicy: false,\n    }),\n    handleSubmit: (values, { props: { onContinueAsGuest } }) => {\n        onContinueAsGuest(values);\n    },\n    validationSchema: ({ language, privacyPolicyUrl }: GuestFormProps & WithLanguageProps) => {\n        const email = string()\n            .email(language.translate('customer.email_invalid_error'))\n            .max(256)\n            .required(language.translate('customer.email_required_error'));\n\n        const baseSchema = object({ email });\n\n        if (privacyPolicyUrl) {\n            return baseSchema.concat(getPrivacyPolicyValidationSchema({\n                isRequired: !!privacyPolicyUrl,\n                language,\n            }));\n        }\n\n        return baseSchema;\n    },\n})(memo(GuestForm)));\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { boolean, object, BooleanSchema, ObjectSchema } from 'yup';\n\nexport interface PrivacyPolicyValidatonSchemaProps {\n    isRequired: boolean;\n    language: LanguageService;\n}\n\nexport default function getPrivacyPolicyValidationSchema({\n    isRequired,\n    language,\n}: PrivacyPolicyValidatonSchemaProps): ObjectSchema<{ privacyPolicy?: boolean }> {\n    const schemaFields: {\n        privacyPolicy?: BooleanSchema;\n    } = {};\n\n    if (isRequired) {\n        schemaFields.privacyPolicy = boolean()\n            .oneOf([true], language.translate('privacy_policy.required_error'));\n    }\n\n    return object(schemaFields);\n}\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconEye: FunctionComponent = () => (\n    <svg\n        viewBox=\"0 0 576 512\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path d=\"M288 144a110.94 110.94 0 0 0-31.24 5 55.4 55.4 0 0 1 7.24 27 56 56 0 0 1-56 56 55.4 55.4 0 0 1-27-7.24A111.71 111.71 0 1 0 288 144zm284.52 97.4C518.29 135.59 410.93 64 288 64S57.68 135.64 3.48 241.41a32.35 32.35 0 0 0 0 29.19C57.71 376.41 165.07 448 288 448s230.32-71.64 284.52-177.41a32.35 32.35 0 0 0 0-29.19zM288 400c-98.65 0-189.09-55-237.93-144C98.91 167 189.34 112 288 112s189.09 55 237.93 144C477.1 345 386.66 400 288 400z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconEye);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconEyeSlash: FunctionComponent = () => (\n    <svg\n        viewBox=\"0 0 640 512\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path d=\"M634 471L36 3.51A16 16 0 0 0 13.51 6l-10 12.49A16 16 0 0 0 6 41l598 467.49a16 16 0 0 0 22.49-2.49l10-12.49A16 16 0 0 0 634 471zM296.79 146.47l134.79 105.38C429.36 191.91 380.48 144 320 144a112.26 112.26 0 0 0-23.21 2.47zm46.42 219.07L208.42 260.16C210.65 320.09 259.53 368 320 368a113 113 0 0 0 23.21-2.46zM320 112c98.65 0 189.09 55 237.93 144a285.53 285.53 0 0 1-44 60.2l37.74 29.5a333.7 333.7 0 0 0 52.9-75.11 32.35 32.35 0 0 0 0-29.19C550.29 135.59 442.93 64 320 64c-36.7 0-71.71 7-104.63 18.81l46.41 36.29c18.94-4.3 38.34-7.1 58.22-7.1zm0 288c-98.65 0-189.08-55-237.93-144a285.47 285.47 0 0 1 44.05-60.19l-37.74-29.5a333.6 333.6 0 0 0-52.89 75.1 32.35 32.35 0 0 0 0 29.19C89.72 376.41 197.08 448 320 448c36.7 0 71.71-7.05 104.63-18.81l-46.41-36.28C359.28 397.2 339.89 400 320 400z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconEyeSlash);\n","import { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { FormField, TextInput } from '../ui/form';\nimport { IconEye, IconEyeSlash } from '../ui/icon';\nimport { Toggle } from '../ui/toggle';\n\nconst PasswordField: FunctionComponent = () => {\n    const renderInput = useCallback((props: FieldProps) => (\n        <Toggle openByDefault={ false }>\n            { ({ isOpen, toggle }) => (\n                <div className=\"form-field-password\">\n                    <TextInput\n                        { ...props.field }\n                        additionalClassName=\"form-input--withIcon\"\n                        id={ props.field.name }\n                        type={ isOpen ? 'text' : 'password' }\n                    />\n                    <a className=\"form-toggle-password form-input-icon\" href=\"#\" onClick={ toggle }>\n                        { isOpen ? <IconEye /> : <IconEyeSlash /> }\n                    </a>\n                </div>\n            ) }\n        </Toggle>\n    ), []);\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id={ 'customer.password_label' } />\n    ), []);\n\n    return <FormField\n        input={ renderInput }\n        labelContent={ labelContent }\n        name=\"password\"\n    />;\n};\n\nexport default memo(PasswordField);\n","import { withFormik, FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\nimport { object, string } from 'yup';\n\nimport { preventDefault } from '../common/dom';\nimport { withLanguage, TranslatedHtml, TranslatedLink, TranslatedString, WithLanguageProps } from '../locale';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form, Legend } from '../ui/form';\n\nimport getEmailValidationSchema from './getEmailValidationSchema';\nimport mapErrorMessage from './mapErrorMessage';\nimport CustomerViewType from './CustomerViewType';\nimport EmailField from './EmailField';\nimport PasswordField from './PasswordField';\n\nexport interface LoginFormProps {\n    canCancel?: boolean;\n    continueAsGuestButtonLabelId: string;\n    email?: string;\n    forgotPasswordUrl: string;\n    isSignInEmailEnabled?: boolean;\n    isSendingSignInEmail?: boolean;\n    isSigningIn?: boolean;\n    signInError?: Error;\n    signInEmailError?: Error;\n    viewType?: Omit<CustomerViewType, 'guest'>;\n    passwordlessLogin?: boolean;\n    shouldShowCreateAccountLink?: boolean;\n    onCancel?(): void;\n    onCreateAccount?(): void;\n    onChangeEmail?(email: string): void;\n    onSignIn(data: LoginFormValues): void;\n    onSendLoginEmail?(): void;\n    onContinueAsGuest?(): void;\n}\n\nexport interface LoginFormValues {\n    email: string;\n    password: string;\n}\n\nconst LoginForm: FunctionComponent<LoginFormProps & WithLanguageProps & FormikProps<LoginFormValues>> = ({\n    canCancel,\n    continueAsGuestButtonLabelId,\n    forgotPasswordUrl,\n    email,\n    isSignInEmailEnabled,\n    isSigningIn,\n    language,\n    onCancel = noop,\n    onChangeEmail,\n    onContinueAsGuest,\n    onCreateAccount = noop,\n    onSendLoginEmail = noop,\n    signInError,\n    shouldShowCreateAccountLink,\n    viewType = CustomerViewType.Login,\n}) => {\n    const changeEmailLink = useCallback(() => {\n        if (!email) {\n            return null;\n        }\n\n        return (\n            <p className=\"optimizedCheckout-contentSecondary\">\n                <TranslatedLink\n                    data={ { email } }\n                    id=\"customer.guest_could_login_change_email\"\n                    onClick={ onCancel }\n                    testId=\"change-email\"\n                />\n            </p>\n        );\n    }, [email, onCancel]);\n\n    return (\n        <Form\n            className=\"checkout-form\"\n            id=\"checkout-customer-returning\"\n            testId=\"checkout-customer-returning\"\n        >\n            <Fieldset legend={\n                <Legend hidden>\n                    <TranslatedString id=\"customer.returning_customer_text\" />\n                </Legend>\n            }\n            >\n                { signInError && <Alert\n                    testId=\"customer-login-error-message\"\n                    type={ AlertType.Error }\n                >\n                    { mapErrorMessage(signInError, key => language.translate(key)) }\n                </Alert> }\n\n                { viewType === CustomerViewType.SuggestedLogin &&\n                    <Alert type={ AlertType.Info }>\n                        <TranslatedHtml\n                            data={ { email } }\n                            id=\"customer.guest_could_login\"\n                        />\n                    </Alert> }\n\n                { viewType === CustomerViewType.CancellableEnforcedLogin &&\n                    <Alert type={ AlertType.Info }>\n                        <TranslatedHtml\n                            data={ { email } }\n                            id=\"customer.guest_must_login\"\n                        />\n                    </Alert> }\n\n                { viewType === CustomerViewType.EnforcedLogin &&\n                    <Alert type={ AlertType.Error }>\n                        <TranslatedLink\n                            id=\"customer.guest_temporary_disabled\"\n                            onClick={ onCreateAccount }\n                        />\n                    </Alert> }\n\n                { (viewType === CustomerViewType.Login || viewType === CustomerViewType.EnforcedLogin) &&\n                    <EmailField onChange={ onChangeEmail } /> }\n\n                <PasswordField />\n\n                <p className=\"form-legend-container\">\n                    { isSignInEmailEnabled &&\n                        <TranslatedLink\n                            id=\"login_email.link\"\n                            onClick={ onSendLoginEmail }\n                            testId=\"customer-signin-link\"\n                        />\n                    }\n                    { !isSignInEmailEnabled &&\n                        <a\n                            data-test=\"forgot-password-link\"\n                            href={ forgotPasswordUrl }\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\"\n                        >\n                            <TranslatedString id=\"customer.forgot_password_action\" />\n                        </a>\n                    }\n                    { viewType === CustomerViewType.Login && shouldShowCreateAccountLink &&\n                        <TranslatedLink\n                            id=\"customer.create_account_to_continue_text\"\n                            onClick={ onCreateAccount }\n                        />\n                    }\n                </p>\n\n                <div className=\"form-actions\">\n                    <Button\n                        disabled={ isSigningIn }\n                        id=\"checkout-customer-continue\"\n                        testId=\"customer-continue-button\"\n                        type=\"submit\"\n                        variant={ ButtonVariant.Primary }\n                    >\n                        <TranslatedString id=\"customer.sign_in_action\" />\n                    </Button>\n\n                    { viewType === CustomerViewType.SuggestedLogin && <a\n                        className=\"button optimizedCheckout-buttonSecondary\"\n                        data-test=\"customer-guest-continue\"\n                        href=\"#\"\n                        id=\"checkout-guest-continue\"\n                        onClick={ preventDefault(onContinueAsGuest) }\n                    >\n                        <TranslatedString id={ continueAsGuestButtonLabelId } />\n                    </a> }\n\n                    { canCancel &&\n                        viewType !== CustomerViewType.EnforcedLogin &&\n                        viewType !== CustomerViewType.SuggestedLogin &&\n                        <a\n                            className=\"button optimizedCheckout-buttonSecondary\"\n                            data-test=\"customer-cancel-button\"\n                            href=\"#\"\n                            id=\"checkout-customer-cancel\"\n                            onClick={ preventDefault(onCancel) }\n                        >\n                            <TranslatedString id={ viewType === CustomerViewType.CancellableEnforcedLogin ?\n                                'login_email.use_another_email' :\n                                'common.cancel_action' }\n                            />\n                        </a> }\n                </div>\n\n                { viewType === CustomerViewType.SuggestedLogin && changeEmailLink() }\n            </Fieldset>\n        </Form>);\n};\n\nexport default withLanguage(withFormik<LoginFormProps & WithLanguageProps, LoginFormValues>({\n    mapPropsToValues: ({\n        email = '',\n    }) => ({\n        email,\n        password: '',\n    }),\n    handleSubmit: (values, { props: { onSignIn } }) => {\n        onSignIn(values);\n    },\n    validationSchema: ({ language }: LoginFormProps & WithLanguageProps) =>\n        getEmailValidationSchema({ language }).concat(object({\n            password: string()\n                .required(language.translate('customer.password_required_error')),\n        })),\n})(memo(LoginForm)));\n","export default function mapErrorMessage(\n    error: any, // TODO: Export `RequestError`\n    translate: (key: string) => string\n): string {\n    const type = error.body && error.body.type;\n\n    switch (type) {\n    case 'throttled_login':\n        return translate('customer.sign_in_throttled_error');\n\n    case 'reset_password_before_login':\n        return translate('customer.reset_password_before_login_error');\n\n    default:\n        return translate('customer.sign_in_error');\n    }\n}\n","import { CheckoutSelectors, CustomerAccountRequestBody, CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, ExecutePaymentMethodCheckoutOptions, FormField, GuestCredentials, SignInEmail, StoreConfig } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { withCheckout, CheckoutContextProps } from '../checkout';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { CreateAccountFormValues } from './getCreateCustomerValidationSchema';\nimport mapCreateAccountFromFormValues from './mapCreateAccountFromFormValues';\nimport CheckoutButtonList from './CheckoutButtonList';\nimport CreateAccountForm from './CreateAccountForm';\nimport CustomerViewType from './CustomerViewType';\nimport EmailLoginForm, { EmailLoginFormValues } from './EmailLoginForm';\nimport GuestForm, { GuestFormValues } from './GuestForm';\nimport LoginForm from './LoginForm';\n\nexport interface CustomerProps {\n    viewType: CustomerViewType;\n    isEmbedded?: boolean;\n    checkEmbeddedSupport?(methodIds: string[]): void;\n    onChangeViewType?(viewType: CustomerViewType): void;\n    onAccountCreated?(): void;\n    onContinueAsGuest?(): void;\n    onContinueAsGuestError?(error: Error): void;\n    onReady?(): void;\n    onSignIn?(): void;\n    onSignInError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\nexport interface WithCheckoutCustomerProps {\n    canSubscribe: boolean;\n    customerAccountFields: FormField[];\n    checkoutButtonIds: string[];\n    defaultShouldSubscribe: boolean;\n    email?: string;\n    firstName?: string;\n    forgotPasswordUrl: string;\n    isContinuingAsGuest: boolean;\n    isCreatingAccount: boolean;\n    isExecutingPaymentMethodCheckout: boolean;\n    isGuestEnabled: boolean;\n    isInitializing: boolean;\n    isSendingSignInEmail: boolean;\n    isSignInEmailEnabled: boolean;\n    isSigningIn: boolean;\n    privacyPolicyUrl?: string;\n    providerWithCustomCheckout?: string;\n    requiresMarketingConsent: boolean;\n    signInEmail?: SignInEmail;\n    signInEmailError?: Error;\n    isAccountCreationEnabled: boolean;\n    createAccountError?: Error;\n    signInError?: Error;\n    clearError(error: Error): Promise<CheckoutSelectors>;\n    continueAsGuest(credentials: GuestCredentials): Promise<CheckoutSelectors>;\n    deinitializeCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    executePaymentMethodCheckout(options: ExecutePaymentMethodCheckoutOptions): Promise<CheckoutSelectors>;\n    initializeCustomer(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    sendLoginEmail(params: { email: string }): Promise<CheckoutSelectors>;\n    signIn(credentials: CustomerCredentials): Promise<CheckoutSelectors>;\n    createAccount(values: CustomerAccountRequestBody): Promise<CheckoutSelectors>;\n}\n\nexport interface CustomerState {\n    isEmailLoginFormOpen: boolean;\n    isReady: boolean;\n    hasRequestedLoginEmail: boolean;\n}\n\nclass Customer extends Component<CustomerProps & WithCheckoutCustomerProps, CustomerState> {\n    state: CustomerState = {\n        isEmailLoginFormOpen: false,\n        isReady: false,\n        hasRequestedLoginEmail: false,\n    };\n\n    private draftEmail?: string;\n\n    async componentDidMount(): Promise<void> {\n        const {\n            initializeCustomer,\n            email,\n            onReady = noop,\n            onUnhandledError = noop,\n            providerWithCustomCheckout,\n        } = this.props;\n\n        this.draftEmail = email;\n\n        try {\n            await initializeCustomer({ methodId: providerWithCustomCheckout });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n\n        this.setState({ isReady: true });\n\n        onReady();\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializeCustomer = noop,\n            providerWithCustomCheckout,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitializeCustomer({ methodId: providerWithCustomCheckout });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const { viewType } = this.props;\n        const { isEmailLoginFormOpen, isReady } = this.state;\n        const shouldRenderGuestForm = viewType === CustomerViewType.Guest;\n        const shouldRenderCreateAccountForm = viewType === CustomerViewType.CreateAccount;\n        const shouldRenderLoginForm = !shouldRenderGuestForm && !shouldRenderCreateAccountForm;\n\n        return (\n            <LoadingOverlay\n                isLoading={ !isReady }\n                unmountContentWhenLoading\n            >\n                { isEmailLoginFormOpen && this.renderEmailLoginLinkForm() }\n                { shouldRenderLoginForm && this.renderLoginForm() }\n                { shouldRenderGuestForm && this.renderGuestForm() }\n                { shouldRenderCreateAccountForm && this.renderCreateAccountForm() }\n            </LoadingOverlay>\n        );\n    }\n\n    private renderGuestForm(): ReactNode {\n        const {\n            canSubscribe,\n            checkEmbeddedSupport,\n            checkoutButtonIds,\n            defaultShouldSubscribe,\n            deinitializeCustomer,\n            email,\n            initializeCustomer,\n            isContinuingAsGuest = false,\n            isExecutingPaymentMethodCheckout = false,\n            isInitializing = false,\n            privacyPolicyUrl,\n            requiresMarketingConsent,\n            onUnhandledError = noop,\n        } = this.props;\n\n        return (\n            <GuestForm\n                canSubscribe={ canSubscribe }\n                checkoutButtons={\n                    <CheckoutButtonList\n                        checkEmbeddedSupport={ checkEmbeddedSupport }\n                        deinitialize={ deinitializeCustomer }\n                        initialize={ initializeCustomer }\n                        isInitializing={ isInitializing }\n                        methodIds={ checkoutButtonIds }\n                        onError={ onUnhandledError }\n                    />\n                }\n                continueAsGuestButtonLabelId={ 'customer.continue' }\n                defaultShouldSubscribe={ defaultShouldSubscribe }\n                email={ this.draftEmail || email }\n                isLoading={ isContinuingAsGuest || isInitializing || isExecutingPaymentMethodCheckout }\n                onChangeEmail={ this.handleChangeEmail }\n                onContinueAsGuest={ this.handleContinueAsGuest }\n                onShowLogin={ this.handleShowLogin }\n                privacyPolicyUrl={ privacyPolicyUrl }\n                requiresMarketingConsent={ requiresMarketingConsent }\n            />\n        );\n    }\n\n    private renderEmailLoginLinkForm(): ReactNode {\n        const {\n            isEmailLoginFormOpen,\n            hasRequestedLoginEmail,\n        } = this.state;\n\n        const {\n            isSendingSignInEmail,\n            signInEmailError,\n            signInEmail,\n        } = this.props;\n\n        return (\n            <EmailLoginForm\n                email={ this.draftEmail }\n                emailHasBeenRequested={ hasRequestedLoginEmail }\n                isOpen={ isEmailLoginFormOpen }\n                isSendingEmail={ isSendingSignInEmail }\n                onRequestClose={ this.closeEmailLoginFormForm }\n                onSendLoginEmail={ this.handleSendLoginEmail }\n                sentEmail={ signInEmail }\n                sentEmailError={ signInEmailError }\n            />\n        );\n    }\n\n    private closeEmailLoginFormForm: () => void = () => {\n        this.setState({\n            isEmailLoginFormOpen: false,\n            hasRequestedLoginEmail: false,\n        });\n    };\n\n    private renderCreateAccountForm(): ReactNode {\n        const {\n            customerAccountFields,\n            isCreatingAccount,\n            createAccountError,\n            requiresMarketingConsent,\n        } = this.props;\n\n        return (\n            <CreateAccountForm\n                createAccountError={ createAccountError }\n                formFields={ customerAccountFields }\n                isCreatingAccount={ isCreatingAccount }\n                onCancel={ this.handleCancelCreateAccount }\n                onSubmit={ this.handleCreateAccount }\n                requiresMarketingConsent={ requiresMarketingConsent }\n            />\n        );\n    }\n\n    private renderLoginForm(): ReactNode {\n        const {\n            isEmbedded,\n            email,\n            forgotPasswordUrl,\n            isSignInEmailEnabled,\n            isGuestEnabled,\n            isSendingSignInEmail,\n            isSigningIn,\n            isAccountCreationEnabled,\n            providerWithCustomCheckout,\n            signInError,\n            viewType,\n        } = this.props;\n\n        return (\n            <LoginForm\n                canCancel={ isGuestEnabled }\n                continueAsGuestButtonLabelId={ providerWithCustomCheckout ? 'customer.continue' : 'customer.continue_as_guest_action' }\n                email={ this.draftEmail || email }\n                forgotPasswordUrl={ forgotPasswordUrl }\n                isSendingSignInEmail={ isSendingSignInEmail }\n                isSignInEmailEnabled={ isSignInEmailEnabled && !isEmbedded }\n                isSigningIn={ isSigningIn }\n                onCancel={ this.handleCancelSignIn }\n                onChangeEmail={ this.handleChangeEmail }\n                onContinueAsGuest={ this.executePaymentMethodCheckoutOrContinue }\n                onCreateAccount={ this.showCreateAccount }\n                onSendLoginEmail={ this.handleEmailLoginClicked }\n                onSignIn={ this.handleSignIn }\n                shouldShowCreateAccountLink={ isAccountCreationEnabled }\n                signInError={ signInError }\n                viewType={ viewType }\n            />\n        );\n    }\n\n    private handleEmailLoginClicked: () => void = async () => {\n        const { viewType } = this.props;\n\n        try {\n            if (viewType !== CustomerViewType.Login && this.draftEmail) {\n                await this.handleSendLoginEmail({ email: this.draftEmail });\n            }\n        } finally {\n            this.setState({\n                isEmailLoginFormOpen: true,\n            });\n        }\n    };\n\n    private handleSendLoginEmail: (values: EmailLoginFormValues) => Promise<void> = async values => {\n        const {\n            sendLoginEmail,\n        } = this.props;\n\n        try {\n            await sendLoginEmail(values);\n        } finally {\n            this.setState({\n                hasRequestedLoginEmail: true,\n            });\n        }\n    };\n\n    private handleContinueAsGuest: (formValues: GuestFormValues) => Promise<void> = async formValues => {\n        const {\n            canSubscribe,\n            continueAsGuest,\n            onChangeViewType = noop,\n            onContinueAsGuest = noop,\n            onContinueAsGuestError = noop,\n        } = this.props;\n\n        const email = formValues.email.trim();\n        try {\n            const { data } = await continueAsGuest({\n                email,\n                acceptsMarketingNewsletter: canSubscribe && formValues.shouldSubscribe ? true : undefined,\n                acceptsAbandonedCartEmails: formValues.shouldSubscribe ? true : undefined,\n            });\n\n            const customer = data.getCustomer();\n\n            if (customer && customer.shouldEncourageSignIn && customer.isGuest) {\n               return onChangeViewType(CustomerViewType.SuggestedLogin);\n            }\n\n            await this.executePaymentMethodCheckoutOrContinue();\n\n            this.draftEmail = undefined;\n        } catch (error) {\n            if (error.type === 'update_subscriptions' || error.type === 'payment_method_client_invalid') {\n                this.draftEmail = undefined;\n\n                onContinueAsGuest();\n            }\n\n            if (error.status === 429) {\n                return onChangeViewType(CustomerViewType.EnforcedLogin);\n            }\n\n            if (error.status === 403) {\n                return onChangeViewType(CustomerViewType.CancellableEnforcedLogin);\n            }\n\n            onContinueAsGuestError(error);\n        }\n    };\n\n    private handleSignIn: (credentials: CustomerCredentials) => Promise<void> = async credentials => {\n        const {\n            signIn,\n            onSignIn = noop,\n            onSignInError = noop,\n        } = this.props;\n\n        try {\n            await signIn(credentials);\n            onSignIn();\n\n            this.draftEmail = undefined;\n        } catch (error) {\n            onSignInError(error);\n        }\n    };\n\n    private handleCreateAccount: (values: CreateAccountFormValues) => void = async values => {\n        const {\n            createAccount = noop,\n            onAccountCreated = noop,\n        } = this.props;\n\n        await createAccount(mapCreateAccountFromFormValues(values));\n\n        onAccountCreated();\n    };\n\n    private showCreateAccount: () => void = () => {\n        const {\n            onChangeViewType = noop,\n        } = this.props;\n\n        onChangeViewType(CustomerViewType.CreateAccount);\n    };\n\n    private handleCancelCreateAccount: () => void = () => {\n        const {\n            clearError,\n            onChangeViewType = noop,\n            createAccountError,\n        } = this.props;\n\n        if (createAccountError) {\n            clearError(createAccountError);\n        }\n\n        onChangeViewType(CustomerViewType.Login);\n    };\n\n    private handleCancelSignIn: () => void = () => {\n        const {\n            clearError,\n            onChangeViewType = noop,\n            signInError,\n        } = this.props;\n\n        if (signInError) {\n            clearError(signInError);\n        }\n\n        onChangeViewType(CustomerViewType.Guest);\n    };\n\n    private handleChangeEmail: (email: string) => void = email => {\n        this.draftEmail = email;\n    };\n\n    private handleShowLogin: () => void = () => {\n        const { onChangeViewType = noop } = this.props;\n\n        onChangeViewType(CustomerViewType.Login);\n    };\n\n    private executePaymentMethodCheckoutOrContinue: () => void = async () => {\n        const {\n            executePaymentMethodCheckout,\n            onContinueAsGuest = noop,\n            providerWithCustomCheckout,\n        } = this.props;\n\n        if (providerWithCustomCheckout) {\n            await executePaymentMethodCheckout({ methodId: providerWithCustomCheckout, continueWithCheckoutCallback: onContinueAsGuest });\n        } else {\n            onContinueAsGuest();\n        }\n    };\n}\n\nexport function mapToWithCheckoutCustomerProps(\n    { checkoutService, checkoutState }: CheckoutContextProps\n): WithCheckoutCustomerProps | null {\n    const {\n        data: { getBillingAddress, getCustomerAccountFields, getCheckout, getCustomer, getSignInEmail, getConfig },\n        errors: { getSignInError, getSignInEmailError, getCreateCustomerAccountError },\n        statuses: { isContinuingAsGuest, isExecutingPaymentMethodCheckout, isInitializingCustomer, isSigningIn, isSendingSignInEmail, isCreatingCustomerAccount },\n    } = checkoutState;\n\n    const billingAddress = getBillingAddress();\n    const checkout = getCheckout();\n    const customer = getCustomer();\n    const signInEmail = getSignInEmail();\n    const config = getConfig();\n\n    if (!checkout || !config) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            privacyPolicyUrl,\n            requiresMarketingConsent,\n            isSignInEmailEnabled,\n            isAccountCreationEnabled,\n        },\n    } = config as StoreConfig & { checkoutSettings: { isAccountCreationEnabled: boolean } };\n\n    return {\n        customerAccountFields: getCustomerAccountFields(),\n        canSubscribe: config.shopperConfig.showNewsletterSignup,\n        checkoutButtonIds: config.checkoutSettings.remoteCheckoutProviders,\n        clearError: checkoutService.clearError,\n        createAccount: checkoutService.createCustomerAccount,\n        continueAsGuest: checkoutService.continueAsGuest,\n        sendLoginEmail: checkoutService.sendSignInEmail,\n        defaultShouldSubscribe: config.shopperConfig.defaultNewsletterSignup,\n        deinitializeCustomer: checkoutService.deinitializeCustomer,\n        executePaymentMethodCheckout: checkoutService.executePaymentMethodCheckout,\n        email: billingAddress?.email || customer?.email,\n        firstName: customer?.firstName,\n        forgotPasswordUrl: config.links.forgotPasswordLink,\n        initializeCustomer: checkoutService.initializeCustomer,\n        isCreatingAccount: isCreatingCustomerAccount(),\n        createAccountError: getCreateCustomerAccountError(),\n        isContinuingAsGuest: isContinuingAsGuest(),\n        isExecutingPaymentMethodCheckout: isExecutingPaymentMethodCheckout(),\n        isInitializing:  isInitializingCustomer(),\n        isSignInEmailEnabled,\n        isAccountCreationEnabled,\n        isGuestEnabled: config.checkoutSettings.guestCheckoutEnabled,\n        isSigningIn: isSigningIn(),\n        isSendingSignInEmail: isSendingSignInEmail(),\n        signInEmail,\n        signInEmailError: getSignInEmailError(),\n        privacyPolicyUrl,\n        providerWithCustomCheckout: config.checkoutSettings.providerWithCustomCheckout || undefined,\n        requiresMarketingConsent,\n        signIn: checkoutService.signInCustomer,\n        signInError: getSignInError(),\n    };\n}\n\nexport default withCheckout(mapToWithCheckoutCustomerProps)(Customer);\n","import { forIn, isDate, padStart } from 'lodash';\n\nexport default function mapCustomFormFieldsFromFormValues(\n    customFieldsObject: { [id: string]: any }\n): Array<{fieldId: string; fieldValue: string}> {\n    const customFields: Array<{fieldId: string; fieldValue: string}> = [];\n    forIn(customFieldsObject, (value, key) => {\n        let fieldValue: string;\n\n        if (isDate(value)) {\n            const padMonth = padStart((value.getMonth() + 1).toString(), 2, '0');\n            const padDay = padStart((value.getDate()).toString(), 2, '0');\n            fieldValue = `${value.getFullYear()}-${padMonth}-${padDay}`;\n        } else {\n            fieldValue = value;\n        }\n\n        customFields.push({\n            fieldId: key,\n            fieldValue,\n        });\n    });\n\n    return customFields;\n}\n","import React, { FunctionComponent, MouseEventHandler } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { parseAnchor } from '../common/utility';\n\nimport withLanguage, { WithLanguageProps } from './withLanguage';\nimport { TranslatedStringProps } from './TranslatedString';\n\nexport type TranslatedLinkProps = TranslatedStringProps & {\n    testId?: string;\n    onClick: MouseEventHandler;\n};\n\nconst TranslatedLink: FunctionComponent<TranslatedLinkProps & WithLanguageProps> = ({\n    data,\n    id,\n    language,\n    onClick,\n    testId,\n}) => {\n    const translatedString = language.translate(id, data);\n    const parsedString = parseAnchor(translatedString);\n\n    return parsedString.length ?\n        <>\n            { parsedString[0] }\n            <a\n                data-test={ testId }\n                href=\"#\"\n                onClick={ preventDefault(onClick) }\n            >\n                { parsedString[1] }\n            </a>\n            { parsedString[2] }\n        </> :\n        <>{ translatedString }</>;\n};\n\nexport default withLanguage(TranslatedLink);\n","import { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { memo, useCallback, Fragment, FunctionComponent, ReactNode } from 'react';\n\nimport BasicFormField from './BasicFormField';\nimport CheckboxInput from './CheckboxInput';\nimport FormFieldError from './FormFieldError';\n\nexport interface CheckboxFormFieldProps {\n    additionalClassName?: string;\n    disabled?: boolean;\n    name: string;\n    id?: string;\n    labelContent: ReactNode;\n    onChange?(isChecked: boolean): void;\n}\n\nconst CheckboxFormField: FunctionComponent<CheckboxFormFieldProps> = ({\n    additionalClassName,\n    disabled = false,\n    labelContent,\n    onChange,\n    name,\n    id,\n}) => {\n    const renderField = useCallback(({ field }: FieldProps) => (\n        <Fragment>\n            { <CheckboxInput\n                { ...field }\n                checked={ !!field.value }\n                disabled={ disabled }\n                id={ id || field.name }\n                label={ labelContent }\n            /> }\n\n            <FormFieldError\n                errorId={ `${id ?? name}-field-error-message` }\n                name={ name }\n                testId={ `${kebabCase(name)}-field-error-message` }\n            />\n        </Fragment>\n    ), [\n        disabled,\n        id,\n        labelContent,\n        name,\n    ]);\n\n    return <BasicFormField\n        additionalClassName={ additionalClassName }\n        name={ name }\n        onChange={ onChange }\n        render={ renderField }\n    />;\n};\n\nexport default memo(CheckboxFormField);\n","import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface CheckboxInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst CheckboxInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        id,\n        ...rest\n    }: CheckboxInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            className={ classNames(\n                'form-checkbox',\n                'optimizedCheckout-form-checkbox',\n                additionalClassName\n            ) }\n            id={ id }\n            ref={ ref }\n            type=\"checkbox\"\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default CheckboxInput;\n","import { createInjectHoc, InjectHoc } from '../common/hoc';\n\nimport LocaleContext from './LocaleContext';\n\nexport interface WithDateProps {\n    date: {\n        inputFormat: string;\n    };\n}\n\nconst withDate: InjectHoc<WithDateProps> = createInjectHoc(LocaleContext, {\n    displayNamePrefix: 'withDate',\n    pickProps: (value, key) => key === 'date' && !!value,\n});\n\nexport default withDate;\n","import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface RadioInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst RadioInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        value,\n        checked,\n        id,\n        ...rest\n    }: RadioInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            checked={ checked }\n            className={ classNames(\n                'form-radio',\n                'optimizedCheckout-form-radio',\n                additionalClassName\n            ) }\n            id={ id }\n            ref={ ref }\n            type=\"radio\"\n            value={ value }\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default RadioInput;\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { isDate, noop } from 'lodash';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\nimport ReactDatePicker from 'react-datepicker';\n\nimport { withDate, WithDateProps } from '../../locale';\n\nimport CheckboxInput from './CheckboxInput';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport { InputProps } from './Input';\nimport RadioInput from './RadioInput';\nimport TextArea from './TextArea';\nimport TextInput from './TextInput';\n\nexport interface DynamicInputProps extends InputProps {\n    id: string;\n    additionalClassName?: string;\n    value?: string | string[];\n    rows?: number;\n    fieldType?: DynamicFormFieldType;\n    options?: FormFieldItem[];\n}\n\nconst DynamicInput: FunctionComponent<DynamicInputProps & WithDateProps> = ({\n    additionalClassName,\n    date,\n    fieldType,\n    id,\n    name,\n    onChange = noop,\n    options,\n    placeholder,\n    value,\n    ...rest\n}) => {\n    const { inputFormat } = date;\n    const handleDateChange = useCallback((dateValue, event) => onChange({\n        ...event,\n        target: {\n            name,\n            value: dateValue,\n        },\n    }), [\n        onChange,\n        name,\n    ]);\n\n    switch (fieldType) {\n    case DynamicFormFieldType.dropdown:\n        return (\n            <select\n                { ...rest as any }\n                className=\"form-select optimizedCheckout-form-select\"\n                data-test={ `${id}-select` }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                value={ value === null ? '' : value }\n            >\n                { placeholder &&\n                    <option value=\"\">\n                        { placeholder }\n                    </option> }\n                { options && options.map(({ label, value: optionValue }) =>\n                    <option\n                        key={ optionValue }\n                        value={ optionValue }\n                    >\n                        { label }\n                    </option>\n                ) }\n            </select>\n        );\n\n    case DynamicFormFieldType.radio:\n        if (!options || !options.length) {\n            return null;\n        }\n\n        return <>\n            { options.map(({ label, value: optionValue }) =>\n                <RadioInput\n                    { ...rest }\n                    checked={ optionValue === value }\n                    id={ `${id}-${optionValue}` }\n                    key={ optionValue }\n                    label={ label }\n                    name={ name }\n                    onChange={ onChange }\n                    testId={ `${id}-${optionValue}-radio` }\n                    value={ optionValue }\n                />) }\n        </>;\n\n    case DynamicFormFieldType.checkbox:\n        if (!options || !options.length) {\n            return null;\n        }\n\n        return <>\n            { options.map(({ label, value: optionValue }) =>\n                <CheckboxInput\n                    { ...rest }\n                    checked={ Array.isArray(value) ? value.includes(optionValue) : false }\n                    id={ `${id}-${optionValue}` }\n                    key={ optionValue }\n                    label={ label }\n                    name={ name }\n                    onChange={ onChange }\n                    testId={ `${id}-${optionValue}-checkbox` }\n                    value={ optionValue }\n                />) }\n        </>;\n\n    case DynamicFormFieldType.date:\n        return (\n            <ReactDatePicker\n                { ...rest as any }\n                autoComplete=\"off\"\n                // FIXME: we can avoid this by simply using onChangeRaw, but it's not being triggered properly\n                // https://github.com/Hacker0x01/react-datepicker/issues/1357\n                // onChangeRaw={ rest.onChange }\n                calendarClassName=\"optimizedCheckout-contentPrimary\"\n                className=\"form-input optimizedCheckout-form-input\"\n                dateFormat={ inputFormat }\n                maxDate={ rest.max ? new Date(`${rest.max}T00:00:00Z`) : undefined }\n                minDate={ rest.min ? new Date(`${rest.min}T00:00:00Z`) : undefined }\n                name={ name }\n                onChange={ handleDateChange }\n                placeholderText={ inputFormat.toUpperCase() }\n                popperClassName=\"optimizedCheckout-contentPrimary\"\n                selected={ isDate(value) ? value : undefined }\n            />\n        );\n\n    case DynamicFormFieldType.multiline:\n        return (\n            <TextArea\n                { ...rest as any }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                testId={ `${id}-text` }\n                type={ fieldType }\n                value={ value }\n            />\n        );\n\n    default:\n        return (\n            <TextInput\n                { ...rest }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                placeholder={ placeholder }\n                testId={ `${id}-${ fieldType === DynamicFormFieldType.password ?\n                    'password' :\n                    'text' }` }\n                type={ fieldType }\n                value={ value }\n            />\n        );\n    }\n};\n\nexport default memo(withDate(DynamicInput));\n","import React, { memo, useCallback, FunctionComponent, MouseEvent } from 'react';\n\nimport { TranslatedString } from '../../locale';\n\nimport './MultiCheckboxControl.scss';\n\nexport interface MultiCheckboxControlProps {\n    testId?: string;\n    onSelectedAll(): void;\n    onSelectedNone(): void;\n}\n\nconst MultiCheckboxControl: FunctionComponent<MultiCheckboxControlProps> = ({\n    testId,\n    onSelectedAll,\n    onSelectedNone,\n}) => {\n    const handleSelectAllClick = useCallback((event: MouseEvent) => {\n        event.preventDefault();\n        onSelectedAll();\n    }, [onSelectedAll]);\n\n    const handleSelectNoneClick = useCallback((event: MouseEvent) => {\n        event.preventDefault();\n        onSelectedNone();\n    }, [onSelectedNone]);\n\n    return <ul className=\"multiCheckbox--controls\">\n        <li className=\"multiCheckbox--control\">\n            <TranslatedString id=\"address.select\" />\n        </li>\n\n        <li className=\"multiCheckbox--control\">\n            <a\n                data-test={ `${testId}Checkbox-all-button` }\n                href=\"#\"\n                onClick={ handleSelectAllClick }\n            >\n                <TranslatedString id=\"address.select_all\" />\n            </a>\n        </li>\n\n        <li className=\"multiCheckbox--control\">\n            <a\n                data-test={ `${testId}Checkbox-none-button` }\n                href=\"#\"\n                onClick={ handleSelectNoneClick }\n            >\n                <TranslatedString id=\"address.select_none\" />\n            </a>\n        </li>\n    </ul>;\n};\n\nexport default memo(MultiCheckboxControl);\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { getIn, FieldArray, FieldArrayRenderProps } from 'formik';\nimport { difference, kebabCase, noop, pick } from 'lodash';\nimport React, { memo, useCallback, ChangeEvent, FunctionComponent, ReactNode } from 'react';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport FormFieldContainer from './FormFieldContainer';\nimport FormFieldError from './FormFieldError';\nimport MultiCheckboxControl from './MultiCheckboxControl';\n\nexport interface CheckboxGroupFormFieldProps {\n    id: string;\n    label: ReactNode;\n    name: string;\n    options: FormFieldItem[];\n    onChange?(values: string[]): void;\n}\n\ntype MultiCheckboxFormFieldProps = (\n    CheckboxGroupFormFieldProps &\n    Pick<FieldArrayRenderProps, 'push' | 'remove' | 'pop' | 'form'>\n);\n\nconst MultiCheckboxFormField: FunctionComponent<MultiCheckboxFormFieldProps> = ({\n    form: { values, errors },\n    id,\n    label,\n    name,\n    onChange = noop,\n    options,\n    push,\n    remove,\n}) => {\n    const handleSelectAll = useCallback(() => {\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        difference(options.map(({ value }) => value), checkedValues)\n            .forEach(val => push(val));\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        options,\n        push,\n        values,\n    ]);\n\n    const handleSelectNone = useCallback(() => {\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        checkedValues.forEach(() => remove(0));\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        remove,\n        values,\n    ]);\n\n    const handleInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const checkedValues: string[] = getIn(values, name) || [];\n        const { value, checked } = event.target;\n\n        if (checked) {\n            push(value);\n        } else {\n            remove(checkedValues.indexOf(value));\n        }\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        push,\n        remove,\n        values,\n    ]);\n\n    return <FormFieldContainer hasError={ getIn(errors, name) && getIn(errors, name).length }>\n        { label }\n\n        { options.length > 1 && <MultiCheckboxControl\n            onSelectedAll={ handleSelectAll }\n            onSelectedNone={ handleSelectNone }\n            testId={ id }\n        /> }\n\n        <DynamicInput\n            fieldType={ DynamicFormFieldType.checkbox }\n            id={ id }\n            name={ name }\n            onChange={ handleInputChange }\n            options={ options }\n            value={ getIn(values, name) || [] }\n        />\n\n        <FormFieldError\n            errorId={ `${id ?? name}-field-error-message` }\n            name={ name }\n            testId={ `${kebabCase(name)}-field-error-message` }\n        />\n    </FormFieldContainer>;\n};\n\nconst CheckboxGroupFormField: FunctionComponent<CheckboxGroupFormFieldProps> = ({\n    id,\n    label,\n    name,\n    onChange,\n    options,\n}) => {\n    const renderField = useCallback((renderProps: FieldArrayRenderProps) => (\n        <MultiCheckboxFormField\n            id={ id }\n            label={ label }\n            name={ name }\n            onChange={ onChange }\n            options={ options }\n            { ...pick(renderProps, [\n                'form',\n                'pop',\n                'push',\n                'remove',\n            ]) }\n        />\n    ), [\n        id,\n        label,\n        name,\n        onChange,\n        options,\n    ]);\n\n    return <FieldArray\n        name={ name }\n        render={ renderField }\n    />;\n};\n\nexport default memo(CheckboxGroupFormField);\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '../../locale';\n\nimport CheckboxGroupFormField from './CheckboxGroupFormField';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport FormField from './FormField';\nimport Label from './Label';\n\nexport interface DynamicFormFieldOption {\n    code: string;\n    name: string;\n}\n\nexport interface DynamicFormFieldProps {\n    field: FormFieldType;\n    inputId?: string;\n    extraClass?: string;\n    autocomplete?: string;\n    parentFieldName?: string;\n    placeholder?: string;\n    label?: ReactNode;\n    onChange?(value: string | string[]): void;\n}\n\nconst DynamicFormField: FunctionComponent<DynamicFormFieldProps>  = ({\n    field: {\n        fieldType,\n        type,\n        secret,\n        name,\n        label: fieldLabel,\n        required,\n        options,\n        max,\n        min,\n        maxLength,\n    },\n    parentFieldName,\n    onChange,\n    placeholder,\n    inputId,\n    autocomplete,\n    label,\n    extraClass,\n}) => {\n    const fieldInputId = inputId || name;\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelComponent = useMemo(() => (\n        <Label htmlFor={ fieldInputId } id={ `${fieldInputId}-label` }>\n            { label || fieldLabel }\n            { !required &&\n                <>\n                    { ' ' }\n                    <small className=\"optimizedCheckout-contentSecondary\">\n                        <TranslatedString id=\"common.optional_text\" />\n                    </small>\n                </> }\n        </Label>\n    ), [\n        fieldInputId,\n        fieldLabel,\n        required,\n        label,\n    ]);\n\n    const dynamicFormFieldType = useMemo((): DynamicFormFieldType => {\n        if (fieldType === 'text') {\n            if (type === 'integer') {\n                return DynamicFormFieldType.number;\n            }\n\n            return secret ?\n                DynamicFormFieldType.password :\n                DynamicFormFieldType.text;\n        }\n\n        return fieldType as DynamicFormFieldType;\n    }, [fieldType, type, secret]);\n\n    const renderInput = useCallback(({ field }: FieldProps<string>) => (\n        <DynamicInput\n            { ...field }\n            aria-labelledby={ `${fieldInputId}-label ${fieldInputId}-field-error-message` }\n            autoComplete={ autocomplete }\n            fieldType={ dynamicFormFieldType }\n            id={ fieldInputId }\n            max={ max }\n            maxLength={ maxLength || undefined }\n            min={ min }\n            options={ options && options.items }\n            placeholder={ placeholder || (options && options.helperLabel) }\n            rows={ options && (options as any).rows }\n        />\n    ), [\n        fieldInputId,\n        max,\n        maxLength,\n        min,\n        options,\n        placeholder,\n        dynamicFormFieldType,\n        autocomplete,\n    ]);\n\n    return (\n        <div className={ `dynamic-form-field ${extraClass}` }>\n            { fieldType === DynamicFormFieldType.checkbox ?\n                <CheckboxGroupFormField\n                    id={ fieldInputId }\n                    label={ labelComponent }\n                    name={ fieldName }\n                    onChange={ onChange }\n                    options={ (options && options.items) || [] }\n                /> :\n                <FormField\n                    id={ fieldInputId }\n                    input={ renderInput }\n                    label={ labelComponent }\n                    name={ fieldName }\n                    onChange={ onChange }\n                /> }\n        </div>\n    );\n};\n\nexport default memo(DynamicFormField);\n","import classNames from 'classnames';\nimport React, { forwardRef, Ref, TextareaHTMLAttributes } from 'react';\n\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\n    additionalClassName?: string;\n    testId?: string;\n}\n\nconst TextArea = forwardRef((\n    { additionalClassName, testId, className, ...rest }: TextAreaProps,\n    ref: Ref<HTMLTextAreaElement>\n) => (\n    <textarea\n        { ...rest }\n        className={ className || classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            additionalClassName\n        ) }\n        data-test={ testId }\n        ref={ ref }\n    />\n));\n\nexport default TextArea;\n"],"names":["parseAnchor","text","div","document","createElement","innerHTML","anchor","querySelector","anchorSiblings","split","outerHTML","mapCreateAccountFromFormValues","acceptsMarketingEmails","customFields","values","length","mapCustomFormFieldsFromFormValues","EMAIL_REGEXP","getEmailValidationSchema","language","email","max","matches","translate","required","getTranslateCreateCustomerError","type","label","min","formFields","passwordRequirements","description","numeric","alpha","minLength","firstName","lastName","password","concat","getCustomFormFieldsValidationSchema","withLanguage","withFormik","handleSubmit","onSubmit","noop","mapPropsToValues","validationSchema","find","requirements","Error","getCreateCustomerValidationSchema","getPasswordRequirements","createAccountError","isCreatingAccount","onCancel","createAccountErrorMessage","useMemo","isRequestError","status","splitMessage","message","TranslatedString","data","trim","id","Form","className","testId","Fieldset","Alert","map","field","DynamicFormField","autocomplete","name","extraClass","key","parentFieldName","custom","undefined","Button","disabled","variant","href","onClick","preventDefault","memo","onChange","renderInput","useCallback","props","TextInput","autoComplete","labelContent","FormField","input","onSendLoginEmail","isOpen","isSendingEmail","emailHasBeenRequested","onRequestClose","sentEmailError","sentEmail","submitForm","formEmail","modalHeaderStringId","okButton","footer","LoadingSpinner","isLoading","sent_email","TranslatedLink","error","form","expiry","TranslatedHtml","minutes","Math","round","Modal","additionalBodyClassName","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","PrivacyPolicyCheckboxFieldLink","url","CheckboxFormField","additionalClassName","requiresMarketingConsent","Fragment","Input","checked","value","Label","htmlFor","defaultShouldSubscribe","shouldSubscribe","privacyPolicy","onContinueAsGuest","privacyPolicyUrl","baseSchema","isRequired","schemaFields","oneOf","getPrivacyPolicyValidationSchema","canSubscribe","checkoutButtons","continueAsGuestButtonLabelId","onChangeEmail","onShowLogin","renderField","fieldProps","legend","Legend","hidden","BasicFormField","render","PrivacyPolicyField","withIconContainer","viewBox","xmlns","d","Toggle","openByDefault","toggle","onSignIn","canCancel","forgotPasswordUrl","isSignInEmailEnabled","isSigningIn","onCreateAccount","signInError","shouldShowCreateAccountLink","viewType","CustomerViewType","changeEmailLink","body","mapErrorMessage","rel","target","state","isEmailLoginFormOpen","isReady","hasRequestedLoginEmail","closeEmailLoginFormForm","setState","handleEmailLoginClicked","this","draftEmail","handleSendLoginEmail","sendLoginEmail","handleContinueAsGuest","formValues","continueAsGuest","onChangeViewType","onContinueAsGuestError","acceptsMarketingNewsletter","acceptsAbandonedCartEmails","customer","getCustomer","shouldEncourageSignIn","isGuest","executePaymentMethodCheckoutOrContinue","handleSignIn","credentials","signIn","onSignInError","handleCreateAccount","createAccount","onAccountCreated","showCreateAccount","handleCancelCreateAccount","clearError","handleCancelSignIn","handleChangeEmail","handleShowLogin","executePaymentMethodCheckout","providerWithCustomCheckout","methodId","continueWithCheckoutCallback","componentDidMount","initializeCustomer","onReady","onUnhandledError","componentWillUnmount","deinitializeCustomer","shouldRenderGuestForm","shouldRenderCreateAccountForm","shouldRenderLoginForm","LoadingOverlay","unmountContentWhenLoading","renderEmailLoginLinkForm","renderLoginForm","renderGuestForm","renderCreateAccountForm","checkEmbeddedSupport","checkoutButtonIds","isContinuingAsGuest","isExecutingPaymentMethodCheckout","isInitializing","CheckoutButtonList","deinitialize","initialize","methodIds","onError","isSendingSignInEmail","signInEmailError","signInEmail","customerAccountFields","isEmbedded","isGuestEnabled","isAccountCreationEnabled","Component","mapToWithCheckoutCustomerProps","checkoutService","checkoutState","getBillingAddress","getCustomerAccountFields","getCheckout","getSignInEmail","getConfig","getSignInError","getSignInEmailError","getCreateCustomerAccountError","isInitializingCustomer","isCreatingCustomerAccount","billingAddress","checkout","config","shopperConfig","showNewsletterSignup","checkoutSettings","remoteCheckoutProviders","createCustomerAccount","sendSignInEmail","defaultNewsletterSignup","links","forgotPasswordLink","guestCheckoutEnabled","signInCustomer","withCheckout","Customer","customFieldsObject","forIn","fieldValue","isDate","padMonth","padStart","getMonth","toString","padDay","getDate","getFullYear","push","fieldId","translatedString","parsedString","errorId","kebabCase","forwardRef","ref","rest","createInjectHoc","LocaleContext","displayNamePrefix","pickProps","date","fieldType","options","placeholder","inputFormat","handleDateChange","dateValue","event","DynamicFormFieldType","optionValue","CheckboxInput","Array","isArray","includes","calendarClassName","dateFormat","maxDate","Date","minDate","placeholderText","toUpperCase","popperClassName","selected","TextArea","onSelectedAll","onSelectedNone","handleSelectAllClick","handleSelectNoneClick","MultiCheckboxFormField","errors","remove","handleSelectAll","checkedValues","getIn","difference","forEach","val","handleSelectNone","handleInputChange","indexOf","FormFieldContainer","hasError","FormFieldError","renderProps","pick","FieldArray","secret","fieldLabel","maxLength","inputId","fieldInputId","fieldName","labelComponent","dynamicFormFieldType","items","helperLabel","rows"],"sourceRoot":""}