{"version":3,"file":"831-6a9f0357.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/ui/icon/IconChevronUp.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconChevronDown.tsx","webpack://checkout/./packages/core/src/app/order/mapFromCustom.tsx","webpack://checkout/./packages/core/src/app/order/getOrderSummaryItemImage.tsx","webpack://checkout/./packages/core/src/app/order/mapFromDigital.tsx","webpack://checkout/./packages/core/src/app/order/mapFromGiftCertificate.tsx","webpack://checkout/./packages/core/src/app/order/mapFromPhysical.tsx","webpack://checkout/./packages/core/src/app/order/OrderSummaryItem.tsx","webpack://checkout/./packages/core/src/app/order/OrderSummaryItems.tsx","webpack://checkout/./packages/core/src/app/order/OrderSummaryPrice.tsx","webpack://checkout/./packages/core/src/app/order/OrderSummarySection.tsx","webpack://checkout/./packages/core/src/app/order/OrderSummaryDiscount.tsx","webpack://checkout/./packages/core/src/app/order/OrderSummarySubtotals.tsx","webpack://checkout/./packages/core/src/app/order/OrderSummaryTotal.tsx","webpack://checkout/./packages/core/src/app/order/getItemsCount.ts","webpack://checkout/./packages/core/src/app/ui/icon/IconGiftCertificate.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconChevronUp: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconChevronUp);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconChevronDown: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconChevronDown);\n","import { CustomItem } from '@bigcommerce/checkout-sdk';\n\nimport { OrderSummaryItemProps } from './OrderSummaryItem';\n\nfunction mapFromCustom(item: CustomItem): OrderSummaryItemProps {\n    return {\n        id: item.id,\n        quantity: item.quantity,\n        amount: item.extendedListPrice,\n        name: item.name,\n    };\n}\n\nexport default mapFromCustom;\n","import { DigitalItem, PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport React, { ReactNode } from 'react';\n\nexport default function getOrderSummaryItemImage(item: DigitalItem | PhysicalItem): ReactNode {\n    if (!item.imageUrl) {\n        return;\n    }\n\n    return <img\n        alt={ item.name }\n        data-test=\"cart-item-image\"\n        src={ item.imageUrl }\n    />;\n}\n","import { DigitalItem } from '@bigcommerce/checkout-sdk';\nimport React from 'react';\n\nimport { TranslatedString } from '../locale';\n\nimport getOrderSummaryItemImage from './getOrderSummaryItemImage';\nimport { OrderSummaryItemOption, OrderSummaryItemProps } from './OrderSummaryItem';\n\nfunction mapFromDigital(item: DigitalItem): OrderSummaryItemProps {\n    return {\n        id: item.id,\n        quantity: item.quantity,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        name: item.name,\n        image: getOrderSummaryItemImage(item),\n        productOptions: [\n            ...(item.options || []).map(option => ({\n                testId: 'cart-item-product-option',\n                content: `${option.name} ${option.value}`,\n            })),\n            getDigitalItemDescription(item),\n        ],\n    };\n}\n\nfunction getDigitalItemDescription(item: DigitalItem): OrderSummaryItemOption {\n    if (!item.downloadPageUrl) {\n        return {\n            testId: 'cart-item-digital-product',\n            content: <TranslatedString id=\"cart.digital_item_text\" />,\n        };\n    }\n\n    return {\n        testId: 'cart-item-digital-product-download',\n        content:\n            <a\n                href={ item.downloadPageUrl }\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n            >\n                <TranslatedString id=\"cart.downloads_action\" />\n            </a>,\n    };\n}\n\nexport default mapFromDigital;\n","import { GiftCertificateItem } from '@bigcommerce/checkout-sdk';\nimport React from 'react';\n\nimport { IconGiftCertificate } from '../ui/icon';\n\nimport { OrderSummaryItemProps } from './OrderSummaryItem';\n\nfunction mapFromGiftCertificate(item: GiftCertificateItem): OrderSummaryItemProps {\n    return {\n        id: item.id,\n        quantity: 1,\n        amount: item.amount,\n        name: item.name,\n        image:\n            <span\n                className=\"productImage-giftCertificate\"\n                data-test=\"cart-item-gift-certificate\"\n            >\n                <IconGiftCertificate />\n            </span>,\n    };\n}\n\nexport default mapFromGiftCertificate;\n","import { PhysicalItem } from '@bigcommerce/checkout-sdk';\n\nimport getOrderSummaryItemImage from './getOrderSummaryItemImage';\nimport { OrderSummaryItemProps } from './OrderSummaryItem';\n\nfunction mapFromPhysical(item: PhysicalItem): OrderSummaryItemProps {\n    return {\n        id: item.id,\n        quantity: item.quantity,\n        amount: item.extendedComparisonPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        name: item.name,\n        image: getOrderSummaryItemImage(item),\n        description: item.giftWrapping ? item.giftWrapping.name : undefined,\n        productOptions: (item.options || []).map(option => ({\n            testId: 'cart-item-product-option',\n            content: `${option.name} ${option.value}`,\n        })),\n    };\n}\n\nexport default mapFromPhysical;\n","import classNames from 'classnames';\nimport { isNumber } from 'lodash';\nimport React, { memo, FunctionComponent, ReactNode } from 'react';\n\nimport { ShopperCurrency } from '../currency';\n\nexport interface OrderSummaryItemProps {\n    id: string | number;\n    amount: number;\n    quantity: number;\n    name: string;\n    amountAfterDiscount?: number;\n    image?: ReactNode;\n    description?: ReactNode;\n    productOptions?: OrderSummaryItemOption[];\n}\n\nexport interface OrderSummaryItemOption {\n    testId: string;\n    content: ReactNode;\n}\n\nconst OrderSummaryItem: FunctionComponent<OrderSummaryItemProps> = ({\n    amount,\n    amountAfterDiscount,\n    image,\n    name,\n    productOptions,\n    quantity,\n    description,\n}) => (\n    <div className=\"product\" data-test=\"cart-item\">\n        <figure className=\"product-column product-figure\">\n            { image }\n        </figure>\n\n        <div className=\"product-column product-body\">\n            <h5\n                className=\"product-title optimizedCheckout-contentPrimary\"\n                data-test=\"cart-item-product-title\"\n            >\n                { `${quantity} x ${name}` }\n            </h5>\n            <ul\n                className=\"product-options optimizedCheckout-contentSecondary\"\n                data-test=\"cart-item-product-options\"\n            >\n                { (productOptions || []).map((option, index) =>\n                    <li\n                        className=\"product-option\"\n                        data-test={ option.testId }\n                        key={ index }\n                    >\n                        { option.content }\n                    </li>\n                ) }\n            </ul>\n            { description && <div\n                className=\"product-description optimizedCheckout-contentSecondary\"\n                data-test=\"cart-item-product-description\"\n            >\n                { description }\n            </div> }\n        </div>\n\n        <div className=\"product-column product-actions\">\n            <div\n                className={ classNames(\n                    'product-price',\n                    'optimizedCheckout-contentPrimary',\n                    { 'product-price--beforeDiscount': isNumber(amountAfterDiscount) && amountAfterDiscount !== amount }\n                ) }\n                data-test=\"cart-item-product-price\"\n            >\n                <ShopperCurrency amount={ amount } />\n            </div>\n\n            { isNumber(amountAfterDiscount) && amountAfterDiscount !== amount && <div\n                className=\"product-price\"\n                data-test=\"cart-item-product-price--afterDiscount\"\n            >\n                <ShopperCurrency amount={ amountAfterDiscount } />\n            </div> }\n        </div>\n    </div>\n);\n\nexport default memo(OrderSummaryItem);\n","import { LineItemMap } from '@bigcommerce/checkout-sdk';\nimport React, { Fragment, ReactNode } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { IconChevronDown, IconChevronUp } from '../ui/icon';\n\nimport getItemsCount from './getItemsCount';\nimport mapFromCustom from './mapFromCustom';\nimport mapFromDigital from './mapFromDigital';\nimport mapFromGiftCertificate from './mapFromGiftCertificate';\nimport mapFromPhysical from './mapFromPhysical';\nimport OrderSummaryItem from './OrderSummaryItem';\n\nconst COLLAPSED_ITEMS_LIMIT = 4;\n\nexport interface OrderSummaryItemsProps {\n    items: LineItemMap;\n}\n\ninterface OrderSummaryItemsState {\n    isExpanded: boolean;\n}\n\nclass OrderSummaryItems extends React.Component<OrderSummaryItemsProps, OrderSummaryItemsState> {\n    constructor(props: OrderSummaryItemsProps) {\n        super(props);\n\n        this.state = {\n            isExpanded: false,\n        };\n    }\n\n    render(): ReactNode {\n        const { items } = this.props;\n        const { isExpanded } = this.state;\n\n        return (<Fragment>\n            <h3\n                className=\"cart-section-heading optimizedCheckout-contentPrimary\"\n                data-test=\"cart-count-total\"\n            >\n                <TranslatedString\n                    data={ { count: getItemsCount(items) } }\n                    id=\"cart.item_count_text\"\n                />\n            </h3>\n\n            <ul aria-live=\"polite\" className=\"productList\">\n                {\n                    [\n                        ...items.physicalItems\n                            .slice()\n                            .sort(item => item.variantId)\n                            .map(mapFromPhysical),\n                        ...items.giftCertificates\n                            .slice()\n                            .map(mapFromGiftCertificate),\n                        ...items.digitalItems\n                            .slice()\n                            .sort(item => item.variantId)\n                            .map(mapFromDigital),\n                        ...(items.customItems || [])\n                            .map(mapFromCustom),\n                    ]\n                        .slice(0, isExpanded ? undefined : COLLAPSED_ITEMS_LIMIT)\n                        .map(summaryItemProps =>\n                            <li\n                                className=\"productList-item is-visible\"\n                                key={ summaryItemProps.id }\n                            >\n                                <OrderSummaryItem { ...summaryItemProps } />\n                            </li>\n                        )\n                }\n            </ul>\n\n            { this.renderActions() }\n        </Fragment>);\n    }\n\n    private renderActions(): ReactNode {\n        const { isExpanded } = this.state;\n\n        if (this.getLineItemCount() < 5) {\n            return;\n        }\n\n        return (\n            <div className=\"cart-actions\">\n                <button\n                    className=\"button button--tertiary button--tiny optimizedCheckout-buttonSecondary\"\n                    onClick={ this.handleToggle }\n                    type=\"button\"\n                >\n                        { isExpanded ?\n                            <Fragment>\n                                <TranslatedString id=\"cart.see_less_action\" />\n                                <IconChevronUp />\n                            </Fragment> :\n                            <Fragment>\n                                <TranslatedString id=\"cart.see_all_action\" />\n                                <IconChevronDown />\n                            </Fragment> }\n                </button>\n            </div>\n        );\n    }\n\n    private getLineItemCount(): number {\n        const { items } = this.props;\n\n        return (items.customItems || []).length +\n            items.physicalItems.length +\n            items.digitalItems.length +\n            items.giftCertificates.length;\n    }\n\n    private handleToggle: () => void = () => {\n        const { isExpanded } = this.state;\n\n        this.setState({ isExpanded: !isExpanded });\n    };\n}\n\nexport default OrderSummaryItems;\n","import classNames from 'classnames';\nimport React, { Component, ReactNode } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport { preventDefault } from '../common/dom';\nimport { ShopperCurrency } from '../currency';\n\nexport interface OrderSummaryPriceProps {\n    label: ReactNode;\n    amount?: number | null;\n    zeroLabel?: ReactNode;\n    className?: string;\n    testId?: string;\n    currencyCode?: string;\n    superscript?: string;\n    actionLabel?: ReactNode;\n    onActionTriggered?(): void;\n}\n\nexport interface OrderSummaryPriceState {\n    highlight: boolean;\n    previousAmount?: number;\n}\n\nfunction getDisplayValue(amount?: number | null, zeroLabel?: ReactNode): ReactNode | number {\n    const notYetSetSymbol = '--';\n\n    if (typeof amount === 'undefined' || amount === null) {\n        return notYetSetSymbol;\n    }\n\n    if (zeroLabel && amount === 0) {\n        return zeroLabel;\n    }\n\n    return amount;\n}\n\nfunction isNumberValue(displayValue: number | ReactNode): displayValue is number {\n    return typeof displayValue === 'number';\n}\n\nclass OrderSummaryPrice extends Component<OrderSummaryPriceProps, OrderSummaryPriceState> {\n    static getDerivedStateFromProps(props: OrderSummaryPriceProps, state: OrderSummaryPriceState) {\n        return {\n            highlight: props.amount !== state.previousAmount,\n            previousAmount: props.amount,\n        };\n    }\n\n    state = {\n        highlight: false,\n        previousAmount: 0,\n    };\n\n    render(): ReactNode {\n        const {\n            amount,\n            actionLabel,\n            onActionTriggered,\n            children,\n            className,\n            currencyCode,\n            label,\n            superscript,\n            testId,\n            zeroLabel,\n        } = this.props;\n\n        const { highlight } = this.state;\n        const displayValue = getDisplayValue(amount, zeroLabel);\n\n        return (\n            <div data-test={ testId }>\n                <CSSTransition\n                    addEndListener={ this.handleTransitionEnd }\n                    classNames=\"changeHighlight\"\n                    in={ highlight }\n                    timeout={ {} }\n                >\n                    <div\n                        aria-live=\"polite\"\n                        className={ classNames(\n                            'cart-priceItem',\n                            'optimizedCheckout-contentPrimary',\n                            className\n                        ) }\n                    >\n                        <span className=\"cart-priceItem-label\">\n                            <span data-test=\"cart-price-label\">\n                                { label }\n                                { '  ' }\n                            </span>\n                            { currencyCode && <span className=\"cart-priceItem-currencyCode\">\n                                { `(${currencyCode}) ` }\n                            </span> }\n                            { onActionTriggered && actionLabel && <span className=\"cart-priceItem-link\">\n                                <a\n                                    data-test=\"cart-price-callback\"\n                                    href=\"#\"\n                                    onClick={ preventDefault(onActionTriggered) }\n                                >\n                                    { actionLabel }\n                                </a>\n                            </span> }\n                        </span>\n\n                        <span className=\"cart-priceItem-value\">\n                            <span data-test=\"cart-price-value\">\n                                { isNumberValue(displayValue) ?\n                                    <ShopperCurrency amount={ displayValue } /> :\n                                    displayValue }\n                            </span>\n\n                            { superscript && <sup data-test=\"cart-price-value-superscript\">\n                                { superscript }\n                            </sup> }\n                        </span>\n\n                        { children }\n                    </div>\n                </CSSTransition>\n            </div>\n        );\n    }\n\n    private handleTransitionEnd: (node: HTMLElement, done: () => void) => void = (node, done) => {\n        const { previousAmount } = this.state;\n\n        node.addEventListener('animationend', ({ target }) => {\n            if (target === node) {\n                this.setState({\n                    highlight: false,\n                    previousAmount,\n                });\n                done();\n            }\n        });\n    };\n}\n\nexport default OrderSummaryPrice;\n","import React, { FunctionComponent } from 'react';\n\nconst OrderSummarySection: FunctionComponent = ({\n    children,\n}) => (\n    <section className=\"cart-section optimizedCheckout-orderSummary-cartSection\">\n        { children }\n    </section>\n);\n\nexport default OrderSummarySection;\n","import React, { memo, FunctionComponent } from 'react';\n\nimport { ShopperCurrency } from '../currency';\nimport { TranslatedString } from '../locale';\n\nimport OrderSummaryPrice, { OrderSummaryPriceProps } from './OrderSummaryPrice';\n\nexport interface OrderSummaryDiscountProps extends OrderSummaryPriceProps {\n    remaining?: number;\n    code?: string;\n    onRemoved?(code: string): void;\n}\n\nconst OrderSummaryDiscount: FunctionComponent<OrderSummaryDiscountProps> = ({\n    code,\n    remaining,\n    amount,\n    onRemoved,\n    ...rest\n}) => (\n    <OrderSummaryPrice\n        { ...rest }\n        { ...(onRemoved && {\n            onActionTriggered: () => code && onRemoved(code),\n            actionLabel: <TranslatedString id=\"cart.remove_action\" />,\n        }) }\n        amount={ -1 * (amount || 0) }\n    >\n        { !!remaining && remaining > 0 && <span\n            className=\"cart-priceItem-postFix optimizedCheckout-contentSecondary\"\n            data-test=\"cart-price-remaining\"\n        >\n            <TranslatedString id=\"cart.remaining_text\" />\n            { ': ' }\n            <ShopperCurrency amount={ remaining } />\n        </span> }\n\n        { code && <span\n            className=\"cart-priceItem-postFix optimizedCheckout-contentSecondary\"\n            data-test=\"cart-price-code\"\n        >\n            { code }\n        </span> }\n    </OrderSummaryPrice>\n);\n\nexport default memo(OrderSummaryDiscount);\n","import { Coupon, GiftCertificate, Tax } from '@bigcommerce/checkout-sdk';\nimport React, { memo, Fragment, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\n\nimport OrderSummaryDiscount from './OrderSummaryDiscount';\nimport OrderSummaryPrice from './OrderSummaryPrice';\n\nexport interface OrderSummarySubtotalsProps {\n    coupons: Coupon[];\n    giftCertificates?: GiftCertificate[];\n    discountAmount?: number;\n    taxes?: Tax[];\n    giftWrappingAmount?: number;\n    shippingAmount?: number;\n    handlingAmount?: number;\n    storeCreditAmount?: number;\n    subtotalAmount: number;\n    onRemovedGiftCertificate?(code: string): void;\n    onRemovedCoupon?(code: string): void;\n}\n\nconst OrderSummarySubtotals: FunctionComponent<OrderSummarySubtotalsProps> = ({\n    discountAmount,\n    giftCertificates,\n    taxes,\n    giftWrappingAmount,\n    shippingAmount,\n    subtotalAmount,\n    handlingAmount,\n    storeCreditAmount,\n    coupons,\n    onRemovedGiftCertificate,\n    onRemovedCoupon,\n}) => {\n    return (<Fragment>\n        <OrderSummaryPrice\n            amount={ subtotalAmount }\n            className=\"cart-priceItem--subtotal\"\n            label={ <TranslatedString id=\"cart.subtotal_text\" /> }\n            testId=\"cart-subtotal\"\n        />\n\n        { (coupons || [])\n            .map((coupon, index) =>\n                <OrderSummaryDiscount\n                    amount={ coupon.discountedAmount }\n                    code={ coupon.code }\n                    key={ index }\n                    label={ coupon.displayName }\n                    onRemoved={ onRemovedCoupon }\n                    testId=\"cart-coupon\"\n                />\n        ) }\n\n        { !!discountAmount && <OrderSummaryDiscount\n            amount={ discountAmount }\n            label={ <TranslatedString id=\"cart.discount_text\" /> }\n            testId=\"cart-discount\"\n        /> }\n\n        { (giftCertificates || [])\n            .map((giftCertificate, index) =>\n                <OrderSummaryDiscount\n                    amount={ giftCertificate.used }\n                    code={ giftCertificate.code }\n                    key={ index }\n                    label={ <TranslatedString id=\"cart.gift_certificate_text\" /> }\n                    onRemoved={ onRemovedGiftCertificate }\n                    remaining={ giftCertificate.remaining }\n                    testId=\"cart-gift-certificate\"\n                />\n        ) }\n\n        { !!giftWrappingAmount && <OrderSummaryPrice\n            amount={ giftWrappingAmount }\n            label={ <TranslatedString id=\"cart.gift_wrapping_text\" /> }\n            testId=\"cart-gift-wrapping\"\n        /> }\n\n        <OrderSummaryPrice\n            amount={ shippingAmount }\n            label={ <TranslatedString id=\"cart.shipping_text\" /> }\n            testId=\"cart-shipping\"\n            zeroLabel={ <TranslatedString id=\"cart.free_text\" /> }\n        />\n\n        { !!handlingAmount && <OrderSummaryPrice\n            amount={ handlingAmount }\n            label={ <TranslatedString id=\"cart.handling_text\" /> }\n            testId=\"cart-handling\"\n        /> }\n\n        { (taxes || [])\n            .map((tax, index) =>\n                <OrderSummaryPrice\n                    amount={ tax.amount }\n                    key={ index }\n                    label={ tax.name }\n                    testId=\"cart-taxes\"\n                />\n         ) }\n\n        { !!storeCreditAmount && <OrderSummaryDiscount\n            amount={ storeCreditAmount }\n            label={ <TranslatedString id=\"cart.store_credit_text\" /> }\n            testId=\"cart-store-credit\"\n        /> }\n    </Fragment>);\n};\n\nexport default memo(OrderSummarySubtotals);\n","import React, { Fragment, FunctionComponent } from 'react';\n\nimport { withCurrency, TranslatedString, WithCurrencyProps } from '../locale';\n\nimport OrderSummaryPrice from './OrderSummaryPrice';\n\nexport interface OrderSummaryTotalProps {\n    orderAmount: number;\n    shopperCurrencyCode: string;\n    storeCurrencyCode: string;\n}\n\nconst OrderSummaryTotal: FunctionComponent<OrderSummaryTotalProps & WithCurrencyProps> = ({\n    shopperCurrencyCode,\n    storeCurrencyCode,\n    orderAmount,\n    currency,\n}) => {\n\n    const hasDifferentCurrency = shopperCurrencyCode !== storeCurrencyCode;\n    const label = <Fragment>\n        { hasDifferentCurrency ?\n            <TranslatedString id=\"cart.estimated_total_text\" /> :\n            <TranslatedString id=\"cart.total_text\" /> }\n        { ` (${shopperCurrencyCode})` }\n    </Fragment>;\n\n    return (\n        <Fragment>\n            <OrderSummaryPrice\n                amount={ orderAmount }\n                className=\"cart-priceItem--total\"\n                label={ label }\n                superscript={ hasDifferentCurrency ? '*' : undefined }\n                testId=\"cart-total\"\n            />\n            { hasDifferentCurrency && currency && <p\n                className=\"cart-priceItem--totalNote\"\n                data-test=\"cart-price-item-total-note\"\n            >\n                <TranslatedString\n                    data={ {\n                        total: currency.toStoreCurrency(orderAmount),\n                        code: storeCurrencyCode,\n                    } }\n                    id=\"cart.billed_amount_text\"\n                />\n            </p> }\n        </Fragment>\n    );\n};\n\nexport default withCurrency(OrderSummaryTotal);\n","import { LineItemMap } from '@bigcommerce/checkout-sdk';\n\nexport default function getItemsCount({\n    physicalItems,\n    digitalItems,\n    giftCertificates,\n    customItems,\n}: LineItemMap): number {\n    const totalItemsCount = [\n        ...physicalItems,\n        ...digitalItems,\n        ...(customItems || []),\n    ].reduce((total, item) => total += item.quantity, 0);\n\n    return totalItemsCount + giftCertificates.length;\n}\n","import React, { FunctionComponent } from 'react';\n\nconst IconGiftCertificate: FunctionComponent = () => (\n    <svg\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        width=\"24\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path d=\"M20 6h-2.18c.11-.31.18-.65.18-1a2.996 2.996 0 0 0-5.5-1.65l-.5.67-.5-.68C10.96 2.54 10.05 2 9 2 7.34 2 6 3.34 6 5c0 .35.07.69.18 1H4c-1.11 0-1.99.89-1.99 2L2 19c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zm-5-2c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zM9 4c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm11 15H4v-2h16v2zm0-5H4V8h5.08L7 10.83 8.62 12 11 8.76l1-1.36 1 1.36L15.38 12 17 10.83 14.92 8H20v6z\" />\n    </svg>\n);\n\nexport default IconGiftCertificate;\n"],"names":["withIconContainer","height","viewBox","width","xmlns","d","item","id","quantity","amount","extendedListPrice","name","getOrderSummaryItemImage","imageUrl","alt","src","getDigitalItemDescription","downloadPageUrl","testId","content","href","rel","target","TranslatedString","amountAfterDiscount","extendedSalePrice","image","productOptions","options","map","option","value","className","IconGiftCertificate","extendedComparisonPrice","description","giftWrapping","undefined","memo","index","key","isNumber","ShopperCurrency","props","handleToggle","isExpanded","state","setState","render","items","this","Fragment","data","count","getItemsCount","physicalItems","slice","sort","variantId","giftCertificates","digitalItems","customItems","summaryItemProps","renderActions","getLineItemCount","onClick","type","length","highlight","previousAmount","handleTransitionEnd","node","done","addEventListener","getDerivedStateFromProps","actionLabel","onActionTriggered","children","currencyCode","label","superscript","zeroLabel","displayValue","getDisplayValue","CSSTransition","addEndListener","classNames","in","timeout","isNumberValue","Component","code","remaining","onRemoved","rest","OrderSummaryPrice","discountAmount","taxes","giftWrappingAmount","shippingAmount","subtotalAmount","handlingAmount","storeCreditAmount","coupons","onRemovedGiftCertificate","onRemovedCoupon","coupon","discountedAmount","displayName","giftCertificate","used","tax","shopperCurrencyCode","storeCurrencyCode","orderAmount","currency","hasDifferentCurrency","total","toStoreCurrency","reduce"],"sourceRoot":""}